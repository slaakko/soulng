// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <soulng/parsing/Scope.hpp>
[hpp]#include <soulng/parsing/Parser.hpp>
[cpp]#include <soulng/parsing/Composite.hpp>
[cpp]#include <soulng/syntax/Primary.hpp>

namespace soulng.syntax
{
    grammar Composite
    {
        using Primary.Primary;

        Alternative(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= Sequence(enclosingScope):left{ value = left; } ('|' Sequence(enclosingScope):right!{ value = new AlternativeParser(value, right); })*
                        ;

        Sequence(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= Difference(enclosingScope):left{ value = left; } (Difference(enclosingScope):right{ value = new SequenceParser(value, right); })*
                        ;

        Difference(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= ExclusiveOr(enclosingScope):left{ value = left; } ('-' ExclusiveOr(enclosingScope):right!{ value = new DifferenceParser(value, right); })*
                        ;

        ExclusiveOr(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= Intersection(enclosingScope):left{ value = left; } ('^' Intersection(enclosingScope):right!{ value = new ExclusiveOrParser(value, right); })*
                        ;

        Intersection(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= List(enclosingScope):left{ value = left; } ('&' List(enclosingScope):right{ value = new IntersectionParser(value, right); })*
                        ;

        List(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser* 
                        ::= Postfix(enclosingScope):left{ value = left; } ('%' Postfix(enclosingScope):right{ value = new ListParser(value, right); })?
                        ;

        Postfix(soulng::parsing::Scope* enclosingScope): soulng::parsing::Parser*
                        ::= Primary(enclosingScope){ value = Primary; }
                        (   '*'{ value = new KleeneStarParser(value); }
                        |   '+'{ value = new PositiveParser(value); }
                        |   '?'{ value = new OptionalParser(value); }
                        )?
                        ;
    }
}
