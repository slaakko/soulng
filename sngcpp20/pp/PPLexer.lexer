#include <sngcpp20/pp/PP.hpp>

classmap PPClassMap;

prefix "sngcpp20/pp";

tokens PPTokens
{
    (DEFINE, "'define'"), (INCLUDE, "'include'"), (IF, "'if'"), (ELIF, "'elif'"), (ELSE, "'else'"), (ENDIF, "'endif'"), (IFDEF, "'ifdef"), (IFNDEF, "'ifndef'"), (UNDEF, "'undef'"),
    (DEFINED, "'defined'"), (ANGLEHEADERNAME, "angleheadername"), (QUOTEHEADERNAME, "quoteheadername"), (PPNUMBER, "preprocessing number"), (CHARLITERAL, "character literal"),
    (STRINGLITERAL, "string literal"),
    (HASH, "'#'"), (CHAR, "character"),
    (ID, "identifier"), (COLONCOLON, "'::'"), (COMMA, "','"), (ASSIGN, "'='"), (MULASSIGN, "'*='"), (DIVASSIGN, "'/='"), (REMASSIGN, "'%='"), (ADDASSIGN, "'+='"), (SUBASSIGN, "'-='"),
    (SHIFTRIGHTASSIGN, "'>>='"), (SHIFTLEFTASSIGN, "'<<='"), (ANDASSIGN, "'&='"), (XORASSIGN, "'^='"), (ORASSIGN, "'|='"), (QUEST, "'?'"), (COLON, "':'"),
    (OROR, "'||'"), (AMPAMP, "'&&'"), (OR, "'|'"), (XOR, "'^'"), (AMP, "'&'"), (EQ, "'=='"), (NEQ, "'!='"), (LEQ, "'<='"), (GEQ, "'>='"), (SPACESHIP, "<=>"), (LANGLE, "'<'"), (RANGLE, "'>'"),
    (SHIFTLEFT, "'<<'"), (SHIFTRIGHT, "'>>'"), (PLUS, "'+'"), (MINUS, "'-'"), (STAR, "'*'"), (DIV, "'/'"), (MOD, "'%'"), (DOTSTAR, "'.*'"), (ARROWSTAR, "'->*'"), (LPAREN, "'('"), (RPAREN, "')'"),
    (PLUSPLUS, "'++'"), (MINUSMINUS, "'--'"), (EXCLAMATION, "'!'"), (TILDE, "'~'"), 
    (LBRACKET, "'['"), (RBRACKET, "']'"), (LBRACE, "'{'"), (RBRACE, "'}'"), (DOT, "'.'"), (ARROW, "'->'"), (SEMICOLON, "';'"), (ELLIPSES, "'...'"),
    (MAX, "max")
}

keywords PPKeywords
{
    ("define", DEFINE), ("include", INCLUDE), ("if", IF), ("elif", ELIF), ("else", ELSE), ("endif", ENDIF), ("ifdef", IFDEF), ("ifndef", IFNDEF), ("undef", UNDEF), ("defined", DEFINED)
}

expressions
{
    ws = "[\t ]+";
    newline = "\r\n|\n|\r";
    linecontinuation = "\\{newline}";
    linecomment = "//[^\n\r]*{newline}";
    blockcomment = "/\*([^*]|\*[^/])*\*/";
    hexdigit = "[0-9a-fA-F]";
    hex4 = "{hexdigit}{hexdigit}{hexdigit}{hexdigit}";
    hex8 = "{hex4}{hex4}";
    univcn = "\\u{hex4}|\\U{hex8}";
    id = "({idstart}|{univcn})({idcont}|{univcn})*";
    angleheadername = "<[^\r\n>]+>";
    quoteheadername = "\"[^\r\n\"]+\"";
    digit = "[0-9]";
    nondigit = "[a-zA-Z_]";
    identifiernondigit = "{nondigit}|{univcn}";
    sign = "\+|-";
    ppnumber = "(({digit}|')+\.?|\.({digit}|')+)([eEpP]{sign}|{identifiernondigit})*";
    octaldigit = "[0-7]";
    simpleescape = "\\['\"\?\\abfnrtv]";
    octalescape = "\\{octaldigit}|\\{octaldigit}{octaldigit}|\\{octaldigit}{octaldigit}{octaldigit}";
    hexescape = "\\x{hexdigit}+";
    escape = "{simpleescape}|{octalescape}|{hexescape}";
    cchar = "[^\r\n\\']|{escape}|{univcn}";
    characterliteral = "[uUL]?'{cchar}+'";
    encodingprefix = "u8|u|U|L";
    schar = "[^\r\n\\\"]|{escape}|{univcn}";
    stringliteral = "{encodingprefix}?\"{schar}*\"|{encodingprefix}?R\"[^\n\r\"]*\"";
}

lexer api(PP_API) PPLexer
{
    "{ws}" { pp->Emit(token.match); }
    "{linecontinuation}" {}
    "{blockcomment}" { pp->Emit(U" "); }
    "{linecomment}" { pp->Emit(U" "); }
    "{newline}" {}
    "{id}" { int kw = GetKeywordToken(token.match); if (kw == INVALID_TOKEN) return ID; else return kw; }
    "{angleheadername}" { return ANGLEHEADERNAME; }
    "{quoteheadername}" { return QUOTEHEADERNAME; }
    "{ppnumber}" { return PPNUMBER; }
    "{characterliteral}" { return CHARLITERAL; }
    "{stringliteral}" { return STRINGLITERAL; }
    "#" { return HASH; }
    "::" { return COLONCOLON; }
    "," { return COMMA; }
    "=" { return ASSIGN; }
    "\*=" { return MULASSIGN; }
    "/=" { return DIVASSIGN; }
    "%=" { return REMASSIGN; }
    "\+=" { return ADDASSIGN; }
    "-=" { return SUBASSIGN; }
    ">>=" { return SHIFTRIGHTASSIGN; }
    "<<=" { return SHIFTLEFTASSIGN; }
    "&=" { return ANDASSIGN; }
    "^=" { return XORASSIGN; }
    "\|=" { return ORASSIGN; }
    "\?" { return QUEST; }
    ":" { return COLON; }
    "\|\|" { return OROR; }
    "&&" { return AMPAMP; }
    "\|" { return OR; }
    "^" { return XOR; }
    "&" { return AMP; }
    "==" { return EQ; }
    "!=" { return NEQ; }
    "<=" { return LEQ; }
    ">=" { return GEQ; }
    "<=>" { return SPACESHIP; }
    "<" { return LANGLE; }
    ">" { return RANGLE; }
    "<<" { return SHIFTLEFT; }
    ">>" { return SHIFTRIGHT; }
    "\+" { return PLUS; }
    "-" { return MINUS; }
    "\*" { return STAR; }
    "/" { return DIV; }
    "%" { return MOD; }
    "\.\*" { return DOTSTAR; }
    "->\*" { return ARROWSTAR; }
    "\(" { return LPAREN; }
    "\)" { return RPAREN; }
    "\+\+" { return PLUSPLUS; }
    "--" { return MINUSMINUS; }
    "!" { return EXCLAMATION; }
    "~" { return TILDE; }
    "\[" { return LBRACKET; }
    "\]" { return RBRACKET; }
    "\." { return DOT; }
    "->" { return ARROW; }
    ";" { return SEMICOLON; }
    "\.\.\." { return ELLIPSES; }
    "\{" { return LBRACE; }
    "\}" { return RBRACE; }

    variables
    {
        sngcpp::pp::PP* pp;
    }
}
