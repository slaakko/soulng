// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/pp/PP.hpp>
[cpp]#include <sngcpp20/pp/PPLexer.hpp>
[cpp]#include <sngcpp20/pp/PPTokens.hpp>

using namespace PPTokens;

parser api(PP_API) PPLineParser
{
    uselexer PPLexer;
    main;

    PPLine(sngcpp::pp::PP* pp)
        ::= Define(pp):defineLine
        |   Include(pp):includeLine
        |   If(pp):ifLine
        |   Ifdef(pp):ifdefLine
        |   Ifndef(pp):ifndefLine
        |   Elif(pp):elifLine
        |   Else(pp):elseLine
        |   Endif(pp):endifLine
        |   Undef(pp):undefLine
        |   Other(pp):otherLine
        ;

    Define(sngcpp::pp::PP* pp, var std::vector<soulng::lexer::Token>* tokens)
        ::= (HASH DEFINE ID{ soulng::lexer::Token id = lexer.GetToken(pos); tokens = pp->BeginDefine(id.match); } PPToken(tokens):ppToken*)
        {
            pp->EndDefine(*tokens);
        }
        ;

    Include(sngcpp::pp::PP* pp, var bool isAngleHeader, var std::string headerName)
        ::= HASH INCLUDE
        (   ANGLEHEADERNAME{ isAngleHeader = true; soulng::lexer::Token headerNameToken = lexer.GetToken(pos); headerName = sngcpp::pp::ParseAngleHeaderName(lexer.FileName(), headerNameToken); }
        |   QUOTEHEADERNAME{ isAngleHeader = false; soulng::lexer::Token headerNameToken = lexer.GetToken(pos); headerName = sngcpp::pp::ParseQuoteHeaderName(lexer.FileName(), headerNameToken); }
        )
        {
            pp->Include(isAngleHeader, headerName);
        }
        ;

    If(sngcpp::pp::PP* pp, var std::vector<soulng::lexer::Token> exprTokens)
        ::=
        (
            HASH IF PPToken(&exprTokens):ppToken*
        )
        {
            pp->If(exprTokens);
        }
        ;

    Ifdef(sngcpp::pp::PP* pp, var bool defined)
        ::=
        (
            HASH IFDEF ID{ soulng::lexer::Token token = lexer.GetToken(pos); defined = pp->IsDefined(token.match); }
        )
        {
            pp->Ifdef(defined);
        }
        ;

    Ifndef(sngcpp::pp::PP* pp, var bool defined)
        ::= 
        (
            HASH IFNDEF ID{ soulng::lexer::Token token = lexer.GetToken(pos); defined = pp->IsDefined(token.match); }
        )
        {
            pp->Ifndef(defined);
        }
        ;

    Elif(sngcpp::pp::PP* pp, var std::vector<soulng::lexer::Token> exprTokens)
        ::=
        (
            HASH ELIF PPToken(&exprTokens):ppToken*
        )
        {
            pp->Elif(exprTokens);
        }
        ;

    Else(sngcpp::pp::PP* pp)
        ::=
        (
            HASH ELSE
        )
        {
            pp->Else();
        }
        ;

    Endif(sngcpp::pp::PP* pp)
        ::=
        (
            HASH ENDIF
        )
        {
            pp->Endif();
        }
        ;

    Undef(sngcpp::pp::PP* pp)
        ::=
        (
            HASH UNDEF ID{ soulng::lexer::Token id = lexer.GetToken(pos); pp->Undef(id.match);}
        )
        ;

    Other(sngcpp::pp::PP* pp)
        ::=
        (
            HASH PPToken(nullptr):ppToken*
        )
        ;

    PPToken(std::vector<soulng::lexer::Token>* tokens) : int*
        ::= ID{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   DEFINED{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ANGLEHEADERNAME{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   QUOTEHEADERNAME{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   PPNUMBER{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   CHARLITERAL{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   STRINGLITERAL{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   CHAR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   COLONCOLON{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   COMMA{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   MULASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   DIVASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   REMASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ADDASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SUBASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SHIFTRIGHTASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SHIFTLEFTASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ANDASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   XORASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ORASSIGN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   QUEST{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   COLON{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   OROR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   AMPAMP{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   OR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   XOR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   AMP{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   EQ{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   NEQ{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   LEQ{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   GEQ{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SPACESHIP{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   LANGLE{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   RANGLE{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SHIFTLEFT{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SHIFTRIGHT{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   PLUS{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   MINUS{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   STAR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   DIV{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   MOD{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   DOTSTAR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ARROWSTAR{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   LPAREN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   RPAREN{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   PLUSPLUS{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   MINUSMINUS{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   EXCLAMATION{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   TILDE{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   LBRACKET{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   RBRACKET{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   DOT{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ARROW{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   SEMICOLON{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        |   ELLIPSES{ if (tokens) tokens->push_back(lexer.GetToken(pos)); return nullptr; }
        ;
}
