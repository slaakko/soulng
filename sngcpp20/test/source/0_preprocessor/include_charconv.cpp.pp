 
  
 
  
 
  
   
                                           
                                                 
           
     
                                                                                                                   
  
    
                                                                                              
                     
  

    
 

 





  

 


 

      
   
    
  
 
  
 
  
   
   
 

   
 
  

 
  
 
  

 


 



 
   
 





 
    

  
 


 



 
               

 

 

    

 








 



  
 

 
    
 
 
  
 
 

 
 
 

 
  
   
 




   
   

   

   
 

 

   
    
  
 

 
 
    
  
 
 
 
 




 

  
 
 
  
 
  
  

   
 
 
  
 
   
 
 
  
  
 

 

  

  



 


  



 
 
 
 
    
 
  
 
 
 


 


  
 
 
 

 
    
 
  
 
 
 


 


  
 
 
 

   

   
   
 
  
 
 
 
  
 
 
 

 
 
  
 
 
  
 
 
 


 


  
 
 
 

  
 
 
 
    



     









    



   

    
      
   




 



























 

 
 


extern "C" {


 

 





 


 




    





     
 



    


     
 





}

 



extern "C" {












 





}

          

 
  
 
  

extern "C" {


        typedef unsigned __int64  uintptr_t;

        typedef char* va_list;




    void __cdecl __va_start(va_list* , ...);



}  
    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_assert_va_start_is_not_reference
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value,
                "va_start argument must not have reference type and must not be parenthesized");
        };
    }  




   



         extern "C" {












 


 




 
     typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;

    typedef bool  __vcrt_bool;

 


 



    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

    }




 

 




    void __cdecl __security_init_cookie(void);

        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);

extern uintptr_t __security_cookie;


}                             


 
  

  


      
 
 
















































































 



 


 




 





  

  
 
  
 
 

                         
  
      

  





  
 
 
 
 
 
 
 
    
 
  

 
 

 

  

  
   
 
 
 
  
 
 
 
 
 
 
 
 
 
  
 

  
 
 


 
 

 





 
 










  
 
 
 

 



























 
 
 


 
 






  


       
       
       
     
  
 
           




         extern "C" {

     
  




 

     








     extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}

    typedef bool  __crt_bool;





         



     


 


     
 void __cdecl _invalid_parameter_noinfo(void);
 __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
 void __cdecl _invoke_watson(
      wchar_t const* _Expression,
      wchar_t const* _FunctionName,
      wchar_t const* _FileName,
            unsigned int _LineNo,
            uintptr_t _Reserved);

                                                                                                   


     





     




     











                  






     typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{      unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



        typedef __time64_t time_t;

 
    typedef size_t rsize_t;




     








































     













































}                             


       
       
       

extern "C++" {



namespace std
{
    enum class align_val_t : size_t {};
}

    namespace std
    {
        struct nothrow_t {
            explicit nothrow_t() = default;
        };

            extern nothrow_t const nothrow;
    }

     __declspec(allocator)
void* __cdecl operator new(
    size_t _Size
    );

       __declspec(allocator)
void* __cdecl operator new(
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

     __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size
    );

       __declspec(allocator)
void* __cdecl operator new[](
    size_t _Size,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void* _Block
    ) noexcept;

void __cdecl operator delete(
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void* _Block
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) noexcept;

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) noexcept;

     __declspec(allocator)
void* __cdecl operator new(
    size_t             _Size,
    ::std::align_val_t _Al
    );

       __declspec(allocator)
void* __cdecl operator new(
    size_t                  _Size,
    ::std::align_val_t      _Al,
    ::std::nothrow_t const&
    ) noexcept;


     __declspec(allocator)
void* __cdecl operator new[](
    size_t             _Size,
    ::std::align_val_t _Al
    );

       __declspec(allocator)
void* __cdecl operator new[](
    size_t                  _Size,
    ::std::align_val_t      _Al,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*              _Block,
    ::std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete(
    void*                   _Block,
    ::std::align_val_t      _Al,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete[](
    void*              _Block,
    ::std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete[](
    void*                   _Block,
    ::std::align_val_t      _Al,
    ::std::nothrow_t const&
    ) noexcept;

void __cdecl operator delete(
    void*              _Block,
    size_t             _Size,
    ::std::align_val_t _Al
    ) noexcept;

void __cdecl operator delete[](
    void*              _Block,
    size_t             _Size,
    ::std::align_val_t _Al
    ) noexcept;

          
    inline void* __cdecl operator new(size_t _Size,   void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) noexcept
    {
        return;
    }

          
    inline void* __cdecl operator new[](size_t _Size,
          void* _Where) noexcept
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) noexcept
    {
    }



}  


extern "C++" {




          
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

          
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) noexcept;




}  



         extern "C" {



typedef void* _HFILE;  





     
typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);



typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);





     
 
  
  


 
     
typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);


struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;









     







     






     









 
 






}                             

                      


      
 
 
   





  

 
 
 













 
  


























 
  



namespace std {
enum _Uninitialized {      _Noinit
};

 class  _Lockit {  public:
    __thiscall _Lockit() noexcept;
    explicit __thiscall _Lockit(int) noexcept;      __thiscall ~_Lockit() noexcept;  
    static void __cdecl _Lockit_ctor(int) noexcept;
    static void __cdecl _Lockit_dtor(int) noexcept;

private:
    static void __cdecl _Lockit_ctor(_Lockit*) noexcept;
    static void __cdecl _Lockit_ctor(_Lockit*, int) noexcept;
    static void __cdecl _Lockit_dtor(_Lockit*) noexcept;

public:
     _Lockit(const _Lockit&) = delete;
    _Lockit&  operator=(const _Lockit&) = delete;

private:
    int _Locktype;
};






class  _Init_locks {  public:
    __thiscall _Init_locks() noexcept;
    __thiscall ~_Init_locks() noexcept;

private:
    static void __cdecl _Init_locks_ctor(_Init_locks*) noexcept;
    static void __cdecl _Init_locks_dtor(_Init_locks*) noexcept;
};

 

}




 
  
 
  

       
                 
              
              
       


         extern "C" {



     int* __cdecl _errno(void);

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);



 
 
 
 


}                             

       
       


         extern "C" {



  
 void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

  
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


 void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

  
 char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

  
 char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

    
 char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

  

 wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

  
 wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

    

 wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



}                             





         extern "C" {




     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        {                                                                                  int _Expr_val=!!(_Destination != 0);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 22;                                                             _invalid_parameter_noinfo();                                                   return 22;                                                          }                                                                          };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            {                                                                                  int _Expr_val=!!(_Source != 0);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 22;                                                             _invalid_parameter_noinfo();                                                   return 22;                                                          }                                                                          };
            {                                                                                  int _Expr_val=!!(_DestinationSize >= _SourceSize);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 34;                                                             _invalid_parameter_noinfo();                                                   return 34;                                                          }                                                                          };

                         return 22;
        }
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        {                                                                                  int _Expr_val=!!(_Destination != 0);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 22;                                                             _invalid_parameter_noinfo();                                                   return 22;                                                          }                                                                          };
        {                                                                                  int _Expr_val=!!(_Source != 0);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 22;                                                             _invalid_parameter_noinfo();                                                   return 22;                                                          }                                                                          };
        {                                                                                  int _Expr_val=!!(_DestinationSize >= _SourceSize);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno()) = 34;                                                             _invalid_parameter_noinfo();                                                   return 34;                                                          }                                                                          };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }




}                             
       



         extern "C" {



 
 int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
 int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );










    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _memccpy. See online help for details."))
     void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _memicmp. See online help for details."))
     int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );





    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }




}                             


        
              



         extern "C" {



     
    
     errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
     errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );

    
     errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );

     
     wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );




     
 
 __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );




extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw()                 {                                                                                                                    return wcscat_s(_Destination, _Size, _Source);                                                                       }                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using wcscat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl wcscat(  wchar_t *_Destination,                                                                             wchar_t const* _Source);

 
 int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw()                 {                                                                                                                    return wcscpy_s(_Destination, _Size, _Source);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using wcscpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl wcscpy(  wchar_t *_Destination,                                          wchar_t const* _Source);

 
 size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcslen(
      wchar_t const* _String
    );

 


 size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );


     
    
    
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }


extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl wcsncat_s(              wchar_t (&_Destination)[_Size],   wchar_t const* _Source,                      size_t _Count) throw()                 {                                                                                                                                    return wcsncat_s(_Destination, _Size, _Source, _Count);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using wcsncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl wcsncat(  wchar_t *_Destination,      wchar_t const* _Source,                         size_t _Count);

 
 int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,                      size_t _Count) throw()                 {                                                                                                                                    return wcsncpy_s(_Destination, _Size, _Source, _Count);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using wcsncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,               wchar_t const* _Source,                                  size_t _Count);

 
 wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
 size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



      __declspec(deprecated("This function or variable may be unsafe. Consider using wcstok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }


        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcstok, define _CRT_NON_CONFORMING_WCSTOK."))
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }




 
  __declspec(deprecated("This function or variable may be unsafe. Consider using _wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


 errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw()                 {                                                                                                                    return _wcserror_s(_Buffer, _Size, _Error);                                                                       }                                                                                                            }

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using __wcserror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

  errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw()                 {                                                                                                                    return __wcserror_s(_Buffer, _Size, _ErrorMessage);                                                                       }                                                                                                            }

   int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

   int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

   int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

   int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

  errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],          wchar_t _Value,           size_t _MaxCount) throw()                 {                                                                                                                                    return _wcsnset_s(_Destination, _Size, _Value, _MaxCount);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcsnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcsnset(  wchar_t *_String,                            wchar_t _Value,                            size_t _MaxCount);

 wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

  errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],          wchar_t _Value) throw()                 {                                                                                                                    return _wcsset_s(_String, _Size, _Value);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcsset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcsset(  wchar_t *_String,                       wchar_t _Value);

  errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw()                  {                                                                                                     return _wcslwr_s(_String, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcslwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcslwr(  wchar_t *_String);


 errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],      _locale_t _Locale) throw()                 {                                                                                                                    return _wcslwr_s_l(_String, _Size, _Locale);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcslwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,                   _locale_t _Locale);


 errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw()                  {                                                                                                     return _wcsupr_s(_String, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcsupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcsupr(  wchar_t *_String);


 errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],      _locale_t _Locale) throw()                 {                                                                                                                    return _wcsupr_s_l(_String, _Size, _Locale);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcsupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,                   _locale_t _Locale);

 

 size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

 size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
 int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
 int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
 int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
 int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
 int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );



     extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}



     
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsdup. See online help for details."))
     wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );


     
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsicmp. See online help for details."))
     int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsnicmp. See online help for details."))
     int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsnset. See online help for details."))
     
     wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsrev. See online help for details."))
     
     wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsset. See online help for details."))
     
     wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcslwr. See online help for details."))
     
     wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsupr. See online help for details."))
     
     wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _wcsicoll. See online help for details."))
     int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );




}                             


       



         extern "C" {





    
     errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
     errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
     errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
     errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
     errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
     char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );


 void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw()                 {                                                                                                                    return strcat_s(_Destination, _Size, _Source);                                                                       }                                                                                                            }


    __declspec(deprecated("This function or variable may be unsafe. Consider using strcat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl strcat(  char *_Destination,                                                                             char const* _Source);


 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
 int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],     char const* _Source) throw()                 {                                                                                                                    return strcpy_s(_Destination, _Size, _Source);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl strcpy(  char *_Destination,                                          char const* _Source);

 
 size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );


 
 __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );


 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using _strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


 errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw()                 {                                                                                                                    return _strerror_s(_Buffer, _Size, _ErrorMessage);                                                                       }                                                                                                            }

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw()                 {                                                                                                                    return strerror_s(_Buffer, _Size, _ErrorMessage);                                                                       }                                                                                                            }

 
 int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
 int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
 int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


 errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw()                  {                                                                                                     return _strlwr_s(_String, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strlwr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strlwr(  char *_String);


 errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],      _locale_t _Locale) throw()                 {                                                                                                                    return _strlwr_s_l(_String, _Size, _Locale);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strlwr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strlwr_l(  char *_String,                   _locale_t _Locale);

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl strncat_s(              char (&_Destination)[_Size],   char const* _Source,                      size_t _Count) throw()                 {                                                                                                                                    return strncat_s(_Destination, _Size, _Source, _Count);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using strncat_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl strncat(  char *_Destination,      char const* _Source,                         size_t _Count);

 
 int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
 int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
 int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,                      size_t _Count) throw()                 {                                                                                                                                    return strncpy_s(_Destination, _Size, _Source, _Count);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using strncpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl strncpy(    char *_Destination,               char const* _Source,                                  size_t _Count);

 


 size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );


     
    
    
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }



 errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],          int _Value,          size_t _Count) throw()                 {                                                                                                                                    return _strnset_s(_Destination, _Size, _Value, _Count);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strnset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strnset(  char *_Destination,                         int _Value,                         size_t _Count);

 
 char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

 char* __cdecl _strrev(
      char* _Str
    );


 errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _strset_s(  char (&_Destination)[_Size],          int _Value) throw()                 {                                                                                                                    return _strset_s(_Destination, _Size, _Value);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strset_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strset(  char *_Destination,         int _Value);

 
 size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using strtok_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


 errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw()                  {                                                                                                     return _strupr_s(_String, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strupr_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strupr(  char *_String);


 errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],      _locale_t _Locale) throw()                 {                                                                                                                    return _strupr_s_l(_String, _Size, _Locale);                                                                       }                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _strupr_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _strupr_l(  char *_String,                   _locale_t _Locale);

 

 size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

 size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );



extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}




      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strdup. See online help for details."))
     char* __cdecl strdup(
          char const* _String
        );

           __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strcmpi. See online help for details."))
     int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _stricmp. See online help for details."))
     int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strlwr. See online help for details."))
     char* __cdecl strlwr(
          char* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strnicmp. See online help for details."))
     int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strnset. See online help for details."))
     char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strrev. See online help for details."))
     char* __cdecl strrev(
          char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strset. See online help for details."))
    char* __cdecl strset(
          char* _String,
               int   _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _strupr. See online help for details."))
     char* __cdecl strupr(
          char* _String
        );




}                             




namespace std {

using :: size_t;
using :: memchr;
using :: memcmp;
using :: memcpy;
using :: memmove;
using :: memset;
using :: strcat;
using :: strchr;
using :: strcmp;
using :: strcoll;
using :: strcpy;
using :: strcspn;
using :: strerror;
using :: strlen;
using :: strncat;
using :: strncmp;
using :: strncpy;
using :: strpbrk;
using :: strrchr;
using :: strspn;
using :: strstr;
using :: strtok;
using :: strxfrm;

}



 

       


extern "C" {

 


 






 






 



unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _bittest(long const *, long);


long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);



__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);
__int64 _interlockedand64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedAnd8(char volatile * _Value, char _Mask);






long  _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);



__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);



char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);






unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);



long  _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);
__int64 _InterlockedDecrement64(__int64 volatile * _Addend);
__int64 _interlockeddecrement64(__int64 volatile * _Addend);
long  _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);
__int64 _interlockedexchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long  _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);
__int64 _interlockedexchangeadd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);









long  _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);
__int64 _InterlockedIncrement64(__int64 volatile * _Addend);
__int64 _interlockedincrement64(__int64 volatile * _Addend);

long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);



__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);
__int64 _interlockedor64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedOr8(char volatile * _Value, char _Mask);






long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);



__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);
__int64 _interlockedxor64(__int64 volatile * _Value, __int64 _Mask);



char _InterlockedXor8(char volatile * _Value, char _Mask);






void _ReadWriteBarrier(void);
__int16 __iso_volatile_load16(const volatile __int16 *);
__int32 __iso_volatile_load32(const volatile __int32 *);
__int64 __iso_volatile_load64(const volatile __int64 *);
__int8 __iso_volatile_load8(const volatile __int8 *);
void __iso_volatile_store16(volatile __int16 *, __int16);
void __iso_volatile_store32(volatile __int32 *, __int32);
void __iso_volatile_store64(volatile __int64 *, __int64);
void __iso_volatile_store8(volatile __int8 *, __int8);


unsigned char _interlockedbittestandset(long volatile *, long);



void _mm_pause(void);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned int _tzcnt_u32(unsigned int);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
double __ceil(double);
float __ceilf(float);
double __floor(double);
float __floorf(float);
double __round(double);
float __roundf(float);
double __trunc(double);
float __truncf(float);
double __copysign(double, double);
float __copysignf(float, float);
unsigned __signbitvalue(double);
unsigned __signbitvaluef(float);
int _cvt_ftoi_sat (float a);
unsigned _cvt_ftoui_sat (float a);
long long _cvt_ftoll_sat (float a);
unsigned long long _cvt_ftoull_sat (float a);
int _cvt_ftoi_sent (float a);
unsigned _cvt_ftoui_sent (float a);
long long _cvt_ftoll_sent (float a);
unsigned long long _cvt_ftoull_sent (float a);
int _cvt_dtoi_sat (double a);
unsigned _cvt_dtoui_sat (double a);
long long _cvt_dtoll_sat (double a);
unsigned long long _cvt_dtoull_sat (double a);
int _cvt_dtoi_sent (double a);
unsigned _cvt_dtoui_sent (double a);
long long _cvt_dtoll_sent (double a);
unsigned long long _cvt_dtoull_sent (double a);
constexpr void * __cdecl __builtin_assume_aligned(const void *, size_t, ...) noexcept;

 

}
 
  
 
  

 
  
 
  

       
       


typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;

 





     










namespace std {
using :: int8_t;
using :: int16_t;
using :: int32_t;
using :: int64_t;
using :: uint8_t;
using :: uint16_t;
using :: uint32_t;
using :: uint64_t;

using :: int_least8_t;
using :: int_least16_t;
using :: int_least32_t;
using :: int_least64_t;
using :: uint_least8_t;
using :: uint_least16_t;
using :: uint_least32_t;
using :: uint_least64_t;

using :: int_fast8_t;
using :: int_fast16_t;
using :: int_fast32_t;
using :: int_fast64_t;
using :: uint_fast8_t;
using :: uint_fast16_t;
using :: uint_fast32_t;
using :: uint_fast64_t;

using :: intmax_t;
using :: intptr_t;
using :: uintmax_t;
using :: uintptr_t;

}



 




namespace std {

 inline unsigned long _Floor_of_log_2(size_t _Value) noexcept {      _Value |= size_t{1};      unsigned long _Result;

    _BitScanReverse64(&_Result, _Value);

    return _Result;
}

 inline unsigned long _Ceiling_of_log_2(const size_t _Value) noexcept {                                                                                         return 1 + _Floor_of_log_2(_Value - 1);
}

 inline uint32_t _Bit_scan_reverse(const uint32_t _Value) noexcept {
    unsigned long _Index;  
    if (_BitScanReverse(&_Index, _Value)) {
        return _Index + 1;
    }

    return 0;
}

 inline uint32_t _Bit_scan_reverse(const uint64_t _Value) noexcept {
    unsigned long _Index;  
    if (_BitScanReverse64(&_Index, _Value)) {
        return _Index + 1;
    }

    return 0;
}

}


 
  
 
  

 
  
 
  
 
  
 
  
 
  
 
  
 
  
 
  

       
       


         extern "C" {



    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;




     int* __cdecl _errno(void);

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);





 extern unsigned long  __cdecl __threadid(void);
 extern uintptr_t __cdecl __threadhandle(void);



}                             

 
  
 
  



namespace std {
 template <class _Ty, _Ty _Val>
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type       = integral_constant;

    constexpr operator value_type() const noexcept {
        return value;
    }

     constexpr value_type operator()() const noexcept {
        return value;
    }
};

 template <bool _Val>
using bool_constant = integral_constant<bool, _Val>;

using true_type  = bool_constant<true>;
using false_type = bool_constant<false>;

 template <bool _Test, class _Ty = void>
struct enable_if {};  
template <class _Ty>
struct enable_if<true, _Ty> {      using type = _Ty;
};

template <bool _Test, class _Ty = void>
using enable_if_t = typename enable_if<_Test, _Ty>::type;

 template <bool _Test, class _Ty1, class _Ty2>
struct conditional {      using type = _Ty1;
};

template <class _Ty1, class _Ty2>
struct conditional<false, _Ty1, _Ty2> {
    using type = _Ty2;
};

template <bool _Test, class _Ty1, class _Ty2>
using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

 template <class, class>
inline constexpr bool is_same_v = false;  template <class _Ty>
inline constexpr bool is_same_v<_Ty, _Ty> = true;

template <class _Ty1, class _Ty2>
struct is_same : bool_constant<is_same_v<_Ty1, _Ty2>> {};

 template <class _Ty>
struct remove_const {      using type = _Ty;
};

template <class _Ty>
struct remove_const<const _Ty> {
    using type = _Ty;
};

template <class _Ty>
using remove_const_t = typename remove_const<_Ty>::type;

 template <class _Ty>
struct remove_volatile {      using type = _Ty;
};

template <class _Ty>
struct remove_volatile<volatile _Ty> {
    using type = _Ty;
};

template <class _Ty>
using remove_volatile_t = typename remove_volatile<_Ty>::type;

 template <class _Ty>
struct remove_cv {      using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = _Fn<_Ty>;  };

template <class _Ty>
struct remove_cv<const _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = volatile _Fn<_Ty>;
};

template <class _Ty>
struct remove_cv<const volatile _Ty> {
    using type = _Ty;

    template <template <class> class _Fn>
    using _Apply = const volatile _Fn<_Ty>;
};

template <class _Ty>
using remove_cv_t = typename remove_cv<_Ty>::type;

 template <bool _First_value, class _First, class... _Rest>
struct _Disjunction {      using type = _First;
};

template <class _False, class _Next, class... _Rest>
struct _Disjunction<false, _False, _Next, _Rest...> {      using type = typename _Disjunction<_Next::value, _Next, _Rest...>::type;
};

template <class... _Traits>
struct disjunction : false_type {};  
template <class _First, class... _Rest>
struct disjunction<_First, _Rest...> : _Disjunction<_First::value, _First, _Rest...>::type {
     };

template <class... _Traits>
inline constexpr bool disjunction_v = disjunction<_Traits...>::value;

 template <class _Ty, class... _Types>
inline constexpr bool _Is_any_of_v =      disjunction_v<is_same<_Ty, _Types>...>;

  constexpr bool is_constant_evaluated() noexcept {
    return __builtin_is_constant_evaluated();
}

 template <class _Ty>
inline constexpr bool is_integral_v = _Is_any_of_v<remove_cv_t<_Ty>, bool, char, signed char, unsigned char,
    wchar_t,
    char8_t,
    char16_t, char32_t, short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long>;

template <class _Ty>
struct is_integral : bool_constant<is_integral_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_floating_point_v = _Is_any_of_v<remove_cv_t<_Ty>, float, double, long double>;

template <class _Ty>
struct is_floating_point : bool_constant<is_floating_point_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_arithmetic_v =      is_integral_v<_Ty> || is_floating_point_v<_Ty>;

template <class _Ty>
struct is_arithmetic : bool_constant<is_arithmetic_v<_Ty>> {};

 template <class _Ty>
struct remove_reference {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty;
};

template <class _Ty>
struct remove_reference<_Ty&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&;
};

template <class _Ty>
struct remove_reference<_Ty&&> {
    using type                 = _Ty;
    using _Const_thru_ref_type = const _Ty&&;
};

template <class _Ty>
using remove_reference_t = typename remove_reference<_Ty>::type;

 template <class _Ty>
using _Const_thru_ref = typename remove_reference<_Ty>::_Const_thru_ref_type;

template <class _Ty>
using _Remove_cvref_t = remove_cv_t<remove_reference_t<_Ty>>;

template <class _Ty>
using remove_cvref_t = _Remove_cvref_t<_Ty>;

template <class _Ty>
struct remove_cvref {
    using type = remove_cvref_t<_Ty>;
};

}




namespace std {
using :: ptrdiff_t;
using :: size_t;
using max_align_t = double;  
                             enum class byte : unsigned char {};

template <class _IntType, enable_if_t<is_integral_v<_IntType>, int> = 0>
 constexpr byte operator<<(
    const byte _Arg, const _IntType _Shift) noexcept {      return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) << _Shift));
}

template <class _IntType, enable_if_t<is_integral_v<_IntType>, int> = 0>
 constexpr byte operator>>(
    const byte _Arg, const _IntType _Shift) noexcept {      return static_cast<byte>(static_cast<unsigned char>(static_cast<unsigned int>(_Arg) >> _Shift));
}

 constexpr byte operator|(
    const byte _Left, const byte _Right) noexcept {      return static_cast<byte>(
        static_cast<unsigned char>(static_cast<unsigned int>(_Left) | static_cast<unsigned int>(_Right)));
}

 constexpr byte operator&(
    const byte _Left, const byte _Right) noexcept {      return static_cast<byte>(
        static_cast<unsigned char>(static_cast<unsigned int>(_Left) & static_cast<unsigned int>(_Right)));
}

 constexpr byte operator^(
    const byte _Left, const byte _Right) noexcept {      return static_cast<byte>(
        static_cast<unsigned char>(static_cast<unsigned int>(_Left) ^ static_cast<unsigned int>(_Right)));
}

 constexpr byte operator~(const byte _Arg) noexcept {      return static_cast<byte>(static_cast<unsigned char>(~static_cast<unsigned int>(_Arg)));
}

template <class _IntType, enable_if_t<is_integral_v<_IntType>, int> = 0>
constexpr byte& operator<<=(byte& _Arg, const _IntType _Shift) noexcept {      return _Arg = _Arg << _Shift;
}

template <class _IntType, enable_if_t<is_integral_v<_IntType>, int> = 0>
constexpr byte& operator>>=(byte& _Arg, const _IntType _Shift) noexcept {      return _Arg = _Arg >> _Shift;
}

constexpr byte& operator|=(byte& _Left, const byte _Right) noexcept {      return _Left = _Left | _Right;
}

constexpr byte& operator&=(byte& _Left, const byte _Right) noexcept {      return _Left = _Left & _Right;
}

constexpr byte& operator^=(byte& _Left, const byte _Right) noexcept {      return _Left = _Left ^ _Right;
}

template <class _IntType, enable_if_t<is_integral_v<_IntType>, int> = 0>
 constexpr _IntType to_integer(const byte _Arg) noexcept {      return static_cast<_IntType>(_Arg);
}

}

using ::std:: max_align_t;  


 
  
 
  

                 
       


         extern "C" {

              struct _exception
    {
        int    type;            char*  name;            double arg1;            double arg2;            double retval;      };

          
        struct _complex
        {
            double x, y;          };




        typedef float  float_t;
    typedef double double_t;



 
           extern double const _HUGE;







 






 
 
 


void __cdecl _fperrraise(  int _Except);

   short __cdecl _dclass(  double _X);
   short __cdecl _ldclass(  long double _X);
   short __cdecl _fdclass(  float _X);

   int __cdecl _dsign(  double _X);
   int __cdecl _ldsign(  long double _X);
   int __cdecl _fdsign(  float _X);

   int __cdecl _dpcomp(  double _X,   double _Y);
   int __cdecl _ldpcomp(  long double _X,   long double _Y);
   int __cdecl _fdpcomp(  float _X,   float _Y);

   short __cdecl _dtest(  double* _Px);
   short __cdecl _ldtest(  long double* _Px);
   short __cdecl _fdtest(  float* _Px);

 short __cdecl _d_int(  double* _Px,   short _Xexp);
 short __cdecl _ld_int(  long double* _Px,   short _Xexp);
 short __cdecl _fd_int(  float* _Px,   short _Xexp);

 short __cdecl _dscale(  double* _Px,   long _Lexp);
 short __cdecl _ldscale(  long double* _Px,   long _Lexp);
 short __cdecl _fdscale(  float* _Px,   long _Lexp);

 short __cdecl _dunscale(  short* _Pex,   double* _Px);
 short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
 short __cdecl _fdunscale(  short* _Pex,   float* _Px);

   short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
   short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
   short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

   short __cdecl _dnorm(  unsigned short* _Ps);
   short __cdecl _fdnorm(  unsigned short* _Ps);

   double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
   long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
   float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

   double __cdecl _dlog(  double _X,   int _Baseflag);
   long double __cdecl _ldlog(  long double _X,   int _Baseflag);
   float __cdecl _fdlog(  float _X,   int _Baseflag);

   double __cdecl _dsin(  double _X,   unsigned int _Qoff);
   long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
   float __cdecl _fdsin(  float _X,   unsigned int _Qoff);

 typedef union
{        unsigned short _Sh[4];
    double _Val;
} _double_val;

 typedef union
{        unsigned short _Sh[2];
    float _Val;
} _float_val;

 typedef union
{        unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{        unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;


extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {            typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {            typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {            typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {            typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {            typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {            typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {            typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {            typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {            typedef double _Type;        };

    template <> struct _Real_type<float>
    {            typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {            typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {            typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}   



      int       __cdecl abs(  int _X);
      long      __cdecl labs(  long _X);
      long long __cdecl llabs(  long long _X);

      double __cdecl acos(  double _X);
      double __cdecl asin(  double _X);
      double __cdecl atan(  double _X);
      double __cdecl atan2(  double _Y,   double _X);

      double __cdecl cos(  double _X);
      double __cdecl cosh(  double _X);
      double __cdecl exp(  double _X);
       double __cdecl fabs(  double _X);
      double __cdecl fmod(  double _X,   double _Y);
      double __cdecl log(  double _X);
      double __cdecl log10(  double _X);
      double __cdecl pow(  double _X,   double _Y);
      double __cdecl sin(  double _X);
      double __cdecl sinh(  double _X);
       double __cdecl sqrt(  double _X);
      double __cdecl tan(  double _X);
      double __cdecl tanh(  double _X);

       double    __cdecl acosh(  double _X);
       double    __cdecl asinh(  double _X);
       double    __cdecl atanh(  double _X);
        double    __cdecl atof(  char const* _String);
        double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
       double    __cdecl _cabs(  struct _complex _Complex_value);
       double    __cdecl cbrt(  double _X);
       double    __cdecl ceil(  double _X);
       double    __cdecl _chgsign(  double _X);
       double    __cdecl copysign(  double _Number,   double _Sign);
       double    __cdecl _copysign(  double _Number,   double _Sign);
       double    __cdecl erf(  double _X);
       double    __cdecl erfc(  double _X);
       double    __cdecl exp2(  double _X);
       double    __cdecl expm1(  double _X);
       double    __cdecl fdim(  double _X,   double _Y);
       double    __cdecl floor(  double _X);
       double    __cdecl fma(  double _X,   double _Y,   double _Z);
       double    __cdecl fmax(  double _X,   double _Y);
       double    __cdecl fmin(  double _X,   double _Y);
       double    __cdecl frexp(  double _X,   int* _Y);
       double    __cdecl hypot(  double _X,   double _Y);
       double    __cdecl _hypot(  double _X,   double _Y);
       int       __cdecl ilogb(  double _X);
       double    __cdecl ldexp(  double _X,   int _Y);
       double    __cdecl lgamma(  double _X);
       long long __cdecl llrint(  double _X);
       long long __cdecl llround(  double _X);
       double    __cdecl log1p(  double _X);
       double    __cdecl log2(  double _X);
       double    __cdecl logb(  double _X);
       long      __cdecl lrint(  double _X);
       long      __cdecl lround(  double _X);

    int __cdecl _matherr(  struct _exception* _Except);

       double __cdecl modf(  double _X,   double* _Y);
       double __cdecl nan(  char const* _X);
       double __cdecl nearbyint(  double _X);
       double __cdecl nextafter(  double _X,   double _Y);
       double __cdecl nexttoward(  double _X,   long double _Y);
       double __cdecl remainder(  double _X,   double _Y);
       double __cdecl remquo(  double _X,   double _Y,   int* _Z);
       double __cdecl rint(  double _X);
       double __cdecl round(  double _X);
       double __cdecl scalbln(  double _X,   long _Y);
       double __cdecl scalbn(  double _X,   int _Y);
       double __cdecl tgamma(  double _X);
       double __cdecl trunc(  double _X);
       double __cdecl _j0(  double _X );
       double __cdecl _j1(  double _X );
       double __cdecl _jn(int _X,   double _Y);
       double __cdecl _y0(  double _X);
       double __cdecl _y1(  double _X);
       double __cdecl _yn(  int _X,   double _Y);

       float     __cdecl acoshf(  float _X);
       float     __cdecl asinhf(  float _X);
       float     __cdecl atanhf(  float _X);
       float     __cdecl cbrtf(  float _X);
       float     __cdecl _chgsignf(  float _X);
       float     __cdecl copysignf(  float _Number,   float _Sign);
       float     __cdecl _copysignf(  float _Number,   float _Sign);
       float     __cdecl erff(  float _X);
       float     __cdecl erfcf(  float _X);
       float     __cdecl expm1f(  float _X);
       float     __cdecl exp2f(  float _X);
       float     __cdecl fdimf(  float _X,   float _Y);
       float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
       float     __cdecl fmaxf(  float _X,   float _Y);
       float     __cdecl fminf(  float _X,   float _Y);
       float     __cdecl _hypotf(  float _X,   float _Y);
       int       __cdecl ilogbf(  float _X);
       float     __cdecl lgammaf(  float _X);
       long long __cdecl llrintf(  float _X);
       long long __cdecl llroundf(  float _X);
       float     __cdecl log1pf(  float _X);
       float     __cdecl log2f(  float _X);
       float     __cdecl logbf(  float _X);
       long      __cdecl lrintf(  float _X);
       long      __cdecl lroundf(  float _X);
       float     __cdecl nanf(  char const* _X);
       float     __cdecl nearbyintf(  float _X);
       float     __cdecl nextafterf(  float _X,   float _Y);
       float     __cdecl nexttowardf(  float _X,   long double _Y);
       float     __cdecl remainderf(  float _X,   float _Y);
       float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
       float     __cdecl rintf(  float _X);
       float     __cdecl roundf(  float _X);
       float     __cdecl scalblnf(  float _X,   long _Y);
       float     __cdecl scalbnf(  float _X,   int _Y);
       float     __cdecl tgammaf(  float _X);
       float     __cdecl truncf(  float _X);



           float __cdecl _logbf(  float _X);
           float __cdecl _nextafterf(  float _X,   float _Y);
           int   __cdecl _finitef(  float _X);
           int   __cdecl _isnanf(  float _X);
           int   __cdecl _fpclassf(  float _X);

           int   __cdecl _set_FMA3_enable(  int _Flag);
           int   __cdecl _get_FMA3_enable(void);





           float __cdecl acosf(  float _X);
           float __cdecl asinf(  float _X);
           float __cdecl atan2f(  float _Y,   float _X);
           float __cdecl atanf(  float _X);
           float __cdecl ceilf(  float _X);
           float __cdecl cosf(  float _X);
           float __cdecl coshf(  float _X);
           float __cdecl expf(  float _X);



          __inline float __cdecl fabsf(  float _X)
        {
            return (float)fabs(_X);
        }



           float __cdecl floorf(  float _X);
           float __cdecl fmodf(  float _X,   float _Y);


      __inline float __cdecl frexpf(  float _X,   int *_Y)
    {
        return (float)frexp(_X, _Y);
    }

      __inline float __cdecl hypotf(  float _X,   float _Y)
    {
        return _hypotf(_X, _Y);
    }

      __inline float __cdecl ldexpf(  float _X,   int _Y)
    {
        return (float)ldexp(_X, _Y);
    }


           float  __cdecl log10f(  float _X);
           float  __cdecl logf(  float _X);
           float  __cdecl modff(  float _X,   float *_Y);
           float  __cdecl powf(  float _X,   float _Y);
           float  __cdecl sinf(  float _X);
           float  __cdecl sinhf(  float _X);
           float  __cdecl sqrtf(  float _X);
           float  __cdecl tanf(  float _X);
           float  __cdecl tanhf(  float _X);


       long double __cdecl acoshl(  long double _X);

      __inline long double __cdecl acosl(  long double _X)
    {
        return acos((double)_X);
    }

       long double __cdecl asinhl(  long double _X);

      __inline long double __cdecl asinl(  long double _X)
    {
        return asin((double)_X);
    }

      __inline long double __cdecl atan2l(  long double _Y,   long double _X)
    {
        return atan2((double)_Y, (double)_X);
    }

       long double __cdecl atanhl(  long double _X);

      __inline long double __cdecl atanl(  long double _X)
    {
        return atan((double)_X);
    }

       long double __cdecl cbrtl(  long double _X);

      __inline long double __cdecl ceill(  long double _X)
    {
        return ceil((double)_X);
    }

      __inline long double __cdecl _chgsignl(  long double _X)
    {
        return _chgsign((double)_X);
    }

       long double __cdecl copysignl(  long double _Number,   long double _Sign);

      __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
    {
        return _copysign((double)_Number, (double)_Sign);
    }

      __inline long double __cdecl coshl(  long double _X)
    {
        return cosh((double)_X);
    }

      __inline long double __cdecl cosl(  long double _X)
    {
        return cos((double)_X);
    }

       long double __cdecl erfl(  long double _X);
       long double __cdecl erfcl(  long double _X);

      __inline long double __cdecl expl(  long double _X)
    {
        return exp((double)_X);
    }

       long double __cdecl exp2l(  long double _X);
       long double __cdecl expm1l(  long double _X);

      __inline long double __cdecl fabsl(  long double _X)
    {
        return fabs((double)_X);
    }

       long double __cdecl fdiml(  long double _X,   long double _Y);

      __inline long double __cdecl floorl(  long double _X)
    {
        return floor((double)_X);
    }

       long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
       long double __cdecl fmaxl(  long double _X,   long double _Y);
       long double __cdecl fminl(  long double _X,   long double _Y);

      __inline long double __cdecl fmodl(  long double _X,   long double _Y)
    {
        return fmod((double)_X, (double)_Y);
    }

      __inline long double __cdecl frexpl(  long double _X,   int *_Y)
    {
        return frexp((double)_X, _Y);
    }

       int __cdecl ilogbl(  long double _X);

      __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl hypotl(  long double _X,   long double _Y)
    {
        return _hypot((double)_X, (double)_Y);
    }

      __inline long double __cdecl ldexpl(  long double _X,   int _Y)
    {
        return ldexp((double)_X, _Y);
    }

       long double __cdecl lgammal(  long double _X);
       long long __cdecl llrintl(  long double _X);
       long long __cdecl llroundl(  long double _X);

      __inline long double __cdecl logl(  long double _X)
    {
        return log((double)_X);
    }

      __inline long double __cdecl log10l(  long double _X)
    {
        return log10((double)_X);
    }

       long double __cdecl log1pl(  long double _X);
       long double __cdecl log2l(  long double _X);
       long double __cdecl logbl(  long double _X);
       long __cdecl lrintl(  long double _X);
       long __cdecl lroundl(  long double _X);

      __inline long double __cdecl modfl(  long double _X,   long double* _Y)
    {
        double _F, _I;
        _F = modf((double)_X, &_I);
        *_Y = _I;
        return _F;
    }

       long double __cdecl nanl(  char const* _X);
       long double __cdecl nearbyintl(  long double _X);
       long double __cdecl nextafterl(  long double _X,   long double _Y);
       long double __cdecl nexttowardl(  long double _X,   long double _Y);

      __inline long double __cdecl powl(  long double _X,   long double _Y)
    {
        return pow((double)_X, (double)_Y);
    }

       long double __cdecl remainderl(  long double _X,   long double _Y);
       long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
       long double __cdecl rintl(  long double _X);
       long double __cdecl roundl(  long double _X);
       long double __cdecl scalblnl(  long double _X,   long _Y);
       long double __cdecl scalbnl(  long double _X,   int _Y);

      __inline long double __cdecl sinhl(  long double _X)
    {
        return sinh((double)_X);
    }

      __inline long double __cdecl sinl(  long double _X)
    {
        return sin((double)_X);
    }

      __inline long double __cdecl sqrtl(  long double _X)
    {
        return sqrt((double)_X);
    }

      __inline long double __cdecl tanhl(  long double _X)
    {
        return tanh((double)_X);
    }

      __inline long double __cdecl tanl(  long double _X)
    {
        return tan((double)_X);
    }

       long double __cdecl tgammal(  long double _X);
       long double __cdecl truncl(  long double _X);






            extern double HUGE;

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _j0. See online help for details."))    double __cdecl j0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _j1. See online help for details."))    double __cdecl j1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _jn. See online help for details."))    double __cdecl jn(  int _X,   double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _y0. See online help for details."))    double __cdecl y0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _y1. See online help for details."))    double __cdecl y1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _yn. See online help for details."))    double __cdecl yn(  int _X,   double _Y);


}                             


       
               
       


         extern "C" {




     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
  __declspec(allocator) __declspec(restrict) 
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
 int __cdecl _callnewh(
      size_t _Size
    );

     
 __declspec(allocator) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );


void __cdecl _free_base(
        void* _Block
    );

 
void __cdecl free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
 __declspec(allocator)  __declspec(restrict) 
void* __cdecl malloc(
       size_t _Size
    );

 

size_t __cdecl _msize_base(
      void* _Block
    );

 
 
size_t __cdecl _msize(
      void* _Block
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict) 
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                                size_t _Count,
                                size_t _Size
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );


void __cdecl _aligned_free(
        void* _Block
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 

size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
 __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );




}                             

          
              


         extern "C" {


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);



     
     void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                    void*       _Context
        );

     void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                         void*   _Context
        );




 
 void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
                     _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
                             _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                       void*         _Context
    );

 
 void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
                          _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

 
 void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
                                   _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                             void*         _Context
    );

 
 void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
                                _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );



 



      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _lfind. See online help for details."))
     void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
                              _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _lsearch. See online help for details."))
     void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
                                   _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
        );




}                             

        
       


         extern "C" {



   






     
    
     errno_t __cdecl _itow_s(
                                  int      _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _itow_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _itow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _itow(                     int _Value,     wchar_t *_Buffer,                      int _Radix);

     
    
     errno_t __cdecl _ltow_s(
                                  long     _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _ltow_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _ltow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _ltow(                     long _Value,     wchar_t *_Buffer,                      int _Radix);

    
     errno_t __cdecl _ultow_s(
                                  unsigned long _Value,
          wchar_t*      _Buffer,
                                  size_t        _BufferCount,
                                  int           _Radix
        );

    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _ultow_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _ultow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _ultow(                     unsigned long _Value,     wchar_t *_Buffer,                      int _Radix);

     
     double __cdecl wcstod(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     double __cdecl _wcstod_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     long __cdecl wcstol(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long __cdecl _wcstol_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long long __cdecl wcstoll(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     long long __cdecl _wcstoll_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long __cdecl wcstoul(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long __cdecl _wcstoul_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned long long __cdecl wcstoull(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned long long __cdecl _wcstoull_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     long double __cdecl wcstold(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     long double __cdecl _wcstold_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     float __cdecl wcstof(
                            wchar_t const* _String,
            wchar_t**      _EndPtr
        );

     
     float __cdecl _wcstof_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                          _locale_t      _Locale
        );

     
     double __cdecl _wtof(
          wchar_t const* _String
        );

     
     double __cdecl _wtof_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     int __cdecl _wtoi(
          wchar_t const* _String
        );

     
     int __cdecl _wtoi_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long __cdecl _wtol(
          wchar_t const* _String
        );

     
     long __cdecl _wtol_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     long long __cdecl _wtoll(
          wchar_t const* _String
        );

     
     long long __cdecl _wtoll_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

    
     errno_t __cdecl _i64tow_s(
                                  __int64  _Value,
          wchar_t* _Buffer,
                                  size_t   _BufferCount,
                                  int      _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using _i64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     wchar_t* __cdecl _i64tow(
                            __int64  _Value,
            wchar_t* _Buffer,
                            int      _Radix
        );

    
     errno_t __cdecl _ui64tow_s(
                                  unsigned __int64 _Value,
          wchar_t*         _Buffer,
                                  size_t           _BufferCount,
                                  int              _Radix
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using _ui64tow_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     wchar_t* __cdecl _ui64tow(
                            unsigned __int64 _Value,
            wchar_t*         _Buffer,
                            int              _Radix
        );

     
     __int64 __cdecl _wtoi64(
          wchar_t const* _String
        );

     
     __int64 __cdecl _wtoi64_l(
            wchar_t const* _String,
          _locale_t      _Locale
        );

     
     __int64 __cdecl _wcstoi64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     __int64 __cdecl _wcstoi64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );

     
     unsigned __int64 __cdecl _wcstoui64(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix
        );

     
     unsigned __int64 __cdecl _wcstoui64_l(
                            wchar_t const* _String,
            wchar_t**      _EndPtr,
                              int            _Radix,
                          _locale_t      _Locale
        );


     
     
     __declspec(allocator) wchar_t* __cdecl _wfullpath(
          wchar_t*       _Buffer,
                                    wchar_t const* _Path,
                                      size_t         _BufferCount
        );


    
     errno_t __cdecl _wmakepath_s(
          wchar_t*       _Buffer,
                                  size_t         _BufferCount,
                            wchar_t const* _Drive,
                            wchar_t const* _Dir,
                            wchar_t const* _Filename,
                            wchar_t const* _Ext
        );

    extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                            errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw()                  {                                                                                                                                                                     return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext);                                                                                                }                                                                                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wmakepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wmakepath(    wchar_t *_Buffer,                wchar_t const* _Drive,                wchar_t const* _Dir,                wchar_t const* _Filename,                wchar_t const* _Ext);

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );

    __declspec(deprecated("This function or variable may be unsafe. Consider using _wsplitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     void __cdecl _wsplitpath(
                            wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

     errno_t __cdecl _wsplitpath_s(
                                      wchar_t const* _FullPath,
             wchar_t*       _Drive,
                                        size_t         _DriveCount,
               wchar_t*       _Dir,
                                        size_t         _DirCount,
          wchar_t*       _Filename,
                                        size_t         _FilenameCount,
               wchar_t*       _Ext,
                                        size_t         _ExtCount
        );

    extern "C++"                                                                                                      {                                                                                                                     template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize>                                  inline                                                                                                            errno_t __cdecl _wsplitpath_s(                                                                                        wchar_t const* _Path,                                                                                        wchar_t (&_Drive)[_DriveSize],                                                                            wchar_t (&_Dir)[_DirSize],                                                                                wchar_t (&_Name)[_NameSize],                                                                              wchar_t (&_Ext)[_ExtSize]                                                                               ) throw()                                                                                     {                                                                                                                     return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize);                 }                                                                                                             }


        
         errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                                size_t*        _BufferCount,
                                                                                   wchar_t const* _VarName
            );


          __declspec(deprecated("This function or variable may be unsafe. Consider using _wdupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
         wchar_t* __cdecl _wgetenv(
              wchar_t const* _VarName
            );

         
        
         errno_t __cdecl _wgetenv_s(
                                         size_t*        _RequiredCount,
              wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                                        wchar_t const* _VarName
            );

        extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                        errno_t __cdecl _wgetenv_s(   size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw()                 {                                                                                                                                    return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName);                                                                               }                                                                                                                            }

         
         int __cdecl _wputenv(
              wchar_t const* _EnvString
            );

        
         errno_t __cdecl _wputenv_s(
              wchar_t const* _Name,
              wchar_t const* _Value
            );

         errno_t __cdecl _wsearchenv_s(
                                    wchar_t const* _Filename,
                                    wchar_t const* _VarName,
              wchar_t*       _Buffer,
                                      size_t         _BufferCount
            );

        extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw()                 {                                                                                                                                    return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size);                                                                               }                                                                                                                            }

        __declspec(deprecated("This function or variable may be unsafe. Consider using _wsearchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wsearchenv(                   wchar_t const* _Filename,                    wchar_t const* _VarName,     wchar_t *_ResultPath);

         int __cdecl _wsystem(
              wchar_t const* _Command
            );




}                             

       
       

         extern "C" {










}                             




         extern "C" {






 


 void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );



      
     __declspec(noreturn) void __cdecl exit(  int _Code);
     __declspec(noreturn) void __cdecl _exit(  int _Code);
     __declspec(noreturn) void __cdecl _Exit(  int _Code);
     __declspec(noreturn) void __cdecl quick_exit(  int _Code);
     __declspec(noreturn) void __cdecl abort(void);

 
 unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);

     





    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);

int __cdecl at_quick_exit(void (__cdecl*)(void));



              typedef void (__cdecl* _purecall_handler)(void);

         typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );

          _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);

          _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

     _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

     _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);





 
  int __cdecl _set_error_mode(  int _Mode);



     int* __cdecl _errno(void);

     errno_t __cdecl _set_errno(  int _Value);
     errno_t __cdecl _get_errno(  int* _Value);

     unsigned long* __cdecl __doserrno(void);

     errno_t __cdecl _set_doserrno(  unsigned long _Value);
     errno_t __cdecl _get_doserrno(  unsigned long * _Value);

          __declspec(deprecated("This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char** __cdecl __sys_errlist(void);

     __declspec(deprecated("This function or variable may be unsafe. Consider using strerror instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);

     void __cdecl perror(  char const* _ErrMsg);



 __declspec(deprecated("This function or variable may be unsafe. Consider using _get_pgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char**    __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using _get_wpgmptr instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using _get_fmode instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  int*      __cdecl __p__fmode  (void);


 
 errno_t __cdecl _get_pgmptr (  char**    _Value);

 
 errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

 errno_t __cdecl _set_fmode  (               int       _Mode );

 errno_t __cdecl _get_fmode  (              int*      _PMode);



     typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

   div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
   ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

  
unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );




 
 void __cdecl srand(  unsigned int _Seed);

   int __cdecl rand(void);




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}




  

    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;



typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;

 
typedef struct
{
    long double x;
} _LONGDOUBLE;


typedef struct
{
    unsigned char ld12[12];
} _LDBL12;



                           double    __cdecl atof   (  char const* _String);
    int       __cdecl atoi   (  char const* _String);
                      long      __cdecl atol   (  char const* _String);
                      long long __cdecl atoll  (  char const* _String);
                      __int64   __cdecl _atoi64(  char const* _String);

   double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
   int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
   long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
   long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
   __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

   int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
   int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
   int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
 int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
 int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
 int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
 float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
 float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
 double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
 long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
 long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
 unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
 unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );



      

 errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _itoa_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _itoa(                     int _Value,     char *_Buffer,                      int _Radix);

 

 errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _ltoa_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _ltoa(                     long _Value,     char *_Buffer,                      int _Radix);

 

 errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw()                 {                                                                                                                                    return _ultoa_s(_Value, _Buffer, _Size, _Radix);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char* __cdecl _ultoa(                     unsigned long _Value,     char *_Buffer,                      int _Radix);

 

 errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using _i64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

 errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using _ui64toa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );



        
 

 errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                            errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],    double _Value,    int _DigitCount,   int* _PtDec,   int* _PtSign) throw()                  {                                                                                                                                                                     return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign);                                                                                                }                                                                                                                                                             }

  __declspec(deprecated("This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

 errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                                 errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],    double _Value,    int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw()                  {                                                                                                                                                                     return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign);                                                                                                }                                                                                                                                                             }

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
 errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw()                 {                                                                                                                                    return _gcvt_s(_Buffer, _Size, _Value, _DigitCount);                                                                               }                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using _gcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );



       

     
     int __cdecl ___mb_cur_max_func(void);

     
     int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);



 
 int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

 
 int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
 size_t __cdecl _mbstrlen_l(
        char const* _String,
      _locale_t   _Locale
    );

 
 
 size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
 size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
 int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
 int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


 errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                           errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,    wchar_t (&_Dest)[_Size],      char const* _Source,        size_t _MaxCount) throw()                 {                                                                                                                                                    return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount);                                                                                       }                                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using mbstowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl mbstowcs(  wchar_t *_Dest,                           char const* _Source,                             size_t _MaxCount);


 errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                            errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,    wchar_t (&_Dest)[_Size],      char const* _Source,        size_t _MaxCount,    _locale_t _Locale) throw()                  {                                                                                                                                                                     return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale);                                                                                                }                                                                                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _mbstowcs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,                       char const* _Source,                         size_t _MaxCount,                     _locale_t _Locale);




__declspec(deprecated("This function or variable may be unsafe. Consider using wctomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using _wctomb_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );


    
     errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );



 errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh,
                              _locale_t _Locale);


 errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                           errno_t __cdecl wcstombs_s(                      size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],                          wchar_t const* _Source,                            size_t _MaxCount) throw()                 {                                                                                                                                                    return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount);                                                                                       }                                                                                                                                            }

__declspec(deprecated("This function or variable may be unsafe. Consider using wcstombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcstombs(  char *_Dest,                           wchar_t const* _Source,                             size_t _MaxCount);


 errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                            errno_t __cdecl _wcstombs_s_l(                size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],                    wchar_t const* _Source,                      size_t _MaxCount,                  _locale_t _Locale) throw()                  {                                                                                                                                                                     return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale);                                                                                                }                                                                                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wcstombs_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _wcstombs_l(  char *_Dest,                       wchar_t const* _Source,                         size_t _MaxCount,                     _locale_t _Locale);



       


 
 
 __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );



 errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                            errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw()                  {                                                                                                                                                                     return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext);                                                                                                }                                                                                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _makepath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _makepath(    char *_Buffer,                char const* _Drive,                char const* _Dir,                char const* _Filename,                char const* _Ext);

__declspec(deprecated("This function or variable may be unsafe. Consider using _splitpath_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


 errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++"                                                                                                      {                                                                                                                     template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize>                                  inline                                                                                                            errno_t __cdecl _splitpath_s(                                                                                        char const* _Dest,                                                                                        char (&_Drive)[_DriveSize],                                                                            char (&_Dir)[_DirSize],                                                                                char (&_Name)[_NameSize],                                                                              char (&_Ext)[_ExtSize]                                                                               ) throw()                                                                                     {                                                                                                                     return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize);                 }                                                                                                             }



 
 errno_t __cdecl getenv_s(
                                 size_t*     _RequiredCount,
      char*       _Buffer,
                                  rsize_t     _BufferCount,
                                char const* _VarName
    );





 int*       __cdecl __p___argc (void);
 char***    __cdecl __p___argv (void);
 wchar_t*** __cdecl __p___wargv(void);


 char***    __cdecl __p__environ (void);
 wchar_t*** __cdecl __p__wenviron(void);





 


      __declspec(deprecated("This function or variable may be unsafe. Consider using _dupenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl getenv_s(   size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw()                 {                                                                                                                                    return getenv_s(_RequiredCount, _Buffer, _Size, _VarName);                                                                               }                                                                                                                            }


    
     errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );


     int __cdecl system(
          char const* _Command
        );

          
     
     int __cdecl _putenv(
          char const* _EnvString
        );

    
     errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );


     errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw()                 {                                                                                                                                    return _searchenv_s(_Filename, _VarName, _Buffer, _Size);                                                                               }                                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _searchenv_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _searchenv(                   char const* _Filename,                    char const* _VarName,     char *_Buffer);

         __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode instead. See online help for details."))
     void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. See online help for details."))
     void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. See online help for details."))
     void __cdecl _sleep(
          unsigned long _Duration
        );



     



      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _ecvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ecvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fcvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _gcvt. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _fcvt_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _itoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _itoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _ltoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ltoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _swab. See online help for details."))
     void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _ultoa. See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _ultoa_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );


      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _putenv. See online help for details."))
     int __cdecl putenv(
          char const* _EnvString
        );


    _onexit_t __cdecl onexit(  _onexit_t _Func);




}                             




    inline double abs(  double _Xx) noexcept   {
    return :: fabs(_Xx);
}

   inline float abs(  float _Xx) noexcept   {
    return :: fabsf(_Xx);
}

   inline long double abs(  long double _Xx) noexcept   {
    return :: fabsl(_Xx);
}

namespace std {
using :: size_t;
using :: div_t;
using :: ldiv_t;
using :: abort;
using :: abs;
using :: atexit;
using :: atof;
using :: atoi;
using :: atol;
using :: bsearch;
using :: calloc;
using :: div;
using :: exit;
using :: free;
using :: labs;
using :: ldiv;
using :: malloc;
using :: mblen;
using :: mbstowcs;
using :: mbtowc;
using :: qsort;
using :: rand;
using :: realloc;
using :: srand;
using :: strtod;
using :: strtol;
using :: strtoul;
using :: wcstombs;
using :: wctomb;

using :: lldiv_t;

using :: getenv;
using :: system;

using :: atoll;
using :: llabs;
using :: lldiv;
using :: strtof;
using :: strtold;
using :: strtoll;
using :: strtoull;

using :: _Exit;
using :: at_quick_exit;
using :: quick_exit;
}



 
  
 
  
 
  



namespace std {
 template <class _Elem>
class initializer_list {
public:
    using value_type      = _Elem;
    using reference       = const _Elem&;
    using const_reference = const _Elem&;
    using size_type       = size_t;

    using iterator       = const _Elem*;
    using const_iterator = const _Elem*;

    constexpr initializer_list() noexcept : _First(nullptr), _Last(nullptr) {}

    constexpr initializer_list(const _Elem* _First_arg, const _Elem* _Last_arg) noexcept
        : _First(_First_arg), _Last(_Last_arg) {}

     constexpr const _Elem* begin() const noexcept {
        return _First;
    }

     constexpr const _Elem* end() const noexcept {
        return _Last;
    }

     constexpr size_t size() const noexcept {
        return static_cast<size_t>(_Last - _First);
    }

private:
    const _Elem* _First;
    const _Elem* _Last;
};

 template <class _Elem>
 constexpr const _Elem* begin(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.begin();
}

 template <class _Elem>
 constexpr const _Elem* end(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.end();
}
}

 
  



namespace std {
 template <class>
 inline constexpr bool _Always_false = false;

 
 template <class _Ty = void>
struct plus {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_result;

     constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left + _Right;
    }
};

 template <class _Ty = void>
struct minus {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_result;

     constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left - _Right;
    }
};

 template <class _Ty = void>
struct multiplies {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_result;

     constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left * _Right;
    }
};

 template <class _Ty = void>
struct equal_to {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left == _Right;
    }
};

 template <class _Ty = void>
struct not_equal_to {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left != _Right;
    }
};

 template <class _Ty = void>
struct greater {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left > _Right;
    }
};

 template <class _Ty = void>
struct less {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left < _Right;
    }
};

 template <class _Ty = void>
struct greater_equal {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left >= _Right;
    }
};

 template <class _Ty = void>
struct less_equal {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty _Unnameable_second_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef bool _Unnameable_result;

     constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const {
        return _Left <= _Right;
    }
};

 template <>
struct plus<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) + static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct minus<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) - static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct multiplies<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) * static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct equal_to<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct not_equal_to<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) != static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct greater<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) > static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct less<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct greater_equal<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) >= static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <>
struct less_equal<void> {
    template <class _Ty1, class _Ty2>
     constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right)))          -> decltype(static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right)) {
        return static_cast<_Ty1&&>(_Left) <= static_cast<_Ty2&&>(_Right);
    }

    using is_transparent = int;
};

 template <class _Ty>
 constexpr _Ty* addressof(_Ty& _Val) noexcept {
    return __builtin_addressof(_Val);
}

template <class _Ty>
const _Ty* addressof(const _Ty&&) = delete;

 template <class _Ptrty>
 constexpr auto _Unfancy(_Ptrty _Ptr) noexcept {      return ::std:: addressof(*_Ptr);
}

template <class _Ty>
 constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept {      return _Ptr;
}
}




















namespace std {
 template <class _Ty, _Ty... _Vals>
struct integer_sequence {      static_assert(is_integral_v<_Ty>, "integer_sequence<T, I...> requires T to be an integral type.");

    using value_type = _Ty;

     static constexpr size_t size() noexcept {
        return sizeof...(_Vals);
    }
};

 template <class _Ty, _Ty _Size>
using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;

template <size_t... _Vals>
using index_sequence = integer_sequence<size_t, _Vals...>;

template <size_t _Size>
using make_index_sequence = make_integer_sequence<size_t, _Size>;

template <class... _Types>
using index_sequence_for = make_index_sequence<sizeof...(_Types)>;

 template <bool _First_value, class _First, class... _Rest>
struct _Conjunction {      using type = _First;
};

template <class _True, class _Next, class... _Rest>
struct _Conjunction<true, _True, _Next, _Rest...> {      using type = typename _Conjunction<_Next::value, _Next, _Rest...>::type;
};

template <class... _Traits>
struct conjunction : true_type {};  
template <class _First, class... _Rest>
struct conjunction<_First, _Rest...> : _Conjunction<_First::value, _First, _Rest...>::type {
     };

template <class... _Traits>
inline constexpr bool conjunction_v = conjunction<_Traits...>::value;

 template <class _Trait>
struct negation : bool_constant<!static_cast<bool>(_Trait::value)> {};  
template <class _Trait>
inline constexpr bool negation_v = negation<_Trait>::value;

 template <class _Ty>
inline constexpr bool is_void_v = is_same_v<remove_cv_t<_Ty>, void>;

template <class _Ty>
struct is_void : bool_constant<is_void_v<_Ty>> {};

 template <class... _Types>
using void_t = void;

  template <class _Ty>
struct add_const {      using type = const _Ty;
};

template <class _Ty>
using add_const_t = typename add_const<_Ty>::type;

 template <class _Ty>
struct add_volatile {      using type = volatile _Ty;
};

template <class _Ty>
using add_volatile_t = typename add_volatile<_Ty>::type;

 template <class _Ty>
struct add_cv {      using type = const volatile _Ty;
};

template <class _Ty>
using add_cv_t = typename add_cv<_Ty>::type;

 template <class _Ty, class = void>
struct _Add_reference {      using _Lvalue = _Ty;
    using _Rvalue = _Ty;
};

template <class _Ty>
struct _Add_reference<_Ty, void_t<_Ty&>> {      using _Lvalue = _Ty&;
    using _Rvalue = _Ty&&;
};

 template <class _Ty>
struct add_lvalue_reference {
    using type = typename _Add_reference<_Ty>::_Lvalue;
};

template <class _Ty>
using add_lvalue_reference_t = typename _Add_reference<_Ty>::_Lvalue;

 template <class _Ty>
struct add_rvalue_reference {
    using type = typename _Add_reference<_Ty>::_Rvalue;
};

template <class _Ty>
using add_rvalue_reference_t = typename _Add_reference<_Ty>::_Rvalue;

 template <class _Ty>
add_rvalue_reference_t<_Ty> declval() noexcept;

 template <class _Ty>
struct remove_extent {      using type = _Ty;
};

template <class _Ty, size_t _Ix>
struct remove_extent<_Ty[_Ix]> {
    using type = _Ty;
};

template <class _Ty>
struct remove_extent<_Ty[]> {
    using type = _Ty;
};

template <class _Ty>
using remove_extent_t = typename remove_extent<_Ty>::type;

 template <class _Ty>
struct remove_all_extents {      using type = _Ty;
};

template <class _Ty, size_t _Ix>
struct remove_all_extents<_Ty[_Ix]> {
    using type = typename remove_all_extents<_Ty>::type;
};

template <class _Ty>
struct remove_all_extents<_Ty[]> {
    using type = typename remove_all_extents<_Ty>::type;
};

template <class _Ty>
using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

 template <class _Ty>
struct remove_pointer {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty*> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* const> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* volatile> {
    using type = _Ty;
};

template <class _Ty>
struct remove_pointer<_Ty* const volatile> {
    using type = _Ty;
};

template <class _Ty>
using remove_pointer_t = typename remove_pointer<_Ty>::type;

 template <class _Ty, class = void>
struct _Add_pointer {      using type = _Ty;
};

template <class _Ty>
struct _Add_pointer<_Ty, void_t<remove_reference_t<_Ty>*>> {      using type = remove_reference_t<_Ty>*;
};

template <class _Ty>
struct add_pointer {
    using type = typename _Add_pointer<_Ty>::type;
};

template <class _Ty>
using add_pointer_t = typename _Add_pointer<_Ty>::type;

  template <class>
inline constexpr bool is_array_v = false;  
template <class _Ty, size_t _Nx>
inline constexpr bool is_array_v<_Ty[_Nx]> = true;

template <class _Ty>
inline constexpr bool is_array_v<_Ty[]> = true;

template <class _Ty>
struct is_array : bool_constant<is_array_v<_Ty>> {};

 template <class>
inline constexpr bool is_bounded_array_v = false;

template <class _Ty, size_t _Nx>
inline constexpr bool is_bounded_array_v<_Ty[_Nx]> = true;

template <class _Ty>
struct is_bounded_array : bool_constant<is_bounded_array_v<_Ty>> {};

 template <class>
inline constexpr bool is_unbounded_array_v = false;

template <class _Ty>
inline constexpr bool is_unbounded_array_v<_Ty[]> = true;

template <class _Ty>
struct is_unbounded_array : bool_constant<is_unbounded_array_v<_Ty>> {};

 template <class>
inline constexpr bool is_lvalue_reference_v = false;  
template <class _Ty>
inline constexpr bool is_lvalue_reference_v<_Ty&> = true;

template <class _Ty>
struct is_lvalue_reference : bool_constant<is_lvalue_reference_v<_Ty>> {};

 template <class>
inline constexpr bool is_rvalue_reference_v = false;  
template <class _Ty>
inline constexpr bool is_rvalue_reference_v<_Ty&&> = true;

template <class _Ty>
struct is_rvalue_reference : bool_constant<is_rvalue_reference_v<_Ty>> {};

 template <class>
inline constexpr bool is_reference_v = false;  
template <class _Ty>
inline constexpr bool is_reference_v<_Ty&> = true;

template <class _Ty>
inline constexpr bool is_reference_v<_Ty&&> = true;

template <class _Ty>
struct is_reference : bool_constant<is_reference_v<_Ty>> {};

 template <class>
inline constexpr bool is_pointer_v = false;  
template <class _Ty>
inline constexpr bool is_pointer_v<_Ty*> = true;

template <class _Ty>
inline constexpr bool is_pointer_v<_Ty* const> = true;

template <class _Ty>
inline constexpr bool is_pointer_v<_Ty* volatile> = true;

template <class _Ty>
inline constexpr bool is_pointer_v<_Ty* const volatile> = true;

template <class _Ty>
struct is_pointer : bool_constant<is_pointer_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_null_pointer_v =
    is_same_v<remove_cv_t<_Ty>, nullptr_t>;  
template <class _Ty>
struct is_null_pointer : bool_constant<is_null_pointer_v<_Ty>> {};

 template <class _Ty>
struct is_union : bool_constant<__is_union(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_union_v = __is_union(_Ty);

 template <class _Ty>
struct is_class : bool_constant<__is_class(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_class_v = __is_class(_Ty);

 template <class _Ty>
inline constexpr bool is_fundamental_v = is_arithmetic_v<_Ty> || is_void_v<_Ty> || is_null_pointer_v<_Ty>;

template <class _Ty>
struct is_fundamental : bool_constant<is_fundamental_v<_Ty>> {};  
 template <class _From, class _To>
struct is_convertible : bool_constant<__is_convertible_to(_From, _To)> {
     };

template <class _From, class _To>
inline constexpr bool is_convertible_v = __is_convertible_to(_From, _To);

 template <class _Ty>
struct is_enum : bool_constant<__is_enum(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_enum_v = __is_enum(_Ty);

 template <class _Ty>
struct is_compound : bool_constant<!is_fundamental_v<_Ty>> {};  
template <class _Ty>
inline constexpr bool is_compound_v = !is_fundamental_v<_Ty>;

 template <class... _Types>
struct _Arg_types {};  
template <class _Ty1>
struct _Arg_types<_Ty1> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty1 _Unnameable_argument;
};

template <class _Ty1, class _Ty2>
struct _Arg_types<_Ty1, _Ty2> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty1 _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ty2 _Unnameable_second_argument;
};

 template <class _Ty>
struct _Is_memfunptr {      using _Bool_type = false_type;  };


template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };           template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };          template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };           template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };          template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };             template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };     template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };                                        template <class _Ret, class _Arg0, class... _Types>                                       struct _Is_memfunptr<_Ret (CALL_OPT _Arg0::*)(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT>         : _Arg_types<CV_OPT _Arg0*, _Types...> {                                                  using _Bool_type = true_type;                                                             [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                         using _Class_type = _Arg0;                                                                using _Guide_type = enable_if<!is_same_v<int REF_OPT, int&&>, _Ret(_Types...)>;       };


template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                       template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                                 template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                              template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                        template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                                     template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                                template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                             template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                       template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                                    template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                               template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                            template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                      template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                              template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                        template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                     template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };               template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                             template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                       template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                    template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };              template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                            template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                      template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };                   template <class _Ret, class _Arg0, class... _Types>                          struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...)                                 CV_REF_NOEXCEPT_OPT> {           using _Bool_type = true_type;                                                [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;            using _Class_type = _Arg0;                                                   using _Guide_type = enable_if<false>;                                    };

template <class _Ty>
inline constexpr bool is_member_function_pointer_v = _Is_memfunptr<remove_cv_t<_Ty>>::_Bool_type::value;

template <class _Ty>
struct is_member_function_pointer : bool_constant<is_member_function_pointer_v<_Ty>> {};

 template <class>
inline constexpr bool is_const_v = false;  
template <class _Ty>
inline constexpr bool is_const_v<const _Ty> = true;

template <class _Ty>
struct is_const : bool_constant<is_const_v<_Ty>> {};

 template <class>
inline constexpr bool is_volatile_v = false;  
template <class _Ty>
inline constexpr bool is_volatile_v<volatile _Ty> = true;

template <class _Ty>
struct is_volatile : bool_constant<is_volatile_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_function_v =      !is_const_v<const _Ty> && !is_reference_v<_Ty>;

template <class _Ty>
struct is_function : bool_constant<is_function_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_object_v =      is_const_v<const _Ty> && !is_void_v<_Ty>;

template <class _Ty>
struct is_object : bool_constant<is_object_v<_Ty>> {};

 template <class>
struct _Is_member_object_pointer {
    static constexpr bool value = false;
};

template <class _Ty1, class _Ty2>
struct _Is_member_object_pointer<_Ty1 _Ty2::*> {
    static constexpr bool value = !is_function_v<_Ty1>;
    using _Class_type           = _Ty2;
};

template <class _Ty>
inline constexpr bool is_member_object_pointer_v = _Is_member_object_pointer<remove_cv_t<_Ty>>::value;

template <class _Ty>
struct is_member_object_pointer : bool_constant<is_member_object_pointer_v<_Ty>> {};

 template <class _Ty>
inline constexpr bool is_member_pointer_v = is_member_object_pointer_v<_Ty> || is_member_function_pointer_v<_Ty>;

template <class _Ty>
struct is_member_pointer : bool_constant<is_member_pointer_v<_Ty>> {};  
 template <class _Ty>
inline constexpr bool is_scalar_v =      is_arithmetic_v<_Ty> || is_enum_v<_Ty> || is_pointer_v<_Ty> || is_member_pointer_v<_Ty> || is_null_pointer_v<_Ty>;

template <class _Ty>
struct is_scalar : bool_constant<is_scalar_v<_Ty>> {};

 template <class _Ty>
struct [[deprecated("warning STL4025: std::is_pod and std::is_pod_v are deprecated in C++20. The std::is_trivially_copyable and/or std::is_standard_layout traits likely suit your use case. You can define _SILENCE_CXX20_IS_POD_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] is_pod : bool_constant<__is_pod(_Ty)> {};  
template <class _Ty>
[[deprecated("warning STL4025: std::is_pod and std::is_pod_v are deprecated in C++20. The std::is_trivially_copyable and/or std::is_standard_layout traits likely suit your use case. You can define _SILENCE_CXX20_IS_POD_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] inline constexpr bool is_pod_v = __is_pod(_Ty);

 template <class _Ty>
struct is_empty : bool_constant<__is_empty(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_empty_v = __is_empty(_Ty);

 template <class _Ty>
struct is_polymorphic : bool_constant<__is_polymorphic(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_polymorphic_v = __is_polymorphic(_Ty);

 template <class _Ty>
struct is_abstract : bool_constant<__is_abstract(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_abstract_v = __is_abstract(_Ty);

 template <class _Ty>
struct is_final : bool_constant<__is_final(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_final_v = __is_final(_Ty);

 template <class _Ty>
struct is_standard_layout : bool_constant<__is_standard_layout(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_standard_layout_v = __is_standard_layout(_Ty);


 template <class _Ty>
struct is_trivial : bool_constant<__is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivial_v = __is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty);

 template <class _Ty>
struct is_trivially_copyable : bool_constant<__is_trivially_copyable(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Ty);

 template <class _Ty>
struct has_virtual_destructor : bool_constant<__has_virtual_destructor(_Ty)> {
     };

template <class _Ty>
inline constexpr bool has_virtual_destructor_v = __has_virtual_destructor(_Ty);

 template <class _Ty>
struct has_unique_object_representations : bool_constant<__has_unique_object_representations(_Ty)> {
     };

template <class _Ty>
inline constexpr bool has_unique_object_representations_v = __has_unique_object_representations(_Ty);

 template <class _Ty>
struct is_aggregate : bool_constant<__is_aggregate(_Ty)> {};  
template <class _Ty>
inline constexpr bool is_aggregate_v = __is_aggregate(_Ty);

  template <class _Ty, class... _Args>
struct is_constructible : bool_constant<__is_constructible(_Ty, _Args...)> {
     };

template <class _Ty, class... _Args>
inline constexpr bool is_constructible_v = __is_constructible(_Ty, _Args...);

 template <class _Ty>
struct is_copy_constructible : bool_constant<__is_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
     };

template <class _Ty>
inline constexpr bool is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_default_constructible : bool_constant<__is_constructible(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_default_constructible_v = __is_constructible(_Ty);

 template <class _Ty, class = void>
struct _Is_implicitly_default_constructible : false_type {
     };

template <class _Ty>
void _Implicitly_default_construct(const _Ty&);

template <class _Ty>
struct _Is_implicitly_default_constructible<_Ty, void_t<decltype(_Implicitly_default_construct<_Ty>({}))>> : true_type {
};

 template <class _Ty>
struct is_move_constructible : bool_constant<__is_constructible(_Ty, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_move_constructible_v = __is_constructible(_Ty, _Ty);

 template <class _To, class _From>
struct is_assignable : bool_constant<__is_assignable(_To, _From)> {};  
template <class _To, class _From>
inline constexpr bool is_assignable_v = __is_assignable(_To, _From);

 template <class _Ty>
struct is_copy_assignable
    : bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
     };

template <class _Ty>
inline constexpr bool is_copy_assignable_v = __is_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

template <class _Ty>
struct _Is_copy_assignable_no_precondition_check
    : bool_constant<__is_assignable_no_precondition_check(
          add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {};

template <class _Ty>
inline constexpr bool _Is_copy_assignable_unchecked_v = __is_assignable_no_precondition_check(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_move_assignable : bool_constant<__is_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_move_assignable_v = __is_assignable(add_lvalue_reference_t<_Ty>, _Ty);

template <class _Ty>
struct _Is_move_assignable_no_precondition_check
    : bool_constant<__is_assignable_no_precondition_check(add_lvalue_reference_t<_Ty>, _Ty)> {};

template <class _Ty>
inline constexpr bool _Is_move_assignable_unchecked_v = __is_assignable_no_precondition_check(
    add_lvalue_reference_t<_Ty>, _Ty);

 template <class _Ty>
struct is_destructible : bool_constant<__is_destructible(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_destructible_v = __is_destructible(_Ty);

  template <class _Ty, class... _Args>
struct is_trivially_constructible : bool_constant<__is_trivially_constructible(_Ty, _Args...)> {
     };

template <class _Ty, class... _Args>
inline constexpr bool is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...);

 template <class _Ty>
struct is_trivially_copy_constructible
    : bool_constant<__is_trivially_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_copy_constructible_v = __is_trivially_constructible(
    _Ty, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_trivially_default_constructible : bool_constant<__is_trivially_constructible(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_default_constructible_v = __is_trivially_constructible(_Ty);

 template <class _Ty>
struct is_trivially_move_constructible : bool_constant<__is_trivially_constructible(_Ty, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty);

 template <class _To, class _From>
struct is_trivially_assignable : bool_constant<__is_trivially_assignable(_To, _From)> {
     };

template <class _To, class _From>
inline constexpr bool is_trivially_assignable_v = __is_trivially_assignable(_To, _From);

 template <class _Ty>
struct is_trivially_copy_assignable
    : bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_copy_assignable_v = __is_trivially_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_trivially_move_assignable : bool_constant<__is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t<_Ty>, _Ty);

 template <class _Ty>
struct is_trivially_destructible : bool_constant<__is_trivially_destructible(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_trivially_destructible_v = __is_trivially_destructible(_Ty);

  template <class _Ty, class... _Args>
struct is_nothrow_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Args...)> {
     };

template <class _Ty, class... _Args>
inline constexpr bool is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...);

 template <class _Ty>
struct is_nothrow_copy_constructible
    : bool_constant<__is_nothrow_constructible(_Ty, add_lvalue_reference_t<const _Ty>)> {
          };

template <class _Ty>
inline constexpr bool is_nothrow_copy_constructible_v = __is_nothrow_constructible(
    _Ty, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_nothrow_default_constructible : bool_constant<__is_nothrow_constructible(_Ty)> {
     };

template <class _Ty>
inline constexpr bool is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty);

 template <class _Ty>
struct is_nothrow_move_constructible : bool_constant<__is_nothrow_constructible(_Ty, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty);

 template <class _To, class _From>
struct is_nothrow_assignable : bool_constant<__is_nothrow_assignable(_To, _From)> {
     };

template <class _To, class _From>
inline constexpr bool is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From);

 template <class _Ty>
struct is_nothrow_copy_assignable
    : bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>)> {
     };

template <class _Ty>
inline constexpr bool is_nothrow_copy_assignable_v = __is_nothrow_assignable(
    add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<const _Ty>);

 template <class _Ty>
struct is_nothrow_move_assignable : bool_constant<__is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty)> {
     };

template <class _Ty>
inline constexpr bool is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t<_Ty>, _Ty);

 template <class _Ty>
struct is_nothrow_destructible : bool_constant<__is_nothrow_destructible(_Ty)> {
          };

template <class _Ty>
inline constexpr bool is_nothrow_destructible_v = __is_nothrow_destructible(_Ty);

 template <class _Ty, bool = is_integral_v<_Ty>>
struct _Sign_base {      using _Uty = remove_cv_t<_Ty>;

    static constexpr bool _Signed   = static_cast<_Uty>(-1) < static_cast<_Uty>(0);
    static constexpr bool _Unsigned = !_Signed;
};

template <class _Ty>
struct _Sign_base<_Ty, false> {                                       static constexpr bool _Signed   = is_floating_point_v<_Ty>;
    static constexpr bool _Unsigned = false;
};

template <class _Ty>
struct is_signed : bool_constant<_Sign_base<_Ty>::_Signed> {};  
template <class _Ty>
inline constexpr bool is_signed_v = _Sign_base<_Ty>::_Signed;

 template <class _Ty>
struct is_unsigned : bool_constant<_Sign_base<_Ty>::_Unsigned> {};  
template <class _Ty>
inline constexpr bool is_unsigned_v = _Sign_base<_Ty>::_Unsigned;

 template <class _Ty>
inline constexpr bool _Is_nonbool_integral = is_integral_v<_Ty> && !is_same_v<remove_cv_t<_Ty>, bool>;

 template <bool>
struct _Select {      template <class _Ty1, class>
    using _Apply = _Ty1;
};

template <>
struct _Select<false> {
    template <class, class _Ty2>
    using _Apply = _Ty2;
};

template <size_t>
struct _Make_signed2;  
template <>
struct _Make_signed2<1> {
    template <class>
    using _Apply = signed char;
};

template <>
struct _Make_signed2<2> {
    template <class>
    using _Apply = short;
};

template <>
struct _Make_signed2<4> {
    template <class _Ty>
    using _Apply =          typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<long, int>;
};

template <>
struct _Make_signed2<8> {
    template <class>
    using _Apply = long long;
};

template <class _Ty>
using _Make_signed1 =      typename _Make_signed2<sizeof(_Ty)>::template _Apply<_Ty>;

template <class _Ty>
struct make_signed {      static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
        "make_signed<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");

    using type = typename remove_cv<_Ty>::template _Apply<_Make_signed1>;
};

template <class _Ty>
using make_signed_t = typename make_signed<_Ty>::type;

 template <size_t>
struct _Make_unsigned2;  
template <>
struct _Make_unsigned2<1> {
    template <class>
    using _Apply = unsigned char;
};

template <>
struct _Make_unsigned2<2> {
    template <class>
    using _Apply = unsigned short;
};

template <>
struct _Make_unsigned2<4> {
    template <class _Ty>
    using _Apply =          typename _Select<is_same_v<_Ty, long> || is_same_v<_Ty, unsigned long>>::template _Apply<unsigned long,
            unsigned int>;
};

template <>
struct _Make_unsigned2<8> {
    template <class>
    using _Apply = unsigned long long;
};

template <class _Ty>
using _Make_unsigned1 =      typename _Make_unsigned2<sizeof(_Ty)>::template _Apply<_Ty>;

template <class _Ty>
struct make_unsigned {      static_assert(_Is_nonbool_integral<_Ty> || is_enum_v<_Ty>,
        "make_unsigned<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");

    using type = typename remove_cv<_Ty>::template _Apply<_Make_unsigned1>;
};

template <class _Ty>
using make_unsigned_t = typename make_unsigned<_Ty>::type;

 template <class _Rep>
constexpr make_unsigned_t<_Rep> _Unsigned_value(_Rep _Val) {      return static_cast<make_unsigned_t<_Rep>>(_Val);
}

 template <class _Ty>
struct alignment_of : integral_constant<size_t, alignof(_Ty)> {};  
template <class _Ty>
inline constexpr size_t alignment_of_v = alignof(_Ty);

 template <class _Ty, size_t _Len>
union _Align_type {      _Ty _Val;
    char _Pad[_Len];
};

template <size_t _Len, size_t _Align, class _Ty, bool _Ok>
struct _Aligned;  
template <size_t _Len, size_t _Align, class _Ty>
struct _Aligned<_Len, _Align, _Ty, true> {
    using type = _Align_type<_Ty, _Len>;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, double, false> {
    static_assert(_Always_false<_Aligned>,
        "You\'ve instantiated std::aligned_storage<Len, Align> with an extended alignment (in other words, Align > alignof(max_align_t)). Before VS 2017 15.8, the member \"type\" would non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to handle this correctly, but the fix inherently changes layout and breaks binary compatibility (*only* for uses of aligned_storage with extended alignments). Please define either (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to acknowledge that you understand this message and that you actually want a type with an extended alignment, or (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to silence this message and get the old non-conforming behavior.");
    using type = _Align_type<max_align_t, _Len>;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, int, false> {
    using _Next                 = double;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, short, false> {
    using _Next                 = int;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align>
struct _Aligned<_Len, _Align, char, false> {
    using _Next                 = short;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align = alignof(max_align_t)>
struct aligned_storage {      using _Next                 = char;
    static constexpr bool _Fits = _Align <= alignof(_Next);
    using type                  = typename _Aligned<_Len, _Align, _Next, _Fits>::type;
};

template <size_t _Len, size_t _Align = alignof(max_align_t)>
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

 template <size_t... _Vals>
struct _Maximum;

template <>
struct _Maximum<> : integral_constant<size_t, 0> {};  
template <size_t _Val>
struct _Maximum<_Val> : integral_constant<size_t, _Val> {};  
template <size_t _First, size_t _Second, size_t... _Rest>
struct _Maximum<_First, _Second, _Rest...> : _Maximum<(_First < _Second ? _Second : _First), _Rest...>::type {
     };

template <size_t _Len, class... _Types>
struct aligned_union {      static constexpr size_t _Max_len        = _Maximum<_Len, sizeof(_Types)...>::value;      static constexpr size_t alignment_value = _Maximum<alignof(_Types)...>::value;

    using type = aligned_storage_t<_Max_len, alignment_value>;
};

template <size_t _Len, class... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

 template <class _Ty, bool = is_enum_v<_Ty>>
struct _Underlying_type {
    using type = __underlying_type(_Ty);
};

template <class _Ty>
struct _Underlying_type<_Ty, false> {};

template <class _Ty>
struct underlying_type : _Underlying_type<_Ty> {};  
template <class _Ty>
using underlying_type_t = typename _Underlying_type<_Ty>::type;

 template <class _Ty>
inline constexpr size_t rank_v = 0;  
template <class _Ty, size_t _Nx>
inline constexpr size_t rank_v<_Ty[_Nx]> = rank_v<_Ty> + 1;

template <class _Ty>
inline constexpr size_t rank_v<_Ty[]> = rank_v<_Ty> + 1;

template <class _Ty>
struct rank : integral_constant<size_t, rank_v<_Ty>> {};

 template <class _Ty, unsigned int _Ix = 0>
inline constexpr size_t extent_v = 0;  
template <class _Ty, size_t _Nx>
inline constexpr size_t extent_v<_Ty[_Nx], 0> = _Nx;

template <class _Ty, unsigned int _Ix, size_t _Nx>
inline constexpr size_t extent_v<_Ty[_Nx], _Ix> = extent_v<_Ty, _Ix - 1>;

template <class _Ty, unsigned int _Ix>
inline constexpr size_t extent_v<_Ty[], _Ix> = extent_v<_Ty, _Ix - 1>;

template <class _Ty, unsigned int _Ix = 0>
struct extent : integral_constant<size_t, extent_v<_Ty, _Ix>> {};

 template <class _Base, class _Derived>
struct is_base_of : bool_constant<__is_base_of(_Base, _Derived)> {
     };

template <class _Base, class _Derived>
inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);

 template <class _Ty>
struct decay {      using _Ty1 = remove_reference_t<_Ty>;
    using _Ty2 = typename _Select<is_function_v<_Ty1>>::template _Apply<add_pointer<_Ty1>, remove_cv<_Ty1>>;
    using type = typename _Select<is_array_v<_Ty1>>::template _Apply<add_pointer<remove_extent_t<_Ty1>>, _Ty2>::type;
};

template <class _Ty>
using decay_t = typename decay<_Ty>::type;

 template <class _Ty1, class _Ty2>
using _Conditional_type = decltype(false ? ::std:: declval<_Ty1>() : ::std:: declval<_Ty2>());

 template <class _Ty1, class _Ty2, class = void>
struct _Const_lvalue_cond_oper {};

  template <class _Ty1, class _Ty2>
struct _Const_lvalue_cond_oper<_Ty1, _Ty2, void_t<_Conditional_type<const _Ty1&, const _Ty2&>>> {
    using type = remove_cvref_t<_Conditional_type<const _Ty1&, const _Ty2&>>;
};

template <class _Ty1, class _Ty2, class = void>
struct _Decayed_cond_oper : _Const_lvalue_cond_oper<_Ty1, _Ty2> {};

template <class _Ty1, class _Ty2>
struct _Decayed_cond_oper<_Ty1, _Ty2, void_t<_Conditional_type<_Ty1, _Ty2>>> {
    using type = decay_t<_Conditional_type<_Ty1, _Ty2>>;
};

template <class... _Ty>
struct common_type;

template <class... _Ty>
using common_type_t = typename common_type<_Ty...>::type;

template <>
struct common_type<> {};

template <class _Ty1>
struct common_type<_Ty1> : common_type<_Ty1, _Ty1> {};

template <class _Ty1, class _Ty2, class _Decayed1 = decay_t<_Ty1>, class _Decayed2 = decay_t<_Ty2>>
struct _Common_type2 : common_type<_Decayed1, _Decayed2> {};

template <class _Ty1, class _Ty2>
struct _Common_type2<_Ty1, _Ty2, _Ty1, _Ty2> : _Decayed_cond_oper<_Ty1, _Ty2> {};

template <class _Ty1, class _Ty2>
struct common_type<_Ty1, _Ty2> : _Common_type2<_Ty1, _Ty2> {};

template <class _Void, class _Ty1, class _Ty2, class... _Rest>
struct _Common_type3 {};

template <class _Ty1, class _Ty2, class... _Rest>
struct _Common_type3<void_t<common_type_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Rest...>
    : common_type<common_type_t<_Ty1, _Ty2>, _Rest...> {};

template <class _Ty1, class _Ty2, class... _Rest>
struct common_type<_Ty1, _Ty2, _Rest...> : _Common_type3<void, _Ty1, _Ty2, _Rest...> {};

 template <class, class, template <class> class, template <class> class>
struct basic_common_reference {};

 template <class _Ty>
_Ty _Returns_exactly() noexcept;  
 template <class _Ty1, class _Ty2>
using _Cond_res =      decltype(false ? _Returns_exactly<_Ty1>() : _Returns_exactly<_Ty2>());

 template <class _From>
struct _Copy_cv_impl {
    template <class _To>
    using _Apply = _To;
};
template <class _From>
struct _Copy_cv_impl<const _From> {
    template <class _To>
    using _Apply = const _To;
};
template <class _From>
struct _Copy_cv_impl<volatile _From> {
    template <class _To>
    using _Apply = volatile _To;
};
template <class _From>
struct _Copy_cv_impl<const volatile _From> {
    template <class _To>
    using _Apply = const volatile _To;
};
template <class _From, class _To>
using _Copy_cv =      typename _Copy_cv_impl<_From>::template _Apply<_To>;

 template <class _Ty1>
struct _Add_qualifiers {      template <class _Ty2>
    using _Apply = _Copy_cv<_Ty1, _Ty2>;
};
template <class _Ty1>
struct _Add_qualifiers<_Ty1&> {
    template <class _Ty2>
    using _Apply = add_lvalue_reference_t<_Copy_cv<_Ty1, _Ty2>>;
};
template <class _Ty1>
struct _Add_qualifiers<_Ty1&&> {
    template <class _Ty2>
    using _Apply = add_rvalue_reference_t<_Copy_cv<_Ty1, _Ty2>>;
};

 template <class...>
struct common_reference;

 template <class... _Types>
using common_reference_t = typename common_reference<_Types...>::type;

 template <>
struct common_reference<> {};

 template <class _Ty>
struct common_reference<_Ty> {
    using type = _Ty;
};

 
  template <class _Ty1, class _Ty2, class = void>
struct _Common_reference2C : common_type<_Ty1, _Ty2> {};

 template <class _Ty1, class _Ty2>
struct _Common_reference2C<_Ty1, _Ty2, void_t<_Cond_res<_Ty1, _Ty2>>> {
    using type = _Cond_res<_Ty1, _Ty2>;
};

 template <class _Ty1, class _Ty2>
using _Basic_specialization = typename basic_common_reference<remove_cvref_t<_Ty1>, remove_cvref_t<_Ty2>,
    _Add_qualifiers<_Ty1>::template _Apply, _Add_qualifiers<_Ty2>::template _Apply>::type;

template <class _Ty1, class _Ty2, class = void>
struct _Common_reference2B : _Common_reference2C<_Ty1, _Ty2> {};

template <class _Ty1, class _Ty2>
struct _Common_reference2B<_Ty1, _Ty2, void_t<_Basic_specialization<_Ty1, _Ty2>>> {
    using type = _Basic_specialization<_Ty1, _Ty2>;
};

 template <class _Ty1, class _Ty2, class = void>
struct _Common_reference2A : _Common_reference2B<_Ty1, _Ty2> {};

template <class _Ty1, class _Ty2, class _Result = _Cond_res<_Copy_cv<_Ty1, _Ty2>&, _Copy_cv<_Ty2, _Ty1>&>,
    enable_if_t<is_lvalue_reference_v<_Result>, int> = 0>
using _LL_common_ref = _Result;

template <class _Ty1, class _Ty2>
struct _Common_reference2A<_Ty1&, _Ty2&, void_t<_LL_common_ref<_Ty1, _Ty2>>> {
    using type = _LL_common_ref<_Ty1, _Ty2>;  };

template <class _Ty1, class _Ty2>
struct _Common_reference2A<_Ty1&&, _Ty2&, enable_if_t<is_convertible_v<_Ty1&&, _LL_common_ref<const _Ty1, _Ty2>>>> {
    using type = _LL_common_ref<const _Ty1, _Ty2>;  };

template <class _Ty1, class _Ty2>
struct _Common_reference2A<_Ty1&, _Ty2&&, enable_if_t<is_convertible_v<_Ty2&&, _LL_common_ref<const _Ty2, _Ty1>>>> {
    using type = _LL_common_ref<const _Ty2, _Ty1>;  };

template <class _Ty1, class _Ty2>
using _RR_common_ref = remove_reference_t<_LL_common_ref<_Ty1, _Ty2>>&&;

template <class _Ty1, class _Ty2>
struct _Common_reference2A<_Ty1&&, _Ty2&&,
    enable_if_t<
        is_convertible_v<_Ty1&&, _RR_common_ref<_Ty1, _Ty2>> && is_convertible_v<_Ty2&&, _RR_common_ref<_Ty1, _Ty2>>>> {
    using type = _RR_common_ref<_Ty1, _Ty2>;  };

template <class _Ty1, class _Ty2>
struct common_reference<_Ty1, _Ty2> : _Common_reference2A<_Ty1, _Ty2> {};

 template <class _Void, class _Ty1, class _Ty2, class... _Types>
struct _Fold_common_reference {};
template <class _Ty1, class _Ty2, class... _Types>
struct _Fold_common_reference<void_t<common_reference_t<_Ty1, _Ty2>>, _Ty1, _Ty2, _Types...>
    : common_reference<common_reference_t<_Ty1, _Ty2>, _Types...> {};

template <class _Ty1, class _Ty2, class _Ty3, class... _Rest>
struct common_reference<_Ty1, _Ty2, _Ty3, _Rest...> : _Fold_common_reference<void, _Ty1, _Ty2, _Ty3, _Rest...> {};

 template <class _Ty>
struct _Identity {
    using type = _Ty;
};
template <class _Ty>
using _Identity_t = typename _Identity<_Ty>::type;

 template <class _Ty>
struct type_identity {
    using type = _Ty;
};
template <class _Ty>
using type_identity_t = typename type_identity<_Ty>::type;

 template <class _Type, template <class...> class _Template>
inline constexpr bool _Is_specialization_v = false;  template <template <class...> class _Template, class... _Types>
inline constexpr bool _Is_specialization_v<_Template<_Types...>, _Template> = true;

template <class _Type, template <class...> class _Template>
struct _Is_specialization : bool_constant<_Is_specialization_v<_Type, _Template>> {};

 template <class _Ty>
 constexpr _Ty&& forward(
    remove_reference_t<_Ty>& _Arg) noexcept {      return static_cast<_Ty&&>(_Arg);
}

template <class _Ty>
 constexpr _Ty&& forward(remove_reference_t<_Ty>&& _Arg) noexcept {      static_assert(!is_lvalue_reference_v<_Ty>, "bad forward call");
    return static_cast<_Ty&&>(_Arg);
}

 template <class _Ty>
 constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {      return static_cast<remove_reference_t<_Ty>&&>(_Arg);
}

 template <class _Ty>
 constexpr conditional_t<!is_nothrow_move_constructible_v<_Ty> && is_copy_constructible_v<_Ty>, const _Ty&,
    _Ty&&>
    move_if_noexcept(_Ty& _Arg) noexcept {      return ::std:: move(_Arg);
}

template <class _Ty>
class reference_wrapper;

   
 enum class _Invoker_strategy {
    _Functor,
    _Pmf_object,
    _Pmf_refwrap,
    _Pmf_pointer,
    _Pmd_object,
    _Pmd_refwrap,
    _Pmd_pointer
};

struct _Invoker_functor {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Functor;

    template <class _Callable, class... _Types>
    static constexpr auto _Call(_Callable&& _Obj, _Types&&... _Args) noexcept(
        noexcept(static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...)))
        -> decltype(static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...)) {
        return static_cast<_Callable&&>(_Obj)(static_cast<_Types&&>(_Args)...);
    }
};

struct _Invoker_pmf_object {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_object;

    template <class _Decayed, class _Ty1, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
        noexcept((static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype((static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return (static_cast<_Ty1&&>(_Arg1).*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmf_refwrap {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_refwrap;

    template <class _Decayed, class _Refwrap, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Refwrap _Rw, _Types2&&... _Args2) noexcept(
        noexcept((_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype((_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return (_Rw.get().*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmf_pointer {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_pointer;

    template <class _Decayed, class _Ty1, class... _Types2>
    static constexpr auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
        noexcept(((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...)))
        -> decltype(((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...)) {
        return ((*static_cast<_Ty1&&>(_Arg1)).*_Pmf)(static_cast<_Types2&&>(_Args2)...);
    }
};

struct _Invoker_pmd_object {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_object;

    template <class _Decayed, class _Ty1>
    static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept -> decltype(static_cast<_Ty1&&>(_Arg1).*_Pmd) {
        return static_cast<_Ty1&&>(_Arg1).*_Pmd;
    }
};

struct _Invoker_pmd_refwrap {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_refwrap;

    template <class _Decayed, class _Refwrap>
    static constexpr auto _Call(_Decayed _Pmd, _Refwrap _Rw) noexcept -> decltype(_Rw.get().*_Pmd) {
        return _Rw.get().*_Pmd;
    }
};

struct _Invoker_pmd_pointer {
    static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_pointer;

    template <class _Decayed, class _Ty1>
    static constexpr auto _Call(_Decayed _Pmd, _Ty1&& _Arg1) noexcept(noexcept((*static_cast<_Ty1&&>(_Arg1)).*_Pmd))
        -> decltype((*static_cast<_Ty1&&>(_Arg1)).*_Pmd) {
        return (*static_cast<_Ty1&&>(_Arg1)).*_Pmd;
    }
};

template <class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t<_Callable>,
    bool _Is_pmf = is_member_function_pointer_v<_Removed_cvref>,
    bool _Is_pmd = is_member_object_pointer_v<_Removed_cvref>>
struct _Invoker1;

template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, true, false>
    : conditional_t<is_base_of_v<typename _Is_memfunptr<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>,
          _Invoker_pmf_object,
          conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmf_refwrap,
              _Invoker_pmf_pointer>> {};  
template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, true>
    : conditional_t<
          is_base_of_v<typename _Is_member_object_pointer<_Removed_cvref>::_Class_type, remove_reference_t<_Ty1>>,
          _Invoker_pmd_object,
          conditional_t<_Is_specialization_v<_Remove_cvref_t<_Ty1>, reference_wrapper>, _Invoker_pmd_refwrap,
              _Invoker_pmd_pointer>> {};  
template <class _Callable, class _Ty1, class _Removed_cvref>
struct _Invoker1<_Callable, _Ty1, _Removed_cvref, false, false> : _Invoker_functor {};

template <class _Callable>
constexpr auto invoke(_Callable&& _Obj) noexcept(noexcept(static_cast<_Callable&&>(_Obj)()))
    -> decltype(static_cast<_Callable&&>(_Obj)()) {
    return static_cast<_Callable&&>(_Obj)();
}

template <class _Callable, class _Ty1, class... _Types2>
constexpr auto invoke(_Callable&& _Obj, _Ty1&& _Arg1, _Types2&&... _Args2) noexcept(
    noexcept(_Invoker1<_Callable, _Ty1>::_Call(
        static_cast<_Callable&&>(_Obj), static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...)))
    -> decltype(_Invoker1<_Callable, _Ty1>::_Call(
        static_cast<_Callable&&>(_Obj), static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...)) {
    if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Functor) {
        return static_cast<_Callable&&>(_Obj)(static_cast<_Ty1&&>(_Arg1), static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_object) {
        return (static_cast<_Ty1&&>(_Arg1).*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_refwrap) {
        return (_Arg1.get().*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmf_pointer) {
        return ((*static_cast<_Ty1&&>(_Arg1)).*_Obj)(static_cast<_Types2&&>(_Args2)...);
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_object) {
        return static_cast<_Ty1&&>(_Arg1).*_Obj;
    } else if constexpr (_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_refwrap) {
        return _Arg1.get().*_Obj;
    } else {
        static_assert(_Invoker1<_Callable, _Ty1>::_Strategy == _Invoker_strategy::_Pmd_pointer, "bug in invoke");
        return (*static_cast<_Ty1&&>(_Arg1)).*_Obj;
    }
}

 

template <class _To>
void _Implicitly_convert_to(_To) noexcept;  
template <class _From, class _To, bool = is_convertible_v<_From, _To>, bool = is_void_v<_To>>
inline constexpr bool _Is_nothrow_convertible_v = noexcept(_Implicitly_convert_to<_To>(::std:: declval<_From>()));



template <class _From, class _To, bool _IsVoid>
inline constexpr bool _Is_nothrow_convertible_v<_From, _To, false, _IsVoid> = false;

template <class _From, class _To>
inline constexpr bool _Is_nothrow_convertible_v<_From, _To, true, true> = true;

template <class _From, class _To>
struct _Is_nothrow_convertible : bool_constant<_Is_nothrow_convertible_v<_From, _To>> {
     };

template <class _From, class _To>
inline constexpr bool is_nothrow_convertible_v = _Is_nothrow_convertible_v<_From, _To>;

template <class _From, class _To>
using is_nothrow_convertible = _Is_nothrow_convertible<_From, _To>;

template <class _Ty>
_Ty _Returns_exactly() noexcept;  
template <class _From, class _To, class = void>
struct _Invoke_convertible : false_type {};

template <class _From, class _To>
struct _Invoke_convertible<_From, _To, void_t<decltype(_Implicitly_convert_to<_To>(_Returns_exactly<_From>()))>>
    : true_type {};

template <class _From, class _To>
struct _Invoke_nothrow_convertible : bool_constant<noexcept(_Implicitly_convert_to<_To>(_Returns_exactly<_From>()))> {};

template <class _Result, bool _Nothrow>
struct _Invoke_traits_common {
    using type                  = _Result;
    using _Is_invocable         = true_type;
    using _Is_nothrow_invocable = bool_constant<_Nothrow>;
    template <class _Rx>
    using _Is_invocable_r = bool_constant<disjunction_v<is_void<_Rx>, _Invoke_convertible<type, _Rx>>>;
    template <class _Rx>
    using _Is_nothrow_invocable_r = bool_constant<conjunction_v<_Is_nothrow_invocable,
        disjunction<is_void<_Rx>,
            conjunction<_Invoke_convertible<type, _Rx>, _Invoke_nothrow_convertible<type, _Rx>>>>>;
};

template <class _Void, class _Callable>
struct _Invoke_traits_zero {
         using _Is_invocable         = false_type;
    using _Is_nothrow_invocable = false_type;
    template <class _Rx>
    using _Is_invocable_r = false_type;
    template <class _Rx>
    using _Is_nothrow_invocable_r = false_type;
};

template <class _Callable>
using _Decltype_invoke_zero = decltype(::std:: declval<_Callable>()());

template <class _Callable>
struct _Invoke_traits_zero<void_t<_Decltype_invoke_zero<_Callable>>, _Callable>
    : _Invoke_traits_common<_Decltype_invoke_zero<_Callable>, noexcept(::std:: declval<_Callable>()())> {};

template <class _Void, class... _Types>
struct _Invoke_traits_nonzero {
         using _Is_invocable         = false_type;
    using _Is_nothrow_invocable = false_type;
    template <class _Rx>
    using _Is_invocable_r = false_type;
    template <class _Rx>
    using _Is_nothrow_invocable_r = false_type;
};

template <class _Callable, class _Ty1, class... _Types2>
using _Decltype_invoke_nonzero = decltype(
    _Invoker1<_Callable, _Ty1>::_Call(::std:: declval<_Callable>(), ::std:: declval<_Ty1>(), ::std:: declval<_Types2>()...));

template <class _Callable, class _Ty1, class... _Types2>
struct _Invoke_traits_nonzero<void_t<_Decltype_invoke_nonzero<_Callable, _Ty1, _Types2...>>, _Callable, _Ty1,
    _Types2...> : _Invoke_traits_common<_Decltype_invoke_nonzero<_Callable, _Ty1, _Types2...>,
                      noexcept(_Invoker1<_Callable, _Ty1>::_Call(
                          ::std:: declval<_Callable>(), ::std:: declval<_Ty1>(), ::std:: declval<_Types2>()...))> {};

template <class _Callable, class... _Args>
using _Select_invoke_traits = conditional_t<sizeof...(_Args) == 0, _Invoke_traits_zero<void, _Callable>,
    _Invoke_traits_nonzero<void, _Callable, _Args...>>;


template <class _Callable, class... _Args>
using _Invoke_result_t = typename _Select_invoke_traits<_Callable, _Args...>::type;

template <class _Rx, class _Callable, class... _Args>
using _Is_invocable_r_ = typename _Select_invoke_traits<_Callable, _Args...>::template _Is_invocable_r<_Rx>;

template <class _Rx, class _Callable, class... _Args>
struct _Is_invocable_r : _Is_invocable_r_<_Rx, _Callable, _Args...> {
     };

 template <class _Callable, class... _Args>
struct invoke_result : _Select_invoke_traits<_Callable, _Args...> {
     };

template <class _Callable, class... _Args>
using invoke_result_t = typename _Select_invoke_traits<_Callable, _Args...>::type;

 template <class _Callable, class... _Args>
struct is_invocable : _Select_invoke_traits<_Callable, _Args...>::_Is_invocable {
     };

template <class _Callable, class... _Args>
inline constexpr bool is_invocable_v = _Select_invoke_traits<_Callable, _Args...>::_Is_invocable::value;

 template <class _Callable, class... _Args>
struct is_nothrow_invocable : _Select_invoke_traits<_Callable, _Args...>::_Is_nothrow_invocable {
     };

template <class _Callable, class... _Args>
inline constexpr bool is_nothrow_invocable_v = _Select_invoke_traits<_Callable, _Args...>::_Is_nothrow_invocable::value;

 template <class _Rx, class _Callable, class... _Args>
struct is_invocable_r : _Is_invocable_r_<_Rx, _Callable, _Args...> {
     };

template <class _Rx, class _Callable, class... _Args>
inline constexpr bool is_invocable_r_v = _Is_invocable_r_<_Rx, _Callable, _Args...>::value;

 template <class _Rx, class _Callable, class... _Args>
struct is_nothrow_invocable_r : _Select_invoke_traits<_Callable, _Args...>::template _Is_nothrow_invocable_r<_Rx> {
     };

template <class _Rx, class _Callable, class... _Args>
inline constexpr bool is_nothrow_invocable_r_v =
    _Select_invoke_traits<_Callable, _Args...>::template _Is_nothrow_invocable_r<_Rx>::value;

 template <class _Ty1, class _Ty2>
struct is_layout_compatible : bool_constant<__is_layout_compatible(_Ty1, _Ty2)> {};

template <class _Ty1, class _Ty2>
inline constexpr bool is_layout_compatible_v = __is_layout_compatible(_Ty1, _Ty2);

 template <class _Base, class _Derived>
struct is_pointer_interconvertible_base_of : bool_constant<__is_pointer_interconvertible_base_of(_Base, _Derived)> {};

template <class _Base, class _Derived>
inline constexpr bool is_pointer_interconvertible_base_of_v = __is_pointer_interconvertible_base_of(_Base, _Derived);

 template <class _ClassTy, class _MemberTy>
 constexpr bool is_pointer_interconvertible_with_class(_MemberTy _ClassTy::*_Pm) noexcept {
    return __is_pointer_interconvertible_with_class(_ClassTy, _Pm);
}

 template <class _ClassTy1, class _ClassTy2, class _MemberTy1, class _MemberTy2>
 constexpr bool is_corresponding_member(_MemberTy1 _ClassTy1::*_Pm1, _MemberTy2 _ClassTy2::*_Pm2) noexcept {
    return __is_corresponding_member(_ClassTy1, _ClassTy2, _Pm1, _Pm2);
}

 template <class _Ty>
struct _Function_args {};  

template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };           template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };          template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };           template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };          template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };             template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };        template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };     template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };                                                 template <class _Ret, class... _Types>                                                                    struct _Function_args<_Ret CALL_OPT(_Types...) CV_OPT REF_OPT NOEXCEPT_OPT> : _Arg_types<_Types...> {         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                     };


template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                       template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                                 template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                              template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                        template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                                     template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                                template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                             template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                       template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                                    template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                               template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                            template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                      template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                              template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                        template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                     template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };               template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                             template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                       template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                    template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };              template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                            template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                      template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };                   template <class _Ret, class... _Types>                                                                          struct _Function_args<_Ret(_Types..., ...) CV_REF_NOEXCEPT_OPT> {           [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Ret _Unnameable_result;                                           };

template <class _Ty, class = void>
struct _Weak_result_type {};  
                 __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_result_type<_Ty, void_t<typename _Ty::result_type>> {      [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::result_type _Unnameable_result;
};


template <class _Ty, class = void>
struct _Weak_argument_type : _Weak_result_type<_Ty> {};  
                 __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_argument_type<_Ty, void_t<typename _Ty::argument_type>> : _Weak_result_type<_Ty> {
         [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::argument_type _Unnameable_argument;
};


template <class _Ty, class = void>
struct _Weak_binary_args : _Weak_argument_type<_Ty> {};  
                 __pragma(warning(disable : 4996))
template <class _Ty>
struct _Weak_binary_args<_Ty, void_t<typename _Ty::first_argument_type,
                                  typename _Ty::second_argument_type>>
    : _Weak_argument_type<_Ty> {      [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::first_argument_type _Unnameable_first_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef typename _Ty::second_argument_type _Unnameable_second_argument;
};


template <class _Ty>
using _Weak_types = conditional_t<is_function_v<remove_pointer_t<_Ty>>, _Function_args<remove_pointer_t<_Ty>>,
    conditional_t<is_member_function_pointer_v<_Ty>, _Is_memfunptr<remove_cv_t<_Ty>>, _Weak_binary_args<_Ty>>>;

 template <class _Ty>
void _Refwrap_ctor_fun(_Identity_t<_Ty&>) noexcept;
template <class _Ty>
void _Refwrap_ctor_fun(_Identity_t<_Ty&&>) = delete;

template <class _Ty, class _Uty, class = void>
struct _Refwrap_has_ctor_from : false_type {};

template <class _Ty, class _Uty>
struct _Refwrap_has_ctor_from<_Ty, _Uty, void_t<decltype(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))>> : true_type {};

template <class _Ty>
class reference_wrapper
{
public:
    static_assert(is_object_v<_Ty> || is_function_v<_Ty>,
        "reference_wrapper<T> requires T to be an object type or a function type.");

    using type = _Ty;

    template <class _Uty, enable_if_t<conjunction_v<negation<is_same<_Remove_cvref_t<_Uty>, reference_wrapper>>,
                                          _Refwrap_has_ctor_from<_Ty, _Uty>>,
                              int> = 0>
    constexpr reference_wrapper(_Uty&& _Val) noexcept(noexcept(_Refwrap_ctor_fun<_Ty>(::std:: declval<_Uty>()))) {
        _Ty& _Ref = static_cast<_Uty&&>(_Val);
        _Ptr      = ::std:: addressof(_Ref);
    }

    constexpr operator _Ty&() const noexcept {
        return *_Ptr;
    }

     constexpr _Ty& get() const noexcept {
        return *_Ptr;
    }

private:
    _Ty* _Ptr{};

public:
    template <class... _Types>
    constexpr auto operator()(_Types&&... _Args) const
        noexcept(noexcept(::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...)))          -> decltype(::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...)) {
        return ::std:: invoke(*_Ptr, static_cast<_Types&&>(_Args)...);
    }
};

template <class _Ty>
reference_wrapper(_Ty&) -> reference_wrapper<_Ty>;

 template <class _Ty>
 constexpr reference_wrapper<_Ty> ref(_Ty& _Val) noexcept {
    return reference_wrapper<_Ty>(_Val);
}

template <class _Ty>
void ref(const _Ty&&) = delete;

template <class _Ty>
 constexpr reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val) noexcept {
    return ::std:: ref(_Val.get());
}

template <class _Ty>
 constexpr reference_wrapper<const _Ty> cref(const _Ty& _Val) noexcept {
    return reference_wrapper<const _Ty>(_Val);
}

template <class _Ty>
void cref(const _Ty&&) = delete;

template <class _Ty>
 constexpr reference_wrapper<const _Ty> cref(reference_wrapper<_Ty> _Val) noexcept {
    return ::std:: cref(_Val.get());
}

 template <class _Ty>
struct unwrap_reference {
    using type = _Ty;
};
template <class _Ty>
struct unwrap_reference<reference_wrapper<_Ty>> {
    using type = _Ty&;
};
template <class _Ty>
using unwrap_reference_t = typename unwrap_reference<_Ty>::type;

 template <class _Ty>
using unwrap_ref_decay_t = unwrap_reference_t<decay_t<_Ty>>;
template <class _Ty>
struct unwrap_ref_decay {
    using type = unwrap_ref_decay_t<_Ty>;
};

 template <class _Ty>
struct _Is_swappable;

 template <class _Ty>
struct _Is_nothrow_swappable;

 template <class _Ty, enable_if_t<is_move_constructible_v<_Ty> && is_move_assignable_v<_Ty>, int> = 0>
constexpr void swap(_Ty&, _Ty&) noexcept(is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>);

template <class _Ty, size_t _Size, enable_if_t<_Is_swappable<_Ty>::value, int> = 0>
constexpr void swap(_Ty (&)[_Size], _Ty (&)[_Size]) noexcept(_Is_nothrow_swappable<_Ty>::value);

 template <class _Ty1, class _Ty2, class = void>
struct _Swappable_with_helper : false_type {};  
template <class _Ty1, class _Ty2>
struct _Swappable_with_helper<_Ty1, _Ty2, void_t<decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
    : true_type {};  
 template <class _Ty1, class _Ty2>
struct _Is_swappable_with
    : bool_constant<conjunction_v<_Swappable_with_helper<_Ty1, _Ty2>, _Swappable_with_helper<_Ty2, _Ty1>>> {
     };

 template <class _Ty>
struct _Is_swappable : _Is_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {
     };

 template <class _Ty1, class _Ty2>
struct _Swap_cannot_throw : bool_constant<noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))                                      && noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()))> {
          };

 template <class _Ty1, class _Ty2>
struct _Is_nothrow_swappable_with
    : bool_constant<conjunction_v<_Is_swappable_with<_Ty1, _Ty2>, _Swap_cannot_throw<_Ty1, _Ty2>>> {
          };

 template <class _Ty>
struct _Is_nothrow_swappable
    : _Is_nothrow_swappable_with<add_lvalue_reference_t<_Ty>, add_lvalue_reference_t<_Ty>>::type {
     };

 template <class _Ty1, class _Ty2>
struct is_swappable_with : _Is_swappable_with<_Ty1, _Ty2>::type {
          };

template <class _Ty1, class _Ty2>
inline constexpr bool is_swappable_with_v =
    conjunction_v<_Swappable_with_helper<_Ty1, _Ty2>, _Swappable_with_helper<_Ty2, _Ty1>>;

 template <class _Ty>
struct is_swappable : _Is_swappable<_Ty>::type {};  
template <class _Ty>
inline constexpr bool is_swappable_v = _Is_swappable<_Ty>::value;

 template <class _Ty1, class _Ty2>
struct is_nothrow_swappable_with : _Is_nothrow_swappable_with<_Ty1, _Ty2>::type {
          };

template <class _Ty1, class _Ty2>
inline constexpr bool is_nothrow_swappable_with_v = _Is_nothrow_swappable_with<_Ty1, _Ty2>::value;

 template <class _Ty>
struct is_nothrow_swappable : _Is_nothrow_swappable<_Ty>::type {
     };

template <class _Ty>
inline constexpr bool is_nothrow_swappable_v = _Is_nothrow_swappable<_Ty>::value;

 namespace _Has_ADL_swap_detail {
    void swap();  
    template <class, class = void>
    struct _Has_ADL_swap : false_type {};
    template <class _Ty>
    struct _Has_ADL_swap<_Ty, void_t<decltype(swap(::std:: declval<_Ty&>(), ::std:: declval<_Ty&>()))>> : true_type {};
}  using _Has_ADL_swap_detail::_Has_ADL_swap;

template <class _Ty>
inline constexpr bool _Is_trivially_swappable_v = conjunction_v<is_trivially_destructible<_Ty>,
    is_trivially_move_constructible<_Ty>, is_trivially_move_assignable<_Ty>, negation<_Has_ADL_swap<_Ty>>>;

template <class _Ty>
struct _Is_trivially_swappable : bool_constant<_Is_trivially_swappable_v<_Ty>> {
     };

 
   inline constexpr size_t _FNV_offset_basis = 14695981039346656037ULL;
inline constexpr size_t _FNV_prime        = 1099511628211ULL;

 inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char* const _First,
    const size_t _Count) noexcept {      for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
        _Val ^= static_cast<size_t>(_First[_Idx]);
        _Val *= _FNV_prime;
    }

    return _Val;
}

template <class _Ty>
 size_t _Fnv1a_append_range(const size_t _Val, const _Ty* const _First,
    const _Ty* const _Last) noexcept {      static_assert(is_trivial_v<_Ty>, "Only trivial types can be directly hashed.");
    const auto _Firstb = reinterpret_cast<const unsigned char*>(_First);
    const auto _Lastb  = reinterpret_cast<const unsigned char*>(_Last);
    return _Fnv1a_append_bytes(_Val, _Firstb, static_cast<size_t>(_Lastb - _Firstb));
}

template <class _Kty>
 size_t _Fnv1a_append_value(
    const size_t _Val, const _Kty& _Keyval) noexcept {      static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
    return _Fnv1a_append_bytes(_Val, &reinterpret_cast<const unsigned char&>(_Keyval), sizeof(_Kty));
}

 template <class _Kty>
 size_t _Hash_representation(const _Kty& _Keyval) noexcept {      return _Fnv1a_append_value(_FNV_offset_basis, _Keyval);
}

 template <class _Kty>
 size_t _Hash_array_representation(
    const _Kty* const _First, const size_t _Count) noexcept {      static_assert(is_trivial_v<_Kty>, "Only trivial types can be directly hashed.");
    return _Fnv1a_append_bytes(
        _FNV_offset_basis, reinterpret_cast<const unsigned char*>(_First), _Count * sizeof(_Kty));
}

 template <class _Kty>
struct hash;

template <class _Kty, bool _Enabled>
struct _Conditionally_enabled_hash {      [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef _Kty _Unnameable_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t _Unnameable_result;

     size_t operator()(const _Kty& _Keyval) const
        noexcept(noexcept(hash<_Kty>::_Do_hash(_Keyval)))   {
        return hash<_Kty>::_Do_hash(_Keyval);
    }
};

template <class _Kty>
struct _Conditionally_enabled_hash<_Kty, false> {      _Conditionally_enabled_hash()                                   = delete;
    _Conditionally_enabled_hash(const _Conditionally_enabled_hash&) = delete;
    _Conditionally_enabled_hash(_Conditionally_enabled_hash&&)      = delete;
    _Conditionally_enabled_hash& operator=(const _Conditionally_enabled_hash&) = delete;
    _Conditionally_enabled_hash& operator=(_Conditionally_enabled_hash&&) = delete;
};

 template <class _Kty>
struct hash
    : _Conditionally_enabled_hash<_Kty,
          !is_const_v<_Kty> && !is_volatile_v<_Kty> && (is_enum_v<_Kty> || is_integral_v<_Kty> || is_pointer_v<_Kty>)> {
         static size_t _Do_hash(const _Kty& _Keyval) noexcept {
        return _Hash_representation(_Keyval);
    }
};

template <>
struct hash<float> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef float _Unnameable_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t _Unnameable_result;
     size_t operator()(const float _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0F ? 0.0F : _Keyval);      }
};

template <>
struct hash<double> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef double _Unnameable_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t _Unnameable_result;
     size_t operator()(const double _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0 ? 0.0 : _Keyval);      }
};

template <>
struct hash<long double> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef long double _Unnameable_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t _Unnameable_result;
     size_t operator()(const long double _Keyval) const noexcept {
        return _Hash_representation(_Keyval == 0.0L ? 0.0L : _Keyval);      }
};

template <>
struct hash<nullptr_t> {
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef nullptr_t _Unnameable_argument;
    [[deprecated(                                                                                                         "warning STL4007: Many result_type typedefs and all argument_type, first_argument_type, and second_argument_type typedefs are deprecated in C++17. You can define _SILENCE_CXX17_ADAPTOR_TYPEDEFS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] typedef size_t _Unnameable_result;
     size_t operator()(nullptr_t) const noexcept {
        void* _Null{};
        return _Hash_representation(_Null);
    }
};

 template <class _Kty, class = void>
struct _Is_nothrow_hashable : false_type {};  
template <class _Kty>
struct _Is_nothrow_hashable<_Kty, void_t<decltype(hash<_Kty>{}(::std:: declval<const _Kty&>()))>>
    : bool_constant<noexcept(hash<_Kty>{}(::std:: declval<const _Kty&>()))> {};

 
template <class _FloatingType>
struct _Floating_type_traits;

template <>
struct _Floating_type_traits<float> {
    static constexpr int32_t _Mantissa_bits           = 24;      static constexpr int32_t _Exponent_bits           = 8;      static constexpr int32_t _Maximum_binary_exponent = 127;      static constexpr int32_t _Minimum_binary_exponent = -126;      static constexpr int32_t _Exponent_bias           = 127;
    static constexpr int32_t _Sign_shift              = 31;      static constexpr int32_t _Exponent_shift          = 23;  
    using _Uint_type = uint32_t;

    static constexpr uint32_t _Exponent_mask             = 0x000000FFu;      static constexpr uint32_t _Normal_mantissa_mask      = 0x00FFFFFFu;      static constexpr uint32_t _Denormal_mantissa_mask    = 0x007FFFFFu;      static constexpr uint32_t _Special_nan_mantissa_mask = 0x00400000u;      static constexpr uint32_t _Shifted_sign_mask         = 0x80000000u;      static constexpr uint32_t _Shifted_exponent_mask     = 0x7F800000u;  };

template <>
struct _Floating_type_traits<double> {
    static constexpr int32_t _Mantissa_bits           = 53;      static constexpr int32_t _Exponent_bits           = 11;      static constexpr int32_t _Maximum_binary_exponent = 1023;      static constexpr int32_t _Minimum_binary_exponent = -1022;      static constexpr int32_t _Exponent_bias           = 1023;
    static constexpr int32_t _Sign_shift              = 63;      static constexpr int32_t _Exponent_shift          = 52;  
    using _Uint_type = uint64_t;

    static constexpr uint64_t _Exponent_mask             = 0x00000000000007FFu;      static constexpr uint64_t _Normal_mantissa_mask      = 0x001FFFFFFFFFFFFFu;      static constexpr uint64_t _Denormal_mantissa_mask    = 0x000FFFFFFFFFFFFFu;      static constexpr uint64_t _Special_nan_mantissa_mask = 0x0008000000000000u;      static constexpr uint64_t _Shifted_sign_mask         = 0x8000000000000000u;      static constexpr uint64_t _Shifted_exponent_mask     = 0x7FF0000000000000u;  };

template <>
struct _Floating_type_traits<long double> : _Floating_type_traits<double> {};

 

}



 
  
 
  



namespace std {
 enum class errc {      address_family_not_supported       = 102,      address_in_use                     = 100,      address_not_available              = 101,      already_connected                  = 113,      argument_list_too_long             = 7,      argument_out_of_domain             = 33,      bad_address                        = 14,      bad_file_descriptor                = 9,      bad_message                        = 104,      broken_pipe                        = 32,      connection_aborted                 = 106,      connection_already_in_progress     = 103,      connection_refused                 = 107,      connection_reset                   = 108,      cross_device_link                  = 18,      destination_address_required       = 109,      device_or_resource_busy            = 16,      directory_not_empty                = 41,      executable_format_error            = 8,      file_exists                        = 17,      file_too_large                     = 27,      filename_too_long                  = 38,      function_not_supported             = 40,      host_unreachable                   = 110,      identifier_removed                 = 111,      illegal_byte_sequence              = 42,      inappropriate_io_control_operation = 25,      interrupted                        = 4,      invalid_argument                   = 22,      invalid_seek                       = 29,      io_error                           = 5,      is_a_directory                     = 21,      message_size                       = 115,      network_down                       = 116,      network_reset                      = 117,      network_unreachable                = 118,      no_buffer_space                    = 119,      no_child_process                   = 10,      no_link                            = 121,      no_lock_available                  = 39,      no_message_available               = 120,      no_message                         = 122,      no_protocol_option                 = 123,      no_space_on_device                 = 28,      no_stream_resources                = 124,      no_such_device_or_address          = 6,      no_such_device                     = 19,      no_such_file_or_directory          = 2,      no_such_process                    = 3,      not_a_directory                    = 20,      not_a_socket                       = 128,      not_a_stream                       = 125,      not_connected                      = 126,      not_enough_memory                  = 12,      not_supported                      = 129,      operation_canceled                 = 105,      operation_in_progress              = 112,      operation_not_permitted            = 1,      operation_not_supported            = 130,      operation_would_block              = 140,      owner_dead                         = 133,      permission_denied                  = 13,      protocol_error                     = 134,      protocol_not_supported             = 135,      read_only_file_system              = 30,      resource_deadlock_would_occur      = 36,      resource_unavailable_try_again     = 11,      result_out_of_range                = 34,      state_not_recoverable              = 127,      stream_timeout                     = 137,      text_file_busy                     = 139,      timed_out                          = 138,      too_many_files_open_in_system      = 23,      too_many_files_open                = 24,      too_many_links                     = 31,      too_many_symbolic_link_levels      = 114,      value_too_large                    = 132,      wrong_protocol_type                = 136  };

}







namespace std {
 enum class chars_format {
    scientific = 0b001,
    fixed      = 0b010,
    hex        = 0b100,
    general    = fixed | scientific,
};

 constexpr chars_format operator&(chars_format _Left, chars_format _Right) noexcept {           using _IntTy = ::std:: underlying_type_t<_BITMASK>;                                                                    return static_cast<_BITMASK>(static_cast<_IntTy>(_Left) & static_cast<_IntTy>(_Right));                         }                                                                                                                                                                                                                                        constexpr chars_format operator|(chars_format _Left, chars_format _Right) noexcept {           using _IntTy = ::std:: underlying_type_t<_BITMASK>;                                                                    return static_cast<_BITMASK>(static_cast<_IntTy>(_Left) | static_cast<_IntTy>(_Right));                         }                                                                                                                                                                                                                                        constexpr chars_format operator^(chars_format _Left, chars_format _Right) noexcept {           using _IntTy = ::std:: underlying_type_t<_BITMASK>;                                                                    return static_cast<_BITMASK>(static_cast<_IntTy>(_Left) ^ static_cast<_IntTy>(_Right));                         }                                                                                                                                                                                                                                       constexpr chars_format& operator&=(chars_format& _Left, chars_format _Right) noexcept {                  return _Left = _Left & _Right;                                                                                  }                                                                                                                                                                                                                                       constexpr chars_format& operator|=(chars_format& _Left, chars_format _Right) noexcept {                  return _Left = _Left | _Right;                                                                                  }                                                                                                                                                                                                                                       constexpr chars_format& operator^=(chars_format& _Left, chars_format _Right) noexcept {                  return _Left = _Left ^ _Right;                                                                                  }                                                                                                                                                                                                                                        constexpr chars_format operator~(chars_format _Left) noexcept {                                    using _IntTy = ::std:: underlying_type_t<_BITMASK>;                                                                    return static_cast<_BITMASK>(~static_cast<_IntTy>(_Left));                                                      }                                                                                                                                                                                                                                        constexpr bool _Bitmask_includes(                                                                            chars_format _Left, chars_format _Elements) noexcept {                         return (_Left & _Elements) != chars_format{};                                                                       }                                                                                                                                                                                                                                        constexpr bool _Bitmask_includes_all(                                                                        chars_format _Left, chars_format _Elements) noexcept {                          return (_Left & _Elements) == _Elements;                                                                        }

 struct to_chars_result {
    char* ptr;
    errc ec;
     friend bool operator==(const to_chars_result&, const to_chars_result&) = default;
};

}



 
  

  
 
      
      
       

 
  

 
  
 
  
 
  
 
  
 
  
 
  

 
  
 
  

 
  
       


namespace std {
  template <class _Ty1, class _Ty2>
concept _Same_impl =      is_same_v<_Ty1, _Ty2>;

template <class _Ty1, class _Ty2>
concept same_as = _Same_impl<_Ty1, _Ty2> && _Same_impl<_Ty2, _Ty1>;

 template <class _Derived, class _Base>
concept derived_from = __is_base_of(_Base, _Derived)
    && __is_convertible_to(const volatile _Derived*, const volatile _Base*);

 template <class _From, class _To>
concept convertible_to = __is_convertible_to(_From, _To)
    && requires(add_rvalue_reference_t<_From> (&_Fn)()) {
        static_cast<_To>(_Fn());
    };

 template <class _From, class _To>
concept _Implicitly_convertible_to = is_convertible_v<_From, _To>;

 template <class _Ty1, class _Ty2>
concept common_reference_with =
    requires {
        typename common_reference_t<_Ty1, _Ty2>;
        typename common_reference_t<_Ty2, _Ty1>;
    }
    && same_as<common_reference_t<_Ty1, _Ty2>, common_reference_t<_Ty2, _Ty1>>
    && convertible_to<_Ty1, common_reference_t<_Ty1, _Ty2>>
    && convertible_to<_Ty2, common_reference_t<_Ty1, _Ty2>>;

 template <class _Ty1, class _Ty2>
concept common_with =
    requires {
        typename common_type_t<_Ty1, _Ty2>;
        typename common_type_t<_Ty2, _Ty1>;
        requires same_as<common_type_t<_Ty1, _Ty2>, common_type_t<_Ty2, _Ty1>>;
        static_cast<common_type_t<_Ty1, _Ty2>>(::std:: declval<_Ty1>());
        static_cast<common_type_t<_Ty1, _Ty2>>(::std:: declval<_Ty2>());
    }
    && common_reference_with<add_lvalue_reference_t<const _Ty1>, add_lvalue_reference_t<const _Ty2>>
    && common_reference_with<add_lvalue_reference_t<common_type_t<_Ty1, _Ty2>>,
        common_reference_t<add_lvalue_reference_t<const _Ty1>, add_lvalue_reference_t<const _Ty2>>>;

 template <class _Ty>
concept integral = is_integral_v<_Ty>;

 template <class _Ty>
concept signed_integral = integral<_Ty> && static_cast<_Ty>(-1) < static_cast<_Ty>(0);

 template <class _Ty>
concept unsigned_integral = integral<_Ty> && !signed_integral<_Ty>;

 template <class _Ty>
concept floating_point = is_floating_point_v<_Ty>;

 template <class _LTy, class _RTy>
concept assignable_from = is_lvalue_reference_v<_LTy>
    && common_reference_with<const remove_reference_t<_LTy>&, const remove_reference_t<_RTy>&>
    && requires(_LTy _Left, _RTy&& _Right) {
        { _Left = static_cast<_RTy&&>(_Right) } -> same_as<_LTy>;
    };

 
 template <class _Ty>
concept destructible = __is_nothrow_destructible(_Ty);

 template <class _Ty, class... _ArgTys>
concept constructible_from = destructible<_Ty>
    && __is_constructible(_Ty, _ArgTys...);

 template <class _Ty>
concept default_initializable = constructible_from<_Ty>
    && requires {
        _Ty{};
        ::new (static_cast<void*>(nullptr)) _Ty;      };

 template <class _Ty>
concept move_constructible = constructible_from<_Ty, _Ty> && convertible_to<_Ty, _Ty>;

 template <class _Ty>
concept _Has_class_or_enum_type = __is_class(remove_reference_t<_Ty>) || __is_enum(remove_reference_t<_Ty>)
    || __is_union(remove_reference_t<_Ty>);

 namespace ranges {
    namespace _Swap {
        template <class _Ty>
        void swap(_Ty&, _Ty&) = delete;

        template <class _Ty1, class _Ty2>
        concept _Use_ADL_swap = (_Has_class_or_enum_type<_Ty1> || _Has_class_or_enum_type<_Ty2>)
            && requires(_Ty1&& __t, _Ty2&& __u) {
                swap(static_cast<_Ty1&&>(__t), static_cast<_Ty2&&>(__u));
            };

        struct _Cpo {
            template <class _Ty1, class _Ty2>
                requires _Use_ADL_swap<_Ty1, _Ty2>
            constexpr void operator()(_Ty1&& __t, _Ty2&& __u) const
                noexcept(noexcept(swap(static_cast<_Ty1&&>(__t), static_cast<_Ty2&&>(__u)))) {
                swap(static_cast<_Ty1&&>(__t), static_cast<_Ty2&&>(__u));
            }

            template <class _Ty>
                requires (!_Use_ADL_swap<_Ty&, _Ty&> && move_constructible<_Ty> && assignable_from<_Ty&, _Ty>)
            constexpr void operator()(_Ty& __x, _Ty& __y) const
                noexcept(is_nothrow_move_constructible_v<_Ty> && is_nothrow_move_assignable_v<_Ty>) {
                _Ty __tmp(static_cast<_Ty&&>(__x));
                __x = static_cast<_Ty&&>(__y);
                __y = static_cast<_Ty&&>(__tmp);
            }

            template <class _Ty1, class _Ty2, size_t _Size>
            constexpr void operator()(_Ty1 (&__t)[_Size], _Ty2 (&__u)[_Size]) const
                noexcept(noexcept((*this)(__t[0], __u[0])))
                requires requires { (*this)(__t[0], __u[0]); } {
                for (size_t __i = 0; __i < _Size; ++__i) {
                    (*this)(__t[__i], __u[__i]);
                }
            }
        };
    }  
    inline namespace _Cpos {
        inline constexpr _Swap::_Cpo swap;
    }
}  
 template <class _Ty>
concept swappable = requires(_Ty& __x, _Ty& __y) {
    ::std::ranges:: swap(__x, __y);
};

 template <class _Ty1, class _Ty2>
concept swappable_with = common_reference_with<_Ty1, _Ty2>
    && requires(_Ty1&& __t, _Ty2&& __u) {
        ::std::ranges:: swap(static_cast<_Ty1&&>(__t), static_cast<_Ty1&&>(__t));
        ::std::ranges:: swap(static_cast<_Ty2&&>(__u), static_cast<_Ty2&&>(__u));
        ::std::ranges:: swap(static_cast<_Ty1&&>(__t), static_cast<_Ty2&&>(__u));
        ::std::ranges:: swap(static_cast<_Ty2&&>(__u), static_cast<_Ty1&&>(__t));
    };

 template <class _Ty>
concept copy_constructible = move_constructible<_Ty>
    && constructible_from<_Ty, _Ty&> && convertible_to<_Ty&, _Ty>
    && constructible_from<_Ty, const _Ty&> && convertible_to<const _Ty&, _Ty>
    && constructible_from<_Ty, const _Ty> && convertible_to<const _Ty, _Ty>;

 template <class _Ty>
concept _Boolean_testable_impl = convertible_to<_Ty, bool>;

template <class _Ty>
concept _Boolean_testable = _Boolean_testable_impl<_Ty>
    && requires(_Ty&& __t) {
        { !static_cast<_Ty&&>(__t) } -> _Boolean_testable_impl;
    };

 template <class _Ty1, class _Ty2>
concept _Half_equality_comparable =
    requires(const remove_reference_t<_Ty1>& __x, const remove_reference_t<_Ty2>& __y) {
        { __x == __y } -> _Boolean_testable;
        { __x != __y } -> _Boolean_testable;
    };

template <class _Ty1, class _Ty2>
concept _Weakly_equality_comparable_with =
    _Half_equality_comparable<_Ty1, _Ty2> && _Half_equality_comparable<_Ty2, _Ty1>;

 template <class _Ty>
concept equality_comparable = _Half_equality_comparable<_Ty, _Ty>;

 template <class _Ty1, class _Ty2>
concept equality_comparable_with = equality_comparable<_Ty1> && equality_comparable<_Ty2>
    && common_reference_with<const remove_reference_t<_Ty1>&, const remove_reference_t<_Ty2>&>
    && equality_comparable<common_reference_t<const remove_reference_t<_Ty1>&, const remove_reference_t<_Ty2>&>>
    && _Weakly_equality_comparable_with<_Ty1, _Ty2>;

 template <class _Ty1, class _Ty2>
concept _Half_ordered = requires(const remove_reference_t<_Ty1>& __t, const remove_reference_t<_Ty2>& __u) {
    { __t <  __u } -> _Boolean_testable;
    { __t >  __u } -> _Boolean_testable;
    { __t <= __u } -> _Boolean_testable;
    { __t >= __u } -> _Boolean_testable;
};

template <class _Ty1, class _Ty2>
concept _Partially_ordered_with = _Half_ordered<_Ty1, _Ty2> && _Half_ordered<_Ty2, _Ty1>;

 template <class _Ty>
concept totally_ordered = equality_comparable<_Ty> && _Half_ordered<_Ty, _Ty>;

 template <class _Ty1, class _Ty2>
concept totally_ordered_with = totally_ordered<_Ty1> && totally_ordered<_Ty2>
    && equality_comparable_with<_Ty1, _Ty2>
    && totally_ordered<common_reference_t<const remove_reference_t<_Ty1>&, const remove_reference_t<_Ty2>&>>
    && _Partially_ordered_with<_Ty1, _Ty2>;

 template <class _Ty>
concept movable = is_object_v<_Ty>
    && move_constructible<_Ty>
    && assignable_from<_Ty&, _Ty>
    && swappable<_Ty>;

 template <class _Ty>
concept copyable = copy_constructible<_Ty>
    && movable<_Ty>
    && assignable_from<_Ty&, _Ty&>
    && assignable_from<_Ty&, const _Ty&>
    && assignable_from<_Ty&, const _Ty>;

 template <class _Ty>
concept semiregular = copyable<_Ty> && default_initializable<_Ty>;

 template <class _Ty>
concept regular = semiregular<_Ty> && equality_comparable<_Ty>;

 template <class _FTy, class... _ArgTys>
concept invocable = requires(_FTy&& _Fn, _ArgTys&&... _Args) {
    ::std:: invoke(static_cast<_FTy&&>(_Fn), static_cast<_ArgTys&&>(_Args)...);
};

 template <class _FTy, class... _ArgTys>
concept regular_invocable = invocable<_FTy, _ArgTys...>;

 template <class _FTy, class... _ArgTys>
concept predicate = regular_invocable<_FTy, _ArgTys...>
    && _Boolean_testable<invoke_result_t<_FTy, _ArgTys...>>;

 template <class _FTy, class _Ty1, class _Ty2>
concept relation =
       predicate<_FTy, _Ty1, _Ty1>
    && predicate<_FTy, _Ty2, _Ty2>
    && predicate<_FTy, _Ty1, _Ty2>
    && predicate<_FTy, _Ty2, _Ty1>;

 template <class _FTy, class _Ty1, class _Ty2>
concept equivalence_relation = relation<_FTy, _Ty1, _Ty2>;

 template <class _FTy, class _Ty1, class _Ty2>
concept strict_weak_order = relation<_FTy, _Ty1, _Ty2>;

 
 template <class _Ty>
struct _Choice_t {
    _Ty _Strategy  = _Ty{};
    bool _No_throw = false;
};

}



 
  
 
  

 
  
 
  

 

 
 

enum ISA_AVAILABILITY
{
    __ISA_AVAILABLE_X86   = 0,
    __ISA_AVAILABLE_SSE2  = 1,
    __ISA_AVAILABLE_SSE42 = 2,
    __ISA_AVAILABLE_AVX   = 3,
    __ISA_AVAILABLE_ENFSTRG = 4,
    __ISA_AVAILABLE_AVX2 = 5,
    __ISA_AVAILABLE_AVX512 = 6,

    __ISA_AVAILABLE_ARMNT   = 0,        __ISA_AVAILABLE_NEON    = 1,        __ISA_AVAILABLE_NEON_ARM64 = 2,                                     };


 
 


 
  
 
  
 
  
 
  

        
       


         extern "C" {





              


     





     
 
 

 

 


 


 


 





 




       
 unsigned int __cdecl _clearfp(void);


 __declspec(deprecated("This function or variable may be unsafe. Consider using _controlfp_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );



 void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


 errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


 unsigned int __cdecl _statusfp(void);


 void __cdecl _fpreset(void);




 unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );


  
 int* __cdecl __fpecode(void);


 
 int __cdecl __fpe_flt_rounds(void);




        double __cdecl _copysign(  double _Number,   double _Sign);
   double __cdecl _chgsign(  double _X);
   double __cdecl _scalb(  double _X,   long _Y);
   double __cdecl _logb(  double _X);
   double __cdecl _nextafter(  double _X,   double _Y);
   int    __cdecl _finite(  double _X);
   int    __cdecl _isnan(  double _X);
   int    __cdecl _fpclass(  double _X);

       float __cdecl _scalbf(  float _X,   long _Y);



     

    
     void __cdecl fpreset(void);



     













}                             

 
  
 
  

       
 
  
 
  

 
  
 
  

       
                
              
       


         extern "C" {






          

   
                 
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

                 
    
    __declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }










}                             




         extern "C" {

         typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;

 FILE* __cdecl __acrt_iob_func(unsigned _Ix);





                             
     wint_t __cdecl fgetwc(
          FILE* _Stream
        );

    
     wint_t __cdecl _fgetwchar(void);

    
     wint_t __cdecl fputwc(
             wchar_t _Character,
          FILE*   _Stream);

    
     wint_t __cdecl _fputwchar(
          wchar_t _Character
        );

     
     wint_t __cdecl getwc(
          FILE* _Stream
        );

     
     wint_t __cdecl getwchar(void);


    
     
     wchar_t* __cdecl fgetws(
          wchar_t* _Buffer,
                                  int      _BufferCount,
                               FILE*    _Stream
        );

    
     int __cdecl fputws(
           wchar_t const* _Buffer,
          FILE*          _Stream
        );

    
     
     wchar_t* __cdecl _getws_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                                     wchar_t* __cdecl _getws_s( wchar_t (&_Buffer)[_Size]) throw()                  {                                                                                                     return _getws_s(_Buffer, _Size);                                                                }                                                                                             }

    
     wint_t __cdecl putwc(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl putwchar(
          wchar_t _Character
        );

    
     int __cdecl _putws(
          wchar_t const* _Buffer
        );

    
     wint_t __cdecl ungetwc(
             wint_t _Character,
          FILE*  _Stream
        );

     
     FILE * __cdecl _wfdopen(
            int            _FileHandle,
          wchar_t const* _Mode
        );

      __declspec(deprecated("This function or variable may be unsafe. Consider using _wfopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     FILE* __cdecl _wfopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode
        );

    
     errno_t __cdecl _wfopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode
        );

     
    __declspec(deprecated("This function or variable may be unsafe. Consider using _wfreopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     FILE* __cdecl _wfreopen(
           wchar_t const* _FileName,
           wchar_t const* _Mode,
          FILE*          _OldStream
        );

    
     errno_t __cdecl _wfreopen_s(
          FILE**         _Stream,
                             wchar_t const* _FileName,
                             wchar_t const* _Mode,
                            FILE*          _OldStream
        );

     
     FILE* __cdecl _wfsopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
            int            _ShFlag
        );

     void __cdecl _wperror(
          wchar_t const* _ErrorMessage
        );


         
         FILE* __cdecl _wpopen(
              wchar_t const* _Command,
              wchar_t const* _Mode
            );


     int __cdecl _wremove(
          wchar_t const* _FileName
        );


     
     __declspec(allocator) wchar_t* __cdecl _wtempnam(
          wchar_t const* _Directory,
          wchar_t const* _FilePrefix
        );


     
    
     errno_t __cdecl _wtmpnam_s(
          wchar_t* _Buffer,
                                  size_t   _BufferCount
        );

    extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                                     errno_t __cdecl _wtmpnam_s( wchar_t (&_Buffer)[_Size]) throw()                  {                                                                                                     return _wtmpnam_s(_Buffer, _Size);                                                                }                                                                                             }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _wtmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           wchar_t* __cdecl _wtmpnam(   wchar_t *_Buffer);



                             
     wint_t __cdecl _fgetwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _fputwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _getwc_nolock(
          FILE* _Stream
        );

    
     wint_t __cdecl _putwc_nolock(
             wchar_t _Character,
          FILE*   _Stream
        );

    
     wint_t __cdecl _ungetwc_nolock(
             wint_t _Character,
          FILE*  _Stream
        );




     


                             
     int __cdecl __stdio_common_vfwprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __stdio_common_vfwprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vfwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vfwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vfwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
        {
            return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        }


    
    __inline int __cdecl _vfwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vfwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
        {
            return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }


    
    __inline int __cdecl _vwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _fwprintf_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl fwprintf(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _fwprintf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl fwprintf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    
    __inline int __cdecl _fwprintf_p_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _fwprintf_p(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _wprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl wprintf(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _wprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl wprintf_s(
                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    
    __inline int __cdecl _wprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _wprintf_p(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                             
     int __cdecl __stdio_common_vfwscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vfwscanf_l(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vfwscanf(
          FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vfwscanf_s_l(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vfwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
        {
            return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        }


    __inline int __cdecl _vwscanf_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vwscanf_s_l(
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
        {
            return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }


     __declspec(deprecated("This function or variable may be unsafe. Consider using _fwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _fwscanf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

      __declspec(deprecated("This function or variable may be unsafe. Consider using fwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl fwscanf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _fwscanf_s_l(
                                           FILE*          const _Stream,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl fwscanf_s(
                                     FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


     __declspec(deprecated("This function or variable may be unsafe. Consider using _wscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _wscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

      __declspec(deprecated("This function or variable may be unsafe. Consider using wscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl wscanf(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _wscanf_s_l(
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl wscanf_s(
                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                         
     
    
     int __cdecl __stdio_common_vswprintf(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_s(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vsnwprintf_s(
                                             unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
    
     int __cdecl __stdio_common_vswprintf_p(
                                             unsigned __int64 _Options,
                     wchar_t*         _Buffer,
                                             size_t           _BufferCount,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                     va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _snwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl _snwprintf(    wchar_t *_Buffer,                                            size_t _BufferCount,                     wchar_t const* _Format, ...);                 __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl _vsnwprintf(    wchar_t *_Buffer,                                            size_t _BufferCount,                     wchar_t const* _Format, va_list _Args);

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vsnwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )
    {
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

    extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                                    int __cdecl _vsnwprintf_s(            wchar_t (&_Buffer)[_Size],                            size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw()                 {                                                                                                                                                    return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList);                                                                                       }                                                                                                                                            }

     
    
    __inline int __cdecl _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vswprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl _vswprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
                                                          va_list              _ArgList
        )
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }

     
    
    __inline int __cdecl __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }

     
    
    __inline int __cdecl _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )
    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl vswprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )
    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }


         
        __inline int __cdecl vswprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )
        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }


    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                    int __cdecl vswprintf_s(            wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw()                 {                                                                                                                                    return vswprintf_s(_Buffer, _Size, _Format, _ArgList);                                                                               }                                                                                                                            }

     
    
    __inline int __cdecl _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
                                                      va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vswprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )
    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

     
     
    __inline int __cdecl _vscwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
     
    __inline int __cdecl _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vscwprintf_l(_Format, 0, _ArgList);
    }

     
     
    __inline int __cdecl _vscwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
     
    __inline int __cdecl _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vscwprintf_p_l(_Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swprintf_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl swprintf(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    __declspec(deprecated("This function or variable may be unsafe. Consider using __swprintf_l_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl __swprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,                                  _locale_t _Locale, ...);                 __declspec(deprecated("This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl __vswprintf_l(   wchar_t *_Buffer,     wchar_t const* _Format,                                  _locale_t _Locale, va_list _Args);

    __declspec(deprecated("This function or variable may be unsafe. Consider using swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl _swprintf(   wchar_t *_Buffer,         wchar_t const* _Format, ...);                 __declspec(deprecated("This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __inline          int __cdecl _vswprintf(   wchar_t *_Buffer,         wchar_t const* _Format, va_list _Args);

     
    
    __inline int __cdecl _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


         
        __inline int __cdecl swprintf_s(
               wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    extern "C++"                                                                                                                       {                                                                                                                                      template <size_t _Size>                                                                                                            inline                                                                                                                                      int __cdecl swprintf_s(            wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw()                              {                                                                                                                                      va_list _ArgList;                                                                                                                  ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));                                                                                                  return vswprintf_s(_Buffer, _Size, _Format, _ArgList);                                                                              }                                                                                                                              }

     
    
    __inline int __cdecl _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                               _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swprintf_p(
           wchar_t*       const _Buffer,
                                                   size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swprintf_c(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _snwprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snwprintf_l(
            wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snwprintf(
            wchar_t*       _Buffer,
                                                  size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                   _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snwprintf_s(
           wchar_t*       const _Buffer,
                                                       size_t         const _BufferCount,
                                                       size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    extern "C++"                                                                                                                                        {                                                                                                                                                       template <size_t _Size>                                                                                                                             inline                                                                                                                                                       int __cdecl _snwprintf_s(            wchar_t (&_Buffer)[_Size],                            size_t _BufferCount,     wchar_t const* _Format, ...) throw()                               {                                                                                                                                                       va_list _ArgList;                                                                                                                                   ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));                                                                                                                   return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList);                                                                                       }                                                                                                                                               }

     
    __inline int __cdecl _scwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     
    __inline int __cdecl _scwprintf(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     
    __inline int __cdecl _scwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     
    __inline int __cdecl _scwprintf_p(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                  

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using swprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
            inline int swprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
                _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using vswprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
            inline int __cdecl vswprintf(
                           wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                              va_list              _ArgList
                ) throw()
            {
                return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _swprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
            inline int _swprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                ...) throw()
            {
                int _Result;
                va_list _ArgList;
                ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
                _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
                ((void)(_ArgList = (va_list)0));
                return _Result;
            }

            extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using _vswprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
            inline int __cdecl _vswprintf_l(
                                     wchar_t*       const _Buffer,
                    wchar_t const* const _Format,
                                                 _locale_t      const _Locale,
                                                        va_list              _ArgList
                ) throw()
            {
                return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            }





                              
     int __cdecl __stdio_common_vswscanf(
                                            unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     
    
    __inline int __cdecl _vswscanf_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }

     
    
    __inline int __cdecl vswscanf(
                                 wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )
    {
        return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl _vswscanf_s_l(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                               _locale_t      const _Locale,
                                      va_list              _ArgList
        )
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }


         
        
        __inline int __cdecl vswscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )
        {
            return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }


    extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                    int __cdecl vswscanf_s(                         wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw()                 {                                                                                                                                    return vswscanf_s(_Buffer, _Size, _Format, _ArgList);                                                                               }                                                                                                                            }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }

     
    
    __inline int __cdecl _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
                                                 va_list              _ArgList
        )
    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _swscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _swscanf_l(
                                          wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t            _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using swscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl swscanf(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _swscanf_s_l(
                                            wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


         
        
        __inline int __cdecl swscanf_s(
                                      wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _snwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snwscanf_l(
                  wchar_t const* const _Buffer,
                                            size_t         const _BufferCount,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _snwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snwscanf(
            wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                              size_t         const _BufferCount,
            wchar_t const* const _Format,
                                          _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snwscanf_s(
             wchar_t const* const _Buffer,
                                       size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


}                             




         extern "C" {

 




 


 








 





typedef __int64 fpos_t;




    
     errno_t __cdecl _get_stream_buffer_pointers(
               FILE*   _Stream,
          char*** _Base,
          char*** _Pointer,
          int**   _Count
        );


                         
        
         errno_t __cdecl clearerr_s(
              FILE* _Stream
            );

        
         
         errno_t __cdecl fopen_s(
              FILE**      _Stream,
                                     char const* _FileName,
                                     char const* _Mode
            );

        
         
         size_t __cdecl fread_s(
                void*  _Buffer,
                                    size_t _BufferSize,
                                                                            size_t _ElementSize,
                                                                            size_t _ElementCount,
                                                                         FILE*  _Stream
            );

        
         errno_t __cdecl freopen_s(
              FILE**      _Stream,
                                 char const* _FileName,
                                 char const* _Mode,
                                FILE*       _OldStream
            );

         
         char* __cdecl gets_s(
              char*   _Buffer,
                               rsize_t _Size
            );

        
         errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );

         
        
         errno_t __cdecl tmpnam_s(
              char*   _Buffer,
                               rsize_t _Size
            );


     void __cdecl clearerr(
          FILE* _Stream
        );

     
    
     int __cdecl fclose(
          FILE* _Stream
        );

    
     int __cdecl _fcloseall(void);

     
     FILE* __cdecl _fdopen(
            int         _FileHandle,
          char const* _Mode
        );

     
     int __cdecl feof(
          FILE* _Stream
        );

     
     int __cdecl ferror(
          FILE* _Stream
        );

    
     int __cdecl fflush(
          FILE* _Stream
        );

     
    
     int __cdecl fgetc(
          FILE* _Stream
        );

    
     int __cdecl _fgetchar(void);

     
    
     int __cdecl fgetpos(
          FILE*   _Stream,
            fpos_t* _Position
        );

     
    
     char* __cdecl fgets(
          char* _Buffer,
                               int   _MaxCount,
                            FILE* _Stream
        );

     
     int __cdecl _fileno(
          FILE* _Stream
        );

    
     int __cdecl _flushall(void);

      __declspec(deprecated("This function or variable may be unsafe. Consider using fopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     FILE* __cdecl fopen(
          char const* _FileName,
          char const* _Mode
        );


     
    
     int __cdecl fputc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _fputchar(
          int _Character
        );

     
    
     int __cdecl fputs(
           char const* _Buffer,
          FILE*       _Stream
        );

    
     size_t __cdecl fread(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

     
      __declspec(deprecated("This function or variable may be unsafe. Consider using freopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     FILE* __cdecl freopen(
           char const* _FileName,
           char const* _Mode,
          FILE*       _Stream
        );

     
     FILE* __cdecl _fsopen(
          char const* _FileName,
          char const* _Mode,
            int         _ShFlag
        );

     
    
     int __cdecl fsetpos(
          FILE*         _Stream,
             fpos_t const* _Position
        );

     
    
     int __cdecl fseek(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

     
    
     int __cdecl _fseeki64(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     
     long __cdecl ftell(
          FILE* _Stream
        );

     
     
     __int64 __cdecl _ftelli64(
          FILE* _Stream
        );

    
     size_t __cdecl fwrite(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

     
     
     int __cdecl getc(
          FILE* _Stream
        );

     
     int __cdecl getchar(void);

     
     int __cdecl _getmaxstdio(void);

    extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            char* __cdecl gets_s(char (&_Buffer)[_Size]) throw()                  {                                                                                                     return gets_s(_Buffer, _Size);                                                                }                                                                                             }

     
     int __cdecl _getw(
          FILE* _Stream
        );

     void __cdecl perror(
          char const* _ErrorMessage
        );


         
        
         int __cdecl _pclose(
              FILE* _Stream
            );

         
         FILE* __cdecl _popen(
              char const* _Command,
              char const* _Mode
            );


     
    
     int __cdecl putc(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl putchar(
          int _Character
        );

    
     int __cdecl puts(
          char const* _Buffer
        );

     
    
     int __cdecl _putw(
             int   _Word,
          FILE* _Stream
        );

     int __cdecl remove(
          char const* _FileName
        );

     
     int __cdecl rename(
          char const* _OldFileName,
          char const* _NewFileName
        );

     int __cdecl _unlink(
          char const* _FileName
        );


        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _unlink. See online help for details."))
         int __cdecl unlink(
              char const* _FileName
            );


     void __cdecl rewind(
          FILE* _Stream
        );

    
     int __cdecl _rmtmp(void);

    __declspec(deprecated("This function or variable may be unsafe. Consider using setvbuf instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     void __cdecl setbuf(
                                                      FILE* _Stream,
            char* _Buffer
        );

    
     int __cdecl _setmaxstdio(
          int _Maximum
        );

     
    
     int __cdecl setvbuf(
                               FILE*  _Stream,
            char*  _Buffer,
                                  int    _Mode,
                                  size_t _Size
        );


     
     __declspec(allocator) char* __cdecl _tempnam(
          char const* _DirectoryName,
          char const* _FilePrefix
        );


      __declspec(deprecated("This function or variable may be unsafe. Consider using tmpfile_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
     FILE* __cdecl tmpfile(void);

    extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                                     errno_t __cdecl tmpnam_s( char (&_Buffer)[_Size]) throw()                  {                                                                                                     return tmpnam_s(_Buffer, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using tmpnam_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           char* __cdecl tmpnam(   char *_Buffer);

     
    
     int __cdecl ungetc(
             int   _Character,
          FILE* _Stream
        );



                              void __cdecl _lock_file(
          FILE* _Stream
        );

     void __cdecl _unlock_file(
          FILE* _Stream
        );

     
    
     int __cdecl _fclose_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fflush_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fgetc_nolock(
          FILE* _Stream
        );

     
    
     int __cdecl _fputc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     size_t __cdecl _fread_nolock(
          void*  _Buffer,
                                                      size_t _ElementSize,
                                                      size_t _ElementCount,
                                                   FILE*  _Stream
        );

    
     
     size_t __cdecl _fread_nolock_s(
          void*  _Buffer,
                              size_t _BufferSize,
                                                                      size_t _ElementSize,
                                                                      size_t _ElementCount,
                                                                   FILE*  _Stream
        );

    
     int __cdecl _fseek_nolock(
          FILE* _Stream,
             long  _Offset,
             int   _Origin
        );

    
     int __cdecl _fseeki64_nolock(
          FILE*   _Stream,
             __int64 _Offset,
             int     _Origin
        );

     
     long __cdecl _ftell_nolock(
          FILE* _Stream
        );

     
     __int64 __cdecl _ftelli64_nolock(
          FILE* _Stream
        );

    
     size_t __cdecl _fwrite_nolock(
          void const* _Buffer,
                                                    size_t      _ElementSize,
                                                    size_t      _ElementCount,
                                                 FILE*       _Stream
        );

    
     int __cdecl _getc_nolock(
          FILE* _Stream
        );

    
     int __cdecl _putc_nolock(
             int   _Character,
          FILE* _Stream
        );

    
     int __cdecl _ungetc_nolock(
             int   _Character,
          FILE* _Stream
        );







     int* __cdecl __p__commode(void);




     
                              int __cdecl __stdio_common_vfprintf(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     int __cdecl __stdio_common_vfprintf_s(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vfprintf_p(
                                             unsigned __int64 _Options,
                                          FILE*            _Stream,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vfprintf_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    {
        return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vfprintf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfprintf_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vfprintf_s_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    {
        return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vfprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
        {
            return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        }


    
    __inline int __cdecl _vfprintf_p_l(
           FILE*       const _Stream,
            char const* const _Format,
          _locale_t   const _Locale,
                 va_list           _ArgList
        )
    {
        return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vfprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vprintf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
        {
            return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        }


    
    __inline int __cdecl _vprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _fprintf_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl fprintf(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     int __cdecl _set_printf_count_output(
          int _Value
        );

     int __cdecl _get_printf_count_output(void);

    
    __inline int __cdecl _fprintf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl fprintf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    
    __inline int __cdecl _fprintf_p_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _fprintf_p(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _printf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl printf(
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _printf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl printf_s(
                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    
    __inline int __cdecl _printf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _printf_p(
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


                              int __cdecl __stdio_common_vfscanf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _Arglist
        );

    
    __inline int __cdecl _vfscanf_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()),
            _Stream, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vfscanf(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfscanf_l(_Stream, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vfscanf_s_l(
                                FILE*       const _Stream,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Stream, _Format, _Locale, _ArgList);
    }



        
        __inline int __cdecl vfscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )
        {
            return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        }


    
    __inline int __cdecl _vscanf_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vscanf_s_l(
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    }


        
        __inline int __cdecl vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )
        {
            return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        }


     __declspec(deprecated("This function or variable may be unsafe. Consider using _fscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _fscanf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

      __declspec(deprecated("This function or variable may be unsafe. Consider using fscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl fscanf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _fscanf_s_l(
                                           FILE*       const _Stream,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl fscanf_s(
                                     FILE*       const _Stream,
                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


     __declspec(deprecated("This function or variable may be unsafe. Consider using _scanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _scanf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

      __declspec(deprecated("This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl scanf(
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _scanf_s_l(
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl scanf_s(
                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }




                              
     int __cdecl __stdio_common_vsprintf(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_s(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsnprintf_s(
                                             unsigned __int64 _Options,
                 char*            _Buffer,
                                             size_t           _BufferCount,
                                             size_t           _MaxCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     int __cdecl __stdio_common_vsprintf_p(
                                             unsigned __int64 _Options,
                     char*            _Buffer,
                                             size_t           _BufferCount,
            char const*      _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vsnprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
                                                     va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsnprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )
    {
        return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }


     
    
    __inline int __cdecl vsnprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _vsprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vsprintf_l(
           char*       const _Buffer,
                                    char const* const _Format,
                                  _locale_t   const _Locale,
                                         va_list           _ArgList
        )
    {
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )
    {
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl _vsprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }


         
        
        __inline int __cdecl vsprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )
        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        }

        extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                                        int __cdecl vsprintf_s(            char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw()                 {                                                                                                                                    return vsprintf_s(_Buffer, _Size, _Format, _ArgList);                                                                               }                                                                                                                            }


     
    
    __inline int __cdecl _vsprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
                                                      va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )
    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

     
    
    __inline int __cdecl _vsnprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
                                                          va_list          _ArgList
        )
    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsnprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }

    extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                                    int __cdecl _vsnprintf_s(            char (&_Buffer)[_Size],                            size_t _BufferCount,     char const* _Format, va_list _ArgList) throw()                 {                                                                                                                                                    return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList);                                                                                       }                                                                                                                                            }


         
        
        __inline int __cdecl vsnprintf_s(
               char*       const _Buffer,
                                                           size_t      const _BufferCount,
                                                           size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )
        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        }

        extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                                        int __cdecl vsnprintf_s(            char (&_Buffer)[_Size],                            size_t _BufferCount,     char const* _Format, va_list _ArgList) throw()                 {                                                                                                                                                    return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList);                                                                                       }                                                                                                                                            }


    
    __inline int __cdecl _vscprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    __inline int __cdecl _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vscprintf_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vscprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) | (1ULL << 1),
            0, 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    __inline int __cdecl _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vscprintf_p_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
                                                va_list           _ArgList
        )
    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

     
    
    __inline int __cdecl _vsnprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )
    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _sprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    __declspec(deprecated("This function or variable may be unsafe. Consider using sprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           int __cdecl sprintf(   char *_Buffer,         char const* _Format, ...);                 __declspec(deprecated("This function or variable may be unsafe. Consider using vsprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           int __cdecl vsprintf(   char *_Buffer,         char const* _Format, va_list _Args);

     
    
    __inline int __cdecl _sprintf_s_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


         
        
        __inline int __cdecl sprintf_s(
               char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }


    extern "C++"                                                                                                                       {                                                                                                                                      template <size_t _Size>                                                                                                            inline                                                                                                                                      int __cdecl sprintf_s(            char (&_Buffer)[_Size],     char const* _Format, ...) throw()                              {                                                                                                                                      va_list _ArgList;                                                                                                                  ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));                                                                                                  return vsprintf_s(_Buffer, _Size, _Format, _ArgList);                                                                              }                                                                                                                              }

     
    
    __inline int __cdecl _sprintf_p_l(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                  char const* const _Format,
                                               _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _sprintf_p(
           char*       const _Buffer,
                                                   size_t      const _BufferCount,
                            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
     __declspec(deprecated("This function or variable may be unsafe. Consider using _snprintf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snprintf_l(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                 char const* const _Format,
                                              _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


     
    
    __inline int __cdecl snprintf(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snprintf(
            char*       const _Buffer,
                                                  size_t      const _BufferCount,
                           char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    __declspec(deprecated("This function or variable may be unsafe. Consider using _snprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           int __cdecl _snprintf(    char *_Buffer,                                            size_t _BufferCount,                     char const* _Format, ...);                 __declspec(deprecated("This function or variable may be unsafe. Consider using _vsnprintf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))           int __cdecl _vsnprintf(    char *_Buffer,                                            size_t _BufferCount,                     char const* _Format, va_list _Args);

     
    
    __inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snprintf_c(
          char*       const _Buffer,
                                    size_t      const _BufferCount,
             char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snprintf_s_l(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                      char const* const _Format,
                                                   _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    
    __inline int __cdecl _snprintf_s(
           char*       const _Buffer,
                                                       size_t      const _BufferCount,
                                                       size_t      const _MaxCount,
                                char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    extern "C++"                                                                                                                                        {                                                                                                                                                       template <size_t _Size>                                                                                                                             inline                                                                                                                                                       int __cdecl _snprintf_s(            char (&_Buffer)[_Size],                            size_t _BufferCount,     char const* _Format, ...) throw()                               {                                                                                                                                                       va_list _ArgList;                                                                                                                                   ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));                                                                                                                   return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList);                                                                                       }                                                                                                                                               }

    
    __inline int __cdecl _scprintf_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    __inline int __cdecl _scprintf(
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _scprintf_p_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     
    __inline int __cdecl _scprintf_p(
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

                              int __cdecl __stdio_common_vsscanf(
                                            unsigned __int64 _Options,
                  char const*      _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

    
    __inline int __cdecl _vsscanf_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl vsscanf(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )
    {
        return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vsscanf_s_l(
                                 char const* const _Buffer,
            char const* const _Format,
                               _locale_t   const _Locale,
                                      va_list           _ArgList
        )
    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }



        
        __inline int __cdecl vsscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )
        {
            return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
        }

        extern "C++"                                                                                                                     {                                                                                                                                    template <size_t _Size>                                                                                                          inline                                                                                                                           int __cdecl vsscanf_s(                         char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw()                 {                                                                                                                                    return vsscanf_s(_Buffer, _Size, _Format, _ArgList);                                                                               }                                                                                                                            }



     __declspec(deprecated("This function or variable may be unsafe. Consider using _sscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _sscanf_l(
                                          char const* const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

      __declspec(deprecated("This function or variable may be unsafe. Consider using sscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl sscanf(
                                char const* const _Buffer,
            char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _sscanf_s_l(
                                            char const* const _Buffer,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


        
        __inline int __cdecl sscanf_s(
                                      char const* const _Buffer,
                char const* const _Format,
            ...)
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

            _Result = vsscanf_s(_Buffer, _Format, _ArgList);

            ((void)(_ArgList = (va_list)0));
            return _Result;
        }



     __declspec(deprecated("This function or variable may be unsafe. Consider using _snscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snscanf_l(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     __declspec(deprecated("This function or variable may be unsafe. Consider using _snscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _snscanf(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                      char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


    
    __inline int __cdecl _snscanf_s_l(
              char const* const _Buffer,
                                              size_t      const _BufferCount,
            char const* const _Format,
                                          _locale_t   const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _snscanf_s(
            char const* const _Buffer,
                                            size_t      const _BufferCount,
                    char const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Buffer, _BufferCount, _Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }





                         


        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _tempnam. See online help for details."))
         char* __cdecl tempnam(
              char const* _Directory,
              char const* _FilePrefix
            );


         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fcloseall. See online help for details."))  int   __cdecl fcloseall(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fdopen. See online help for details."))     FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fgetchar. See online help for details."))   int   __cdecl fgetchar(void);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fileno. See online help for details."))     int   __cdecl fileno(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _flushall. See online help for details."))   int   __cdecl flushall(void);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _fputchar. See online help for details."))   int   __cdecl fputchar(  int _Ch);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _getw. See online help for details."))       int   __cdecl getw(  FILE* _Stream);
         __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _putw. See online help for details."))       int   __cdecl putw(  int _Ch,   FILE* _Stream);
              __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C and C++ conformant name: _rmtmp. See online help for details."))      int   __cdecl rmtmp(void);




}                             




 
 
namespace std {

using :: FILE;
using :: _Mbstatet;

using :: size_t;
using :: fpos_t;
using :: FILE;
using :: clearerr;
using :: fclose;
using :: feof;
using :: ferror;
using :: fflush;
using :: fgetc;
using :: fgetpos;
using :: fgets;
using :: fopen;
using :: fprintf;
using :: fputc;
using :: fputs;
using :: fread;
using :: freopen;
using :: fscanf;
using :: fseek;
using :: fsetpos;
using :: ftell;
using :: fwrite;
using :: getc;
using :: getchar;
using :: perror;
using :: putc;
using :: putchar;
using :: printf;
using :: puts;
using :: remove;
using :: rename;
using :: rewind;
using :: scanf;
using :: setbuf;
using :: setvbuf;
using :: sprintf;
using :: sscanf;
using :: tmpfile;
using :: tmpnam;
using :: ungetc;
using :: vfprintf;
using :: vprintf;
using :: vsprintf;

using :: snprintf;
using :: vsnprintf;
using :: vfscanf;
using :: vscanf;
using :: vsscanf;

}



         
                      
              


         extern "C" {





    
     
     errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                                    errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],                       size_t* _SizeRead) throw()                 {                                                                                                                    return _cgetws_s(_Buffer, _Size, _SizeRead);                                                                       }                                                                                                            }

    
     int __cdecl _cputws(
          wchar_t const* _Buffer
        );

           wint_t __cdecl _getwch  (void);
           wint_t __cdecl _getwche (void);
      wint_t __cdecl _putwch  (  wchar_t _Character);
      wint_t __cdecl _ungetwch(  wint_t  _Character);

           wint_t __cdecl _getwch_nolock  (void);
           wint_t __cdecl _getwche_nolock (void);
      wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
      wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



                             
     int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
     int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )
    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )
    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }



                             
     int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     __declspec(deprecated("This function or variable may be unsafe. Consider using _vcwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }

     __declspec(deprecated("This function or variable may be unsafe. Consider using _vcwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )
    {
        return _vcwscanf_l(_Format, 0, _ArgList);
    }

    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }

    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )
    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }

     __declspec(deprecated("This function or variable may be unsafe. Consider using _cwscanf_s_l instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

     __declspec(deprecated("This function or variable may be unsafe. Consider using _cwscanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));

        _Result = _vcwscanf_l(_Format, 0, _ArgList);

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }

    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_assert_va_start_is_not_reference<decltype(x)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }


}                             

        
       


         extern "C" {






  

     const unsigned short* __cdecl __pctype_func(void);
     const wctype_t*       __cdecl __pwctype_func(void);


 



        int __cdecl iswalnum  (  wint_t _C);
   int __cdecl iswalpha  (  wint_t _C);
   int __cdecl iswascii  (  wint_t _C);
   int __cdecl iswblank  (  wint_t _C);
   int __cdecl iswcntrl  (  wint_t _C);


   int __cdecl iswdigit  (  wint_t _C);

   int __cdecl iswgraph  (  wint_t _C);
   int __cdecl iswlower  (  wint_t _C);
   int __cdecl iswprint  (  wint_t _C);
   int __cdecl iswpunct  (  wint_t _C);
   int __cdecl iswspace  (  wint_t _C);
   int __cdecl iswupper  (  wint_t _C);
   int __cdecl iswxdigit (  wint_t _C);
   int __cdecl __iswcsymf(  wint_t _C);
   int __cdecl __iswcsym (  wint_t _C);

   int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
   int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


   wint_t __cdecl towupper(  wint_t _C);
   wint_t __cdecl towlower(  wint_t _C);
   int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

   wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
   wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
   int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);


       int __cdecl isleadbyte(  int _C);
       int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);



     


}                             

        
       


         extern "C" {


 
   
 __declspec(allocator) wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
 __declspec(allocator) wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );



 
 int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
 int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
 int __cdecl _wrmdir(
      wchar_t const* _Path
    );



}                             

        
               
       










         extern "C" {

     
typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;         __time32_t time_access;         __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;         __time32_t time_access;         __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;         __time64_t time_access;         __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;         __time64_t time_access;         __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};



     
 
 int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


 errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
 int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
 intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
 int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

 int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
 int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

 errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw()                  {                                                                                                     return _wmktemp_s(_TemplateName, _Size);                                                                }                                                                                             }

 
__declspec(deprecated("This function or variable may be unsafe. Consider using _wmktemp_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t* __cdecl _wmktemp(  wchar_t *_TemplateName);

 
 
 intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
 intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
 intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
 int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
 int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
 int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


 errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

 errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );




         extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
                 errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using _wsopen_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
                 errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }



}                             

        
       


         extern "C" {




         intptr_t __cdecl _wexecl(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wexecle(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wexeclp(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wexeclpe(
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wexecv(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

         intptr_t __cdecl _wexecve(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

         intptr_t __cdecl _wexecvp(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

         intptr_t __cdecl _wexecvpe(
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

         intptr_t __cdecl _wspawnl(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wspawnle(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wspawnlp(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wspawnlpe(
                int            _Mode,
              wchar_t const* _FileName,
              wchar_t const* _ArgList,
            ...);

         intptr_t __cdecl _wspawnv(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

         intptr_t __cdecl _wspawnve(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

         intptr_t __cdecl _wspawnvp(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList
            );

         intptr_t __cdecl _wspawnvpe(
                    int                   _Mode,
                  wchar_t const*        _FileName,
                  wchar_t const* const* _ArgList,
              wchar_t const* const* _Env
            );

         int __cdecl _wsystem(
              wchar_t const* _Command
            );




}                             

                                 
       


         extern "C" {



     struct tm
{
    int tm_sec;        int tm_min;        int tm_hour;       int tm_mday;       int tm_mon;        int tm_year;       int tm_wday;       int tm_yday;       int tm_isdst;  };


       __declspec(deprecated("This function or variable may be unsafe. Consider using _wasctime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 
 
 wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

 errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                                errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],                       struct tm const* _Time) throw()                 {                                                                                                                    return _wasctime_s(_Buffer, _Size, _Time);                                                                       }                                                                                                            }

 

 size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

 size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using _wctime32_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


 errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],                       __time32_t const* _Time) throw()                 {                                                                                                                    return _wctime32_s(_Buffer, _Size, _Time);                                                                       }                                                                                                            }

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using _wctime64_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))
 wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


 errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++"                                                                                                     {                                                                                                                    template <size_t _Size>                                                                                          inline                                                                                                           errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],                       __time64_t const* _Time) throw()                 {                                                                                                                    return _wctime64_s(_Buffer, _Size, _Time);                                                                       }                                                                                                            }


 errno_t __cdecl _wstrdate_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw()                  {                                                                                                     return _wstrdate_s(_Buffer, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wstrdate_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))      wchar_t* __cdecl _wstrdate(  wchar_t *_Buffer);


 errno_t __cdecl _wstrtime_s(
       wchar_t* _Buffer,
                                                                                size_t   _SizeInWords
    );

extern "C++"                                                                                      {                                                                                                     template <size_t _Size>                                                                           inline                                                                                            errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw()                  {                                                                                                     return _wstrtime_s(_Buffer, _Size);                                                                }                                                                                             }

__declspec(deprecated("This function or variable may be unsafe. Consider using _wstrtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))      wchar_t* __cdecl _wstrtime(  wchar_t *_Buffer);



     
         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }


}                             

       
              
       



    typedef unsigned short _ino_t;  
        typedef _ino_t ino_t;




    typedef unsigned int _dev_t;  
        typedef _dev_t dev_t;




    typedef long _off_t;  
        typedef _off_t off_t;





         extern "C" {

     struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};


    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };



     



     


 int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

 int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

 int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

 int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

 int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

 int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

 int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

 int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

 int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

 int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

 int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

 int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct  stat)  ==  sizeof(struct  _stat64i32)");
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct  stat)  ==  sizeof(struct  _stat64i32)");
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }


}                             

              


         extern "C" {






typedef wchar_t _Wint_t;




        
     wchar_t* __cdecl _wsetlocale(
                int            _Category,
          wchar_t const* _Locale
        );

    
     _locale_t __cdecl _wcreate_locale(
            int            _Category,
          wchar_t const* _Locale
        );



     wint_t __cdecl btowc(
          int _Ch
        );

     size_t __cdecl mbrlen(
            char const* _Ch,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

     size_t __cdecl mbrtowc(
                                  wchar_t*    _DstCh,
            char const* _SrcCh,
                                                    size_t      _SizeInBytes,
                                                 mbstate_t*  _State
        );

     
     errno_t __cdecl mbsrtowcs_s(
                                  size_t*      _Retval,
                  wchar_t*     _Dst,
                                       size_t       _Size,
                          char const** _PSrc,
                                       size_t       _N,
                                    mbstate_t*   _State
        );

    extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                                     errno_t __cdecl mbsrtowcs_s(                          size_t* _Retval,                            wchar_t (&_Dest)[_Size],     char const** _PSource,                                size_t _Count,                             mbstate_t* _State) throw()                  {                                                                                                                                                                     return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State);                                                                                                }                                                                                                                                                             }

    __declspec(deprecated("This function or variable may be unsafe. Consider using mbsrtowcs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))    size_t __cdecl mbsrtowcs(  wchar_t *_Dest,                   char const** _PSrc,                                size_t _Count,                             mbstate_t* _State);

     
     errno_t __cdecl wcrtomb_s(
                                 size_t*    _Retval,
          char*      _Dst,
                                      size_t     _SizeInBytes,
                                      wchar_t    _Ch,
                               mbstate_t* _State
        );

    extern "C++"                                                                                                                                     {                                                                                                                                                    template <size_t _Size>                                                                                                                          inline                                                                                                                                                    errno_t __cdecl wcrtomb_s(                  size_t* _Retval,   char (&_Dest)[_Size],                        wchar_t _Source,                 mbstate_t* _State) throw()                 {                                                                                                                                                    return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State);                                                                                       }                                                                                                                                            }

    __declspec(deprecated("This function or variable may be unsafe. Consider using wcrtomb_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcrtomb(    char *_Dest,                        wchar_t _Source,                mbstate_t* _State);

     
     errno_t __cdecl wcsrtombs_s(
                                                  size_t*         _Retval,
          char*           _Dst,
                                                       size_t          _SizeInBytes,
                                    wchar_t const** _Src,
                                                       size_t          _Size,
                                                mbstate_t*      _State
        );

    extern "C++"                                                                                                                                                      {                                                                                                                                                                     template <size_t _Size>                                                                                                                                           inline                                                                                                                                                                     errno_t __cdecl wcsrtombs_s(                  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,                        size_t _Count,                 mbstate_t* _State) throw()                  {                                                                                                                                                                     return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State);                                                                                                }                                                                                                                                                             }

    __declspec(deprecated("This function or variable may be unsafe. Consider using wcsrtombs_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcsrtombs(    char *_Dest,     wchar_t const** _PSource,                        size_t _Count,                 mbstate_t* _State);

     int __cdecl wctob(
          wint_t _WCh
        );


         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );


    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }


        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }




}                             




using _Mbstatet = mbstate_t;

namespace std {

using :: _Mbstatet;

using :: mbstate_t;
using :: size_t;
using :: tm;
using :: wint_t;

using :: btowc;
using :: fgetwc;
using :: fgetws;
using :: fputwc;
using :: fputws;
using :: fwide;
using :: fwprintf;
using :: fwscanf;
using :: getwc;
using :: getwchar;
using :: mbrlen;
using :: mbrtowc;
using :: mbsrtowcs;
using :: mbsinit;
using :: putwc;
using :: putwchar;
using :: swprintf;
using :: swscanf;
using :: ungetwc;
using :: vfwprintf;
using :: vswprintf;
using :: vwprintf;
using :: wcrtomb;
using :: wprintf;
using :: wscanf;
using :: wcsrtombs;
using :: wcstol;
using :: wcscat;
using :: wcschr;
using :: wcscmp;
using :: wcscoll;
using :: wcscpy;
using :: wcscspn;
using :: wcslen;
using :: wcsncat;
using :: wcsncmp;
using :: wcsncpy;
using :: wcspbrk;
using :: wcsrchr;
using :: wcsspn;
using :: wcstod;
using :: wcstoul;
using :: wcsstr;
using :: wcstok;
using :: wcsxfrm;
using :: wctob;
using :: wmemchr;
using :: wmemcmp;
using :: wmemcpy;
using :: wmemmove;
using :: wmemset;
using :: wcsftime;

using :: vfwscanf;
using :: vswscanf;
using :: vwscanf;
using :: wcstof;
using :: wcstold;
using :: wcstoll;
using :: wcstoull;

}



 

  
  



namespace std {
 enum float_denorm_style {      denorm_indeterminate = -1,
    denorm_absent        = 0,
    denorm_present       = 1
};

 enum float_round_style {      round_indeterminate       = -1,
    round_toward_zero         = 0,
    round_to_nearest          = 1,
    round_toward_infinity     = 2,
    round_toward_neg_infinity = 3
};

 struct _Num_base {      static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss          = false;
    static constexpr bool has_infinity             = false;
    static constexpr bool has_quiet_NaN            = false;
    static constexpr bool has_signaling_NaN        = false;
    static constexpr bool is_bounded               = false;
    static constexpr bool is_exact                 = false;
    static constexpr bool is_iec559                = false;
    static constexpr bool is_integer               = false;
    static constexpr bool is_modulo                = false;
    static constexpr bool is_signed                = false;
    static constexpr bool is_specialized           = false;
    static constexpr bool tinyness_before          = false;
    static constexpr bool traps                    = false;
    static constexpr float_round_style round_style = round_toward_zero;
    static constexpr int digits                    = 0;
    static constexpr int digits10                  = 0;
    static constexpr int max_digits10              = 0;
    static constexpr int max_exponent              = 0;
    static constexpr int max_exponent10            = 0;
    static constexpr int min_exponent              = 0;
    static constexpr int min_exponent10            = 0;
    static constexpr int radix                     = 0;
};

 template <class _Ty>
class numeric_limits : public _Num_base {  public:
     static constexpr _Ty(min)() noexcept {
        return _Ty();
    }

     static constexpr _Ty(max)() noexcept {
        return _Ty();
    }

     static constexpr _Ty lowest() noexcept {
        return _Ty();
    }

     static constexpr _Ty epsilon() noexcept {
        return _Ty();
    }

     static constexpr _Ty round_error() noexcept {
        return _Ty();
    }

     static constexpr _Ty denorm_min() noexcept {
        return _Ty();
    }

     static constexpr _Ty infinity() noexcept {
        return _Ty();
    }

     static constexpr _Ty quiet_NaN() noexcept {
        return _Ty();
    }

     static constexpr _Ty signaling_NaN() noexcept {
        return _Ty();
    }
};

template <class _Ty>
class numeric_limits<const _Ty> : public numeric_limits<_Ty> {};  
template <class _Ty>
class numeric_limits<volatile _Ty> : public numeric_limits<_Ty> {};  
template <class _Ty>
class numeric_limits<const volatile _Ty> : public numeric_limits<_Ty> {};  
 struct _Num_int_base : _Num_base {      static constexpr bool is_bounded     = true;
    static constexpr bool is_exact       = true;
    static constexpr bool is_integer     = true;
    static constexpr bool is_specialized = true;
    static constexpr int radix           = 2;
};

 struct _Num_float_base : _Num_base {      static constexpr float_denorm_style has_denorm = denorm_present;
    static constexpr bool has_infinity             = true;
    static constexpr bool has_quiet_NaN            = true;
    static constexpr bool has_signaling_NaN        = true;
    static constexpr bool is_bounded               = true;
    static constexpr bool is_iec559                = true;
    static constexpr bool is_signed                = true;
    static constexpr bool is_specialized           = true;
    static constexpr float_round_style round_style = round_to_nearest;
    static constexpr int radix                     = 2;
};

 template <>
class numeric_limits<bool> : public _Num_int_base {
public:
     static constexpr bool(min)() noexcept {
        return false;
    }

     static constexpr bool(max)() noexcept {
        return true;
    }

     static constexpr bool lowest() noexcept {
        return (min)();
    }

     static constexpr bool epsilon() noexcept {
        return 0;
    }

     static constexpr bool round_error() noexcept {
        return 0;
    }

     static constexpr bool denorm_min() noexcept {
        return 0;
    }

     static constexpr bool infinity() noexcept {
        return 0;
    }

     static constexpr bool quiet_NaN() noexcept {
        return 0;
    }

     static constexpr bool signaling_NaN() noexcept {
        return 0;
    }

    static constexpr int digits = 1;
};

 template <>
class numeric_limits<char> : public _Num_int_base {
public:
     static constexpr char(min)() noexcept {
        return (-128);
    }

     static constexpr char(max)() noexcept {
        return 127;
    }

     static constexpr char lowest() noexcept {
        return (min)();
    }

     static constexpr char epsilon() noexcept {
        return 0;
    }

     static constexpr char round_error() noexcept {
        return 0;
    }

     static constexpr char denorm_min() noexcept {
        return 0;
    }

     static constexpr char infinity() noexcept {
        return 0;
    }

     static constexpr char quiet_NaN() noexcept {
        return 0;
    }

     static constexpr char signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_signed = (-128) != 0;
    static constexpr bool is_modulo = (-128) == 0;
    static constexpr int digits     = 8 - ((-128) != 0);
    static constexpr int digits10   = 2;
};

 template <>
class numeric_limits<signed char> : public _Num_int_base {
public:
     static constexpr signed char(min)() noexcept {
        return (-128);
    }

     static constexpr signed char(max)() noexcept {
        return 127;
    }

     static constexpr signed char lowest() noexcept {
        return (min)();
    }

     static constexpr signed char epsilon() noexcept {
        return 0;
    }

     static constexpr signed char round_error() noexcept {
        return 0;
    }

     static constexpr signed char denorm_min() noexcept {
        return 0;
    }

     static constexpr signed char infinity() noexcept {
        return 0;
    }

     static constexpr signed char quiet_NaN() noexcept {
        return 0;
    }

     static constexpr signed char signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_signed = true;
    static constexpr int digits     = 7;
    static constexpr int digits10   = 2;
};

 template <>
class numeric_limits<unsigned char> : public _Num_int_base {
public:
     static constexpr unsigned char(min)() noexcept {
        return 0;
    }

     static constexpr unsigned char(max)() noexcept {
        return 0xff;
    }

     static constexpr unsigned char lowest() noexcept {
        return (min)();
    }

     static constexpr unsigned char epsilon() noexcept {
        return 0;
    }

     static constexpr unsigned char round_error() noexcept {
        return 0;
    }

     static constexpr unsigned char denorm_min() noexcept {
        return 0;
    }

     static constexpr unsigned char infinity() noexcept {
        return 0;
    }

     static constexpr unsigned char quiet_NaN() noexcept {
        return 0;
    }

     static constexpr unsigned char signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 8;
    static constexpr int digits10   = 2;
};

 template <>
class numeric_limits<char8_t> : public _Num_int_base {
public:
     static constexpr char8_t(min)() noexcept {
        return 0;
    }

     static constexpr char8_t(max)() noexcept {
        return 0xff;
    }

     static constexpr char8_t lowest() noexcept {
        return 0;
    }

     static constexpr char8_t epsilon() noexcept {
        return 0;
    }

     static constexpr char8_t round_error() noexcept {
        return 0;
    }

     static constexpr char8_t denorm_min() noexcept {
        return 0;
    }

     static constexpr char8_t infinity() noexcept {
        return 0;
    }

     static constexpr char8_t quiet_NaN() noexcept {
        return 0;
    }

     static constexpr char8_t signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 8;
    static constexpr int digits10   = 2;
};

 template <>
class numeric_limits<char16_t> : public _Num_int_base {
public:
     static constexpr char16_t(min)() noexcept {
        return 0;
    }

     static constexpr char16_t(max)() noexcept {
        return 0xffff;
    }

     static constexpr char16_t lowest() noexcept {
        return (min)();
    }

     static constexpr char16_t epsilon() noexcept {
        return 0;
    }

     static constexpr char16_t round_error() noexcept {
        return 0;
    }

     static constexpr char16_t denorm_min() noexcept {
        return 0;
    }

     static constexpr char16_t infinity() noexcept {
        return 0;
    }

     static constexpr char16_t quiet_NaN() noexcept {
        return 0;
    }

     static constexpr char16_t signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 16;
    static constexpr int digits10   = 4;
};

 template <>
class numeric_limits<char32_t> : public _Num_int_base {
public:
     static constexpr char32_t(min)() noexcept {
        return 0;
    }

     static constexpr char32_t(max)() noexcept {
        return 0xffffffff;
    }

     static constexpr char32_t lowest() noexcept {
        return (min)();
    }

     static constexpr char32_t epsilon() noexcept {
        return 0;
    }

     static constexpr char32_t round_error() noexcept {
        return 0;
    }

     static constexpr char32_t denorm_min() noexcept {
        return 0;
    }

     static constexpr char32_t infinity() noexcept {
        return 0;
    }

     static constexpr char32_t quiet_NaN() noexcept {
        return 0;
    }

     static constexpr char32_t signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 32;
    static constexpr int digits10   = 9;
};

 template <>
class numeric_limits<wchar_t> : public _Num_int_base {
public:
     static constexpr wchar_t(min)() noexcept {
        return 0x0000;
    }

     static constexpr wchar_t(max)() noexcept {
        return 0xffff;
    }

     static constexpr wchar_t lowest() noexcept {
        return (min)();
    }

     static constexpr wchar_t epsilon() noexcept {
        return 0;
    }

     static constexpr wchar_t round_error() noexcept {
        return 0;
    }

     static constexpr wchar_t denorm_min() noexcept {
        return 0;
    }

     static constexpr wchar_t infinity() noexcept {
        return 0;
    }

     static constexpr wchar_t quiet_NaN() noexcept {
        return 0;
    }

     static constexpr wchar_t signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 16;
    static constexpr int digits10   = 4;
};

 template <>
class numeric_limits<short> : public _Num_int_base {
public:
     static constexpr short(min)() noexcept {
        return (-32768);
    }

     static constexpr short(max)() noexcept {
        return 32767;
    }

     static constexpr short lowest() noexcept {
        return (min)();
    }

     static constexpr short epsilon() noexcept {
        return 0;
    }

     static constexpr short round_error() noexcept {
        return 0;
    }

     static constexpr short denorm_min() noexcept {
        return 0;
    }

     static constexpr short infinity() noexcept {
        return 0;
    }

     static constexpr short quiet_NaN() noexcept {
        return 0;
    }

     static constexpr short signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_signed = true;
    static constexpr int digits     = 15;
    static constexpr int digits10   = 4;
};

 template <>
class numeric_limits<int> : public _Num_int_base {
public:
     static constexpr int(min)() noexcept {
        return (-2147483647 - 1);
    }

     static constexpr int(max)() noexcept {
        return 2147483647;
    }

     static constexpr int lowest() noexcept {
        return (min)();
    }

     static constexpr int epsilon() noexcept {
        return 0;
    }

     static constexpr int round_error() noexcept {
        return 0;
    }

     static constexpr int denorm_min() noexcept {
        return 0;
    }

     static constexpr int infinity() noexcept {
        return 0;
    }

     static constexpr int quiet_NaN() noexcept {
        return 0;
    }

     static constexpr int signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_signed = true;
    static constexpr int digits     = 31;
    static constexpr int digits10   = 9;
};

 template <>
class numeric_limits<long> : public _Num_int_base {
public:
     static constexpr long(min)() noexcept {
        return (-2147483647L - 1);
    }

     static constexpr long(max)() noexcept {
        return 2147483647L;
    }

     static constexpr long lowest() noexcept {
        return (min)();
    }

     static constexpr long epsilon() noexcept {
        return 0;
    }

     static constexpr long round_error() noexcept {
        return 0;
    }

     static constexpr long denorm_min() noexcept {
        return 0;
    }

     static constexpr long infinity() noexcept {
        return 0;
    }

     static constexpr long quiet_NaN() noexcept {
        return 0;
    }

     static constexpr long signaling_NaN() noexcept {
        return 0;
    }

    static_assert(sizeof(int) == sizeof(long), "LLP64 assumption");
    static constexpr bool is_signed = true;
    static constexpr int digits     = 31;
    static constexpr int digits10   = 9;
};

 template <>
class numeric_limits<long long> : public _Num_int_base {
public:
     static constexpr long long(min)() noexcept {
        return (-9223372036854775807i64 - 1);
    }

     static constexpr long long(max)() noexcept {
        return 9223372036854775807i64;
    }

     static constexpr long long lowest() noexcept {
        return (min)();
    }

     static constexpr long long epsilon() noexcept {
        return 0;
    }

     static constexpr long long round_error() noexcept {
        return 0;
    }

     static constexpr long long denorm_min() noexcept {
        return 0;
    }

     static constexpr long long infinity() noexcept {
        return 0;
    }

     static constexpr long long quiet_NaN() noexcept {
        return 0;
    }

     static constexpr long long signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_signed = true;
    static constexpr int digits     = 63;
    static constexpr int digits10   = 18;
};

 template <>
class numeric_limits<unsigned short> : public _Num_int_base {
public:
     static constexpr unsigned short(min)() noexcept {
        return 0;
    }

     static constexpr unsigned short(max)() noexcept {
        return 0xffff;
    }

     static constexpr unsigned short lowest() noexcept {
        return (min)();
    }

     static constexpr unsigned short epsilon() noexcept {
        return 0;
    }

     static constexpr unsigned short round_error() noexcept {
        return 0;
    }

     static constexpr unsigned short denorm_min() noexcept {
        return 0;
    }

     static constexpr unsigned short infinity() noexcept {
        return 0;
    }

     static constexpr unsigned short quiet_NaN() noexcept {
        return 0;
    }

     static constexpr unsigned short signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 16;
    static constexpr int digits10   = 4;
};

 template <>
class numeric_limits<unsigned int> : public _Num_int_base {
public:
     static constexpr unsigned int(min)() noexcept {
        return 0;
    }

     static constexpr unsigned int(max)() noexcept {
        return 0xffffffff;
    }

     static constexpr unsigned int lowest() noexcept {
        return (min)();
    }

     static constexpr unsigned int epsilon() noexcept {
        return 0;
    }

     static constexpr unsigned int round_error() noexcept {
        return 0;
    }

     static constexpr unsigned int denorm_min() noexcept {
        return 0;
    }

     static constexpr unsigned int infinity() noexcept {
        return 0;
    }

     static constexpr unsigned int quiet_NaN() noexcept {
        return 0;
    }

     static constexpr unsigned int signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 32;
    static constexpr int digits10   = 9;
};

 template <>
class numeric_limits<unsigned long> : public _Num_int_base {
public:
     static constexpr unsigned long(min)() noexcept {
        return 0;
    }

     static constexpr unsigned long(max)() noexcept {
        return 0xffffffffUL;
    }

     static constexpr unsigned long lowest() noexcept {
        return (min)();
    }

     static constexpr unsigned long epsilon() noexcept {
        return 0;
    }

     static constexpr unsigned long round_error() noexcept {
        return 0;
    }

     static constexpr unsigned long denorm_min() noexcept {
        return 0;
    }

     static constexpr unsigned long infinity() noexcept {
        return 0;
    }

     static constexpr unsigned long quiet_NaN() noexcept {
        return 0;
    }

     static constexpr unsigned long signaling_NaN() noexcept {
        return 0;
    }

    static_assert(sizeof(unsigned int) == sizeof(unsigned long), "LLP64 assumption");
    static constexpr bool is_modulo = true;
    static constexpr int digits     = 32;
    static constexpr int digits10   = 9;
};

 template <>
class numeric_limits<unsigned long long> : public _Num_int_base {
public:
     static constexpr unsigned long long(min)() noexcept {
        return 0;
    }

     static constexpr unsigned long long(max)() noexcept {
        return 0xffffffffffffffffui64;
    }

     static constexpr unsigned long long lowest() noexcept {
        return (min)();
    }

     static constexpr unsigned long long epsilon() noexcept {
        return 0;
    }

     static constexpr unsigned long long round_error() noexcept {
        return 0;
    }

     static constexpr unsigned long long denorm_min() noexcept {
        return 0;
    }

     static constexpr unsigned long long infinity() noexcept {
        return 0;
    }

     static constexpr unsigned long long quiet_NaN() noexcept {
        return 0;
    }

     static constexpr unsigned long long signaling_NaN() noexcept {
        return 0;
    }

    static constexpr bool is_modulo = true;
    static constexpr int digits     = 64;
    static constexpr int digits10   = 19;
};

 template <>
class numeric_limits<float> : public _Num_float_base {
public:
     static constexpr float(min)() noexcept {
        return 1.175494351e-38F;
    }

     static constexpr float(max)() noexcept {
        return 3.402823466e+38F;
    }

     static constexpr float lowest() noexcept {
        return -(max)();
    }

     static constexpr float epsilon() noexcept {
        return 1.192092896e-07F;
    }

     static constexpr float round_error() noexcept {
        return 0.5F;
    }

     static constexpr float denorm_min() noexcept {
        return 1.401298464e-45F;
    }

     static constexpr float infinity() noexcept {
        return __builtin_huge_valf();
    }

     static constexpr float quiet_NaN() noexcept {
        return __builtin_nanf("0");
    }

     static constexpr float signaling_NaN() noexcept {
        return __builtin_nansf("1");
    }

    static constexpr int digits         = 24;
    static constexpr int digits10       = 6;
    static constexpr int max_digits10   = 9;
    static constexpr int max_exponent   = 128;
    static constexpr int max_exponent10 = 38;
    static constexpr int min_exponent   = (-125);
    static constexpr int min_exponent10 = (-37);
};

 template <>
class numeric_limits<double> : public _Num_float_base {
public:
     static constexpr double(min)() noexcept {
        return 2.2250738585072014e-308;
    }

     static constexpr double(max)() noexcept {
        return 1.7976931348623158e+308;
    }

     static constexpr double lowest() noexcept {
        return -(max)();
    }

     static constexpr double epsilon() noexcept {
        return 2.2204460492503131e-016;
    }

     static constexpr double round_error() noexcept {
        return 0.5;
    }

     static constexpr double denorm_min() noexcept {
        return 4.9406564584124654e-324;
    }

     static constexpr double infinity() noexcept {
        return __builtin_huge_val();
    }

     static constexpr double quiet_NaN() noexcept {
        return __builtin_nan("0");
    }

     static constexpr double signaling_NaN() noexcept {
        return __builtin_nans("1");
    }

    static constexpr int digits         = 53;
    static constexpr int digits10       = 15;
    static constexpr int max_digits10   = 17;
    static constexpr int max_exponent   = 1024;
    static constexpr int max_exponent10 = 308;
    static constexpr int min_exponent   = (-1021);
    static constexpr int min_exponent10 = (-307);
};

 template <>
class numeric_limits<long double> : public _Num_float_base {
public:
     static constexpr long double(min)() noexcept {
        return 2.2250738585072014e-308;
    }

     static constexpr long double(max)() noexcept {
        return 1.7976931348623158e+308;
    }

     static constexpr long double lowest() noexcept {
        return -(max)();
    }

     static constexpr long double epsilon() noexcept {
        return 2.2204460492503131e-016;
    }

     static constexpr long double round_error() noexcept {
        return 0.5L;
    }

     static constexpr long double denorm_min() noexcept {
        return 4.9406564584124654e-324;
    }

     static constexpr long double infinity() noexcept {
        return __builtin_huge_val();
    }

     static constexpr long double quiet_NaN() noexcept {
        return __builtin_nan("0");
    }

     static constexpr long double signaling_NaN() noexcept {
        return __builtin_nans("1");
    }

    static constexpr int digits         = 53;
    static constexpr int digits10       = 15;
    static constexpr int max_digits10   = 17;
    static constexpr int max_exponent   = 1024;
    static constexpr int max_exponent10 = 308;
    static constexpr int min_exponent   = (-1021);
    static constexpr int min_exponent10 = (-307);
};

   template <class _Ty>
 constexpr int _Countl_zero_fallback(_Ty _Val) noexcept {
    _Ty _Yy = 0;

    unsigned int _Nn = numeric_limits<_Ty>::digits;
    unsigned int _Cc = numeric_limits<_Ty>::digits / 2;
    do {
        _Yy = static_cast<_Ty>(_Val >> _Cc);
        if (_Yy != 0) {
            _Nn -= _Cc;
            _Val = _Yy;
        }
        _Cc >>= 1;
    } while (_Cc != 0);
    return static_cast<int>(_Nn) - static_cast<int>(_Val);
}

   template <class _Ty>
 constexpr int _Countr_zero_fallback(const _Ty _Val) noexcept {
    constexpr int _Digits = std::numeric_limits<_Ty>::digits;
    return _Digits - _Countl_zero_fallback(static_cast<_Ty>(static_cast<_Ty>(~_Val) & static_cast<_Ty>(_Val - 1)));
}

extern "C" {
extern int __isa_available;
}

template <class _Ty>
 int _Checked_x86_x64_countr_zero(const _Ty _Val) noexcept {
    constexpr int _Digits = numeric_limits<_Ty>::digits;
    constexpr _Ty _Max    = (numeric_limits<_Ty>::max)();

                   if constexpr (_Digits > 16) {
        const bool _Definitely_have_tzcnt = __isa_available >= __ISA_AVAILABLE_AVX2;
        if (!_Definitely_have_tzcnt && _Val == 0) {
            return _Digits;
        }
    }

    if constexpr (_Digits <= 32) {
                                   return static_cast<int>(_tzcnt_u32(static_cast<unsigned int>(~_Max | _Val)));
    } else {
        return static_cast<int>(_tzcnt_u64(_Val));
    }
}

template <class _Ty>
constexpr bool _Is_standard_unsigned_integer =
    _Is_any_of_v<remove_cv_t<_Ty>, unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>;

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr int _Countr_zero(const _Ty _Val) noexcept {
    if (!::std:: is_constant_evaluated()) {
        return _Checked_x86_x64_countr_zero(_Val);
    }
         return _Countr_zero_fallback(_Val);
}

}

 
  



namespace std {

template <class _To, class _From,
    enable_if_t<conjunction_v<bool_constant<sizeof(_To) == sizeof(_From)>, is_trivially_copyable<_To>,
                    is_trivially_copyable<_From>>,
        int> = 0>
 constexpr _To bit_cast(const _From& _Val) noexcept {
    return __builtin_bit_cast(_To, _Val);
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr int countl_zero(_Ty _Val) noexcept;

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr bool has_single_bit(const _Ty _Val) noexcept {
    return _Val != 0 && (_Val & (_Val - 1)) == 0;
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr _Ty bit_ceil(const _Ty _Val) noexcept   {
    if (_Val == 0) {
        return 1;
    }

    return static_cast<_Ty>(_Ty{1} << (numeric_limits<_Ty>::digits - ::std:: countl_zero(static_cast<_Ty>(_Val - 1))));
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr _Ty bit_floor(const _Ty _Val) noexcept {
    if (_Val == 0) {
        return 0;
    }

    return static_cast<_Ty>(_Ty{1} << (numeric_limits<_Ty>::digits - 1 - ::std:: countl_zero(_Val)));
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr _Ty bit_width(const _Ty _Val) noexcept {
    return static_cast<_Ty>(numeric_limits<_Ty>::digits - ::std:: countl_zero(_Val));
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr _Ty rotr(_Ty _Val, int _Rotation) noexcept;

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr _Ty rotl(const _Ty _Val, const int _Rotation) noexcept {
    constexpr auto _Digits = numeric_limits<_Ty>::digits;
    const auto _Remainder  = _Rotation % _Digits;
    if (_Remainder > 0) {
        return static_cast<_Ty>(
            static_cast<_Ty>(_Val << _Remainder) | static_cast<_Ty>(_Val >> (_Digits - _Remainder)));
    } else if (_Remainder == 0) {
        return _Val;
    } else {          return ::std:: rotr(_Val, -_Remainder);
    }
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> _Enabled>
 constexpr _Ty rotr(const _Ty _Val, const int _Rotation) noexcept {
    constexpr auto _Digits = numeric_limits<_Ty>::digits;
    const auto _Remainder  = _Rotation % _Digits;
    if (_Remainder > 0) {
        return static_cast<_Ty>(
            static_cast<_Ty>(_Val >> _Remainder) | static_cast<_Ty>(_Val << (_Digits - _Remainder)));
    } else if (_Remainder == 0) {
        return _Val;
    } else {          return ::std:: rotl(_Val, -_Remainder);
    }
}

  template <class _Ty>
 constexpr int _Popcount_fallback(_Ty _Val) noexcept {
    constexpr int _Digits = numeric_limits<_Ty>::digits;
         _Val = static_cast<_Ty>(_Val - ((_Val >> 1) & static_cast<_Ty>(0x5555'5555'5555'5555ull)));
    _Val = static_cast<_Ty>((_Val & static_cast<_Ty>(0x3333'3333'3333'3333ull))
                            + ((_Val >> 2) & static_cast<_Ty>(0x3333'3333'3333'3333ull)));
    _Val = static_cast<_Ty>((_Val + (_Val >> 4)) & static_cast<_Ty>(0x0F0F'0F0F'0F0F'0F0Full));
    for (int _Shift_digits = 8; _Shift_digits < _Digits; _Shift_digits <<= 1) {
        _Val = static_cast<_Ty>(_Val + static_cast<_Ty>(_Val >> _Shift_digits));
    }
         return static_cast<int>(_Val & static_cast<_Ty>(_Digits + _Digits - 1));
}


extern "C" {
extern int __isa_available;
}

template <class _Ty>
 int _Countl_zero_lzcnt(const _Ty _Val) noexcept {
    constexpr int _Digits = numeric_limits<_Ty>::digits;

    if constexpr (_Digits <= 16) {
        return static_cast<int>(__lzcnt16(_Val) - (16 - _Digits));
    } else if constexpr (_Digits == 32) {
        return static_cast<int>(__lzcnt(_Val));
    } else {
        return static_cast<int>(__lzcnt64(_Val));
    }
}

template <class _Ty>
 int _Countl_zero_bsr(const _Ty _Val) noexcept {
    constexpr int _Digits = numeric_limits<_Ty>::digits;

    unsigned long _Result;
    if constexpr (_Digits <= 32) {
        if (!_BitScanReverse(&_Result, _Val)) {
            return _Digits;
        }
    } else {
        if (!_BitScanReverse64(&_Result, _Val)) {
            return _Digits;
        }
    }
    return static_cast<int>(_Digits - 1 - _Result);
}

template <class _Ty>
 int _Checked_x86_x64_countl_zero(const _Ty _Val) noexcept {
    const bool _Definitely_have_lzcnt = __isa_available >= __ISA_AVAILABLE_AVX2;
    if (_Definitely_have_lzcnt) {
        return _Countl_zero_lzcnt(_Val);
    } else {
        return _Countl_zero_bsr(_Val);
    }
}

template <class _Ty>
 int _Checked_x86_x64_popcount(const _Ty _Val) noexcept {
    constexpr int _Digits = numeric_limits<_Ty>::digits;
    const bool _Definitely_have_popcnt = __isa_available >= __ISA_AVAILABLE_SSE42;
    if (!_Definitely_have_popcnt) {
        return _Popcount_fallback(_Val);
    }

    if constexpr (_Digits <= 16) {
        return static_cast<int>(__popcnt16(_Val));
    } else if constexpr (_Digits == 32) {
        return static_cast<int>(__popcnt(_Val));
    } else {
        return static_cast<int>(__popcnt64(_Val));
    }
}



template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> _Enabled>
 constexpr int countl_zero(const _Ty _Val) noexcept {
    if (!::std:: is_constant_evaluated()) {
        return _Checked_x86_x64_countl_zero(_Val);
    }

    return _Countl_zero_fallback(_Val);
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr int countl_one(const _Ty _Val) noexcept {
    return ::std:: countl_zero(static_cast<_Ty>(~_Val));
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> = 0>
 constexpr int countr_zero(const _Ty _Val) noexcept {
    return _Countr_zero(_Val);
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> _Enabled = 0>
 constexpr int countr_one(const _Ty _Val) noexcept {
    return _Countr_zero(static_cast<_Ty>(~_Val));
}

template <class _Ty, enable_if_t<_Is_standard_unsigned_integer<_Ty>, int> _Enabled = 0>
 constexpr int popcount(const _Ty _Val) noexcept {
    if (!::std:: is_constant_evaluated()) {
        return _Checked_x86_x64_popcount(_Val);
    }
    return _Popcount_fallback(_Val);
}

enum class endian { little = 0, big = 1, native = little };

}

 
  



namespace std {
using _Literal_zero = decltype(nullptr);
using _Compare_t    = signed char;

 enum class _Compare_eq : _Compare_t { equal = 0, equivalent = equal };
enum class _Compare_ord : _Compare_t { less = -1, greater = 1 };
enum class _Compare_ncmp : _Compare_t { unordered = -128 };

 struct partial_ordering {
    static const partial_ordering less;
    static const partial_ordering equivalent;
    static const partial_ordering greater;
    static const partial_ordering unordered;

     friend constexpr bool operator==(const partial_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value == 0;
    }

     friend constexpr bool operator==(partial_ordering, partial_ordering) noexcept = default;

     friend constexpr bool operator<(const partial_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value == static_cast<_Compare_t>(_Compare_ord::less);
    }

     friend constexpr bool operator>(const partial_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value > 0;
    }

     friend constexpr bool operator<=(const partial_ordering _Val, _Literal_zero) noexcept {
                                   return static_cast<signed char>(0 - static_cast<unsigned int>(_Val._Value)) >= 0;
    }

     friend constexpr bool operator>=(const partial_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value >= 0;
    }

     friend constexpr bool operator<(_Literal_zero, const partial_ordering _Val) noexcept {
        return _Val > 0;
    }

     friend constexpr bool operator>(_Literal_zero, const partial_ordering _Val) noexcept {
        return _Val < 0;
    }

     friend constexpr bool operator<=(_Literal_zero, const partial_ordering _Val) noexcept {
        return _Val >= 0;
    }

     friend constexpr bool operator>=(_Literal_zero, const partial_ordering _Val) noexcept {
        return _Val <= 0;
    }

     friend constexpr partial_ordering operator<=>(const partial_ordering _Val, _Literal_zero) noexcept {
        return _Val;
    }

     friend constexpr partial_ordering operator<=>(_Literal_zero, const partial_ordering _Val) noexcept {
                                   return {static_cast<_Compare_t>(0 - static_cast<unsigned int>(_Val._Value))};
    }

    _Compare_t _Value;
};

inline constexpr partial_ordering partial_ordering::less{static_cast<_Compare_t>(_Compare_ord::less)};
inline constexpr partial_ordering partial_ordering::equivalent{static_cast<_Compare_t>(_Compare_eq::equivalent)};
inline constexpr partial_ordering partial_ordering::greater{static_cast<_Compare_t>(_Compare_ord::greater)};
inline constexpr partial_ordering partial_ordering::unordered{static_cast<_Compare_t>(_Compare_ncmp::unordered)};

 struct weak_ordering {
    static const weak_ordering less;
    static const weak_ordering equivalent;
    static const weak_ordering greater;

    constexpr operator partial_ordering() const noexcept {
        return {static_cast<_Compare_t>(_Value)};
    }

     friend constexpr bool operator==(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value == 0;
    }

     friend constexpr bool operator==(weak_ordering, weak_ordering) noexcept = default;

     friend constexpr bool operator<(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value < 0;
    }

     friend constexpr bool operator>(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value > 0;
    }

     friend constexpr bool operator<=(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value <= 0;
    }

     friend constexpr bool operator>=(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value >= 0;
    }

     friend constexpr bool operator<(_Literal_zero, const weak_ordering _Val) noexcept {
        return _Val > 0;
    }

     friend constexpr bool operator>(_Literal_zero, const weak_ordering _Val) noexcept {
        return _Val < 0;
    }

     friend constexpr bool operator<=(_Literal_zero, const weak_ordering _Val) noexcept {
        return _Val >= 0;
    }

     friend constexpr bool operator>=(_Literal_zero, const weak_ordering _Val) noexcept {
        return _Val <= 0;
    }

     friend constexpr weak_ordering operator<=>(const weak_ordering _Val, _Literal_zero) noexcept {
        return _Val;
    }

     friend constexpr weak_ordering operator<=>(_Literal_zero, const weak_ordering _Val) noexcept {
        return {static_cast<_Compare_t>(-_Val._Value)};
    }

    _Compare_t _Value;
};

inline constexpr weak_ordering weak_ordering::less{static_cast<_Compare_t>(_Compare_ord::less)};
inline constexpr weak_ordering weak_ordering::equivalent{static_cast<_Compare_t>(_Compare_eq::equivalent)};
inline constexpr weak_ordering weak_ordering::greater{static_cast<_Compare_t>(_Compare_ord::greater)};

 struct strong_ordering {
    static const strong_ordering less;
    static const strong_ordering equal;
    static const strong_ordering equivalent;
    static const strong_ordering greater;

    constexpr operator partial_ordering() const noexcept {
        return {static_cast<_Compare_t>(_Value)};
    }

    constexpr operator weak_ordering() const noexcept {
        return {static_cast<_Compare_t>(_Value)};
    }

     friend constexpr bool operator==(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value == 0;
    }

     friend constexpr bool operator==(strong_ordering, strong_ordering) noexcept = default;

     friend constexpr bool operator<(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value < 0;
    }

     friend constexpr bool operator>(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value > 0;
    }

     friend constexpr bool operator<=(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value <= 0;
    }

     friend constexpr bool operator>=(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val._Value >= 0;
    }

     friend constexpr bool operator<(_Literal_zero, const strong_ordering _Val) noexcept {
        return _Val > 0;
    }

     friend constexpr bool operator>(_Literal_zero, const strong_ordering _Val) noexcept {
        return _Val < 0;
    }

     friend constexpr bool operator<=(_Literal_zero, const strong_ordering _Val) noexcept {
        return _Val >= 0;
    }

     friend constexpr bool operator>=(_Literal_zero, const strong_ordering _Val) noexcept {
        return _Val <= 0;
    }

     friend constexpr strong_ordering operator<=>(const strong_ordering _Val, _Literal_zero) noexcept {
        return _Val;
    }

     friend constexpr strong_ordering operator<=>(_Literal_zero, const strong_ordering _Val) noexcept {
        return {static_cast<_Compare_t>(-_Val._Value)};
    }

    _Compare_t _Value;
};

inline constexpr strong_ordering strong_ordering::less{static_cast<_Compare_t>(_Compare_ord::less)};
inline constexpr strong_ordering strong_ordering::equal{static_cast<_Compare_t>(_Compare_eq::equal)};
inline constexpr strong_ordering strong_ordering::equivalent{static_cast<_Compare_t>(_Compare_eq::equivalent)};
inline constexpr strong_ordering strong_ordering::greater{static_cast<_Compare_t>(_Compare_ord::greater)};

  constexpr bool is_eq(const partial_ordering _Comp) noexcept {
    return _Comp == 0;
}

  constexpr bool is_neq(const partial_ordering _Comp) noexcept {
    return _Comp != 0;
}

  constexpr bool is_lt(const partial_ordering _Comp) noexcept {
    return _Comp < 0;
}

  constexpr bool is_lteq(const partial_ordering _Comp) noexcept {
    return _Comp <= 0;
}

  constexpr bool is_gt(const partial_ordering _Comp) noexcept {
    return _Comp > 0;
}

  constexpr bool is_gteq(const partial_ordering _Comp) noexcept {
    return _Comp >= 0;
}

 enum _Comparison_category : unsigned char {
    _Comparison_category_none    = 1,
    _Comparison_category_partial = 2,
    _Comparison_category_weak    = 4,
    _Comparison_category_strong  = 0,
};

template <class... _Types>
inline constexpr unsigned char _Classify_category =
    _Comparison_category{(_Classify_category<_Types> | ... | _Comparison_category_strong)};
template <class _Ty>
inline constexpr unsigned char _Classify_category<_Ty> = _Comparison_category_none;
template <>
inline constexpr unsigned char _Classify_category<partial_ordering> = _Comparison_category_partial;
template <>
inline constexpr unsigned char _Classify_category<weak_ordering> = _Comparison_category_weak;
template <>
inline constexpr unsigned char _Classify_category<strong_ordering> = _Comparison_category_strong;

template <class... _Types>
using common_comparison_category_t =
    conditional_t<(_Classify_category<_Types...> & _Comparison_category_none) != 0, void,
        conditional_t<(_Classify_category<_Types...> & _Comparison_category_partial) != 0, partial_ordering,
            conditional_t<(_Classify_category<_Types...> & _Comparison_category_weak) != 0, weak_ordering,
                strong_ordering>>>;

template <class... _Types>
struct common_comparison_category {
    using type = common_comparison_category_t<_Types...>;
};

 template <class _Ty, class _Cat>
concept _Compares_as = same_as<common_comparison_category_t<_Ty, _Cat>, _Cat>;

template <class _Ty, class _Cat = partial_ordering>
concept three_way_comparable = _Half_equality_comparable<_Ty, _Ty> && _Half_ordered<_Ty, _Ty>
    && requires(const remove_reference_t<_Ty>& __a, const remove_reference_t<_Ty>& __b) {
        { __a <=> __b } -> _Compares_as<_Cat>;
    };

template <class _Ty1, class _Ty2, class _Cat = partial_ordering>
concept three_way_comparable_with = three_way_comparable<_Ty1, _Cat> && three_way_comparable<_Ty2, _Cat>
    && common_reference_with<const remove_reference_t<_Ty1>&, const remove_reference_t<_Ty2>&>
    && three_way_comparable<common_reference_t<const remove_reference_t<_Ty1>&, const remove_reference_t<_Ty2>&>, _Cat>
    && _Weakly_equality_comparable_with<_Ty1, _Ty2> && _Partially_ordered_with<_Ty1, _Ty2>
    && requires(const remove_reference_t<_Ty1>& __t, const remove_reference_t<_Ty2>& __u) {
        { __t <=> __u } -> _Compares_as<_Cat>;
        { __u <=> __t } -> _Compares_as<_Cat>;
    };

template <class _Ty1, class _Ty2 = _Ty1>
using compare_three_way_result_t =
    decltype(::std:: declval<const remove_reference_t<_Ty1>&>() <=> ::std:: declval<const remove_reference_t<_Ty2>&>());

template <class _Ty1, class _Ty2 = _Ty1>
struct compare_three_way_result {};

template <class _Ty1, class _Ty2>
    requires requires { typename compare_three_way_result_t<_Ty1, _Ty2>; }
struct compare_three_way_result<_Ty1, _Ty2> {
    using type = compare_three_way_result_t<_Ty1, _Ty2>;
};

struct compare_three_way {
    template <class _Ty1, class _Ty2>
        requires three_way_comparable_with<_Ty1, _Ty2>       constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
        noexcept(noexcept(::std:: forward<_Ty1>(_Left) <=> ::std:: forward<_Ty2>(_Right)))   {
        return ::std:: forward<_Ty1>(_Left) <=> ::std:: forward<_Ty2>(_Right);
    }

    using is_transparent = int;
};
 
 struct _Synth_three_way {
         template <class _Ty1, class _Ty2>
     constexpr auto operator()(const _Ty1& _Left, const _Ty2& _Right) const
    requires requires {
        { _Left < _Right } -> _Boolean_testable;
        { _Right < _Left } -> _Boolean_testable;
    }
         {
        if constexpr (three_way_comparable_with<_Ty1, _Ty2>) {
            return _Left <=> _Right;
        } else {
            if (_Left < _Right) {
                return weak_ordering::less;
            } else if (_Right < _Left) {
                return weak_ordering::greater;
            } else {
                return weak_ordering::equivalent;
            }
        }
    }
};

 template <class _Ty1, class _Ty2 = _Ty1>
using _Synth_three_way_result = decltype(_Synth_three_way{}(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()));

 
 namespace _Strong_order {
    void strong_order();  
    template <class _Ty1, class _Ty2>
    concept _Has_ADL = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<strong_ordering>(  strong_order(_Left, _Right));
    };

    template <class _Ty1, class _Ty2>
    concept _Can_compare_three_way = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<strong_ordering>(compare_three_way{}(_Left, _Right));
    };

    class _Cpo {
    private:
        enum class _St { _None, _Adl, _Floating, _Three };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Adl, noexcept(static_cast<strong_ordering>(
                                         strong_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else if constexpr (floating_point<decay_t<_Ty1>>) {
                return {_St::_Floating, true};
            } else if constexpr (_Can_compare_three_way<_Ty1, _Ty2>) {
                return {_St::_Three, noexcept(static_cast<strong_ordering>(
                                         compare_three_way{}(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr strong_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Adl) {
                return static_cast<strong_ordering>(  strong_order(_Left, _Right));
            } else if constexpr (_Strat == _St::_Floating) {
                using _Floating_type = decay_t<_Ty1>;
                using _Traits        = _Floating_type_traits<_Floating_type>;
                using _Uint_type     = typename _Traits::_Uint_type;
                using _Sint_type     = make_signed_t<_Uint_type>;

                const auto _Left_uint  = ::std:: bit_cast<_Uint_type>(_Left);
                const auto _Right_uint = ::std:: bit_cast<_Uint_type>(_Right);

                                 if (_Left_uint == _Right_uint) {
                    return strong_ordering::equal;
                }

                                 const _Uint_type _Left_shifted_sign  = _Left_uint & _Traits::_Shifted_sign_mask;
                const _Uint_type _Right_shifted_sign = _Right_uint & _Traits::_Shifted_sign_mask;

                                                                   const _Uint_type _Left_sign  = _Left_shifted_sign >> _Traits::_Sign_shift;
                const _Uint_type _Right_sign = _Right_shifted_sign >> _Traits::_Sign_shift;

                const _Uint_type _Left_xor  = _Left_shifted_sign - _Left_sign;
                const _Uint_type _Right_xor = _Right_shifted_sign - _Right_sign;

                const _Uint_type _Left_ones_complement_uint  = _Left_uint ^ _Left_xor;
                const _Uint_type _Right_ones_complement_uint = _Right_uint ^ _Right_xor;

                const auto _Left_ones_complement  = static_cast<_Sint_type>(_Left_ones_complement_uint);
                const auto _Right_ones_complement = static_cast<_Sint_type>(_Right_ones_complement_uint);

                                 return _Left_ones_complement <=> _Right_ones_complement;
            } else if constexpr (_Strat == _St::_Three) {
                return static_cast<strong_ordering>(compare_three_way{}(_Left, _Right));
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Strong_order::_Cpo strong_order;
}

 namespace _Weak_order {
    void weak_order();  
    template <class _Ty1, class _Ty2>
    concept _Has_ADL = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<weak_ordering>(  weak_order(_Left, _Right));
    };

    template <class _Ty1, class _Ty2>
    concept _Can_compare_three_way = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<weak_ordering>(compare_three_way{}(_Left, _Right));
    };

         void strong_order();  
    class _Cpo {
    private:
        enum class _St { _None, _Adl, _Floating, _Three, _Strong };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Adl, noexcept(static_cast<weak_ordering>(
                                         weak_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else if constexpr (floating_point<decay_t<_Ty1>>) {
                return {_St::_Floating, true};
            } else if constexpr (_Can_compare_three_way<_Ty1, _Ty2>) {
                return {_St::_Three, noexcept(static_cast<weak_ordering>(
                                         compare_three_way{}(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else if constexpr (_Strong_order::_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Strong, noexcept(static_cast<weak_ordering>(static_cast<strong_ordering>(
                                            strong_order(
                                              ::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))))};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr weak_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Adl) {
                return static_cast<weak_ordering>(  weak_order(_Left, _Right));
            } else if constexpr (_Strat == _St::_Floating) {
                using _Floating_type = decay_t<_Ty1>;
                using _Traits        = _Floating_type_traits<_Floating_type>;
                using _Uint_type     = typename _Traits::_Uint_type;
                using _Sint_type     = make_signed_t<_Uint_type>;

                auto _Left_uint  = ::std:: bit_cast<_Uint_type>(_Left);
                auto _Right_uint = ::std:: bit_cast<_Uint_type>(_Right);

                                 if (_Left_uint == _Right_uint) {
                    return weak_ordering::equivalent;
                }

                                 const _Uint_type _Left_shifted_sign  = _Left_uint & _Traits::_Shifted_sign_mask;
                const _Uint_type _Right_shifted_sign = _Right_uint & _Traits::_Shifted_sign_mask;

                                                  constexpr _Uint_type _Infinity_plus_one = _Traits::_Shifted_exponent_mask + 1;

                const _Uint_type _Left_magnitude  = _Left_uint & ~_Traits::_Shifted_sign_mask;
                const _Uint_type _Right_magnitude = _Right_uint & ~_Traits::_Shifted_sign_mask;

                if (_Left_magnitude > _Infinity_plus_one) {
                    _Left_uint = _Left_shifted_sign | _Infinity_plus_one;
                }

                if (_Right_magnitude > _Infinity_plus_one) {
                    _Right_uint = _Right_shifted_sign | _Infinity_plus_one;
                }

                                                                   const _Uint_type _Left_sign  = _Left_shifted_sign >> _Traits::_Sign_shift;
                const _Uint_type _Right_sign = _Right_shifted_sign >> _Traits::_Sign_shift;

                const _Uint_type _Left_xor  = _Left_shifted_sign - _Left_sign;
                const _Uint_type _Right_xor = _Right_shifted_sign - _Right_sign;

                const _Uint_type _Left_twos_complement_uint  = (_Left_uint ^ _Left_xor) + _Left_sign;
                const _Uint_type _Right_twos_complement_uint = (_Right_uint ^ _Right_xor) + _Right_sign;

                const auto _Left_twos_complement  = static_cast<_Sint_type>(_Left_twos_complement_uint);
                const auto _Right_twos_complement = static_cast<_Sint_type>(_Right_twos_complement_uint);

                                 return static_cast<weak_ordering>(_Left_twos_complement <=> _Right_twos_complement);
            } else if constexpr (_Strat == _St::_Three) {
                return static_cast<weak_ordering>(compare_three_way{}(_Left, _Right));
            } else if constexpr (_Strat == _St::_Strong) {
                return static_cast<weak_ordering>(
                    static_cast<strong_ordering>(  strong_order(_Left, _Right)));
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Weak_order::_Cpo weak_order;
}

 namespace _Partial_order {
    void partial_order();  
    template <class _Ty1, class _Ty2>
    concept _Has_ADL = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<partial_ordering>(  partial_order(_Left, _Right));
    };

    template <class _Ty1, class _Ty2>
    concept _Can_compare_three_way = requires(_Ty1& _Left, _Ty2& _Right) {
        static_cast<partial_ordering>(compare_three_way{}(_Left, _Right));
    };

              void weak_order();      void strong_order();  
    class _Cpo {
    private:
        enum class _St { _None, _Adl, _Three, _Weak, _Strong };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Adl, noexcept(static_cast<partial_ordering>(
                                         partial_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else if constexpr (_Can_compare_three_way<_Ty1, _Ty2>) {
                return {_St::_Three, noexcept(static_cast<partial_ordering>(
                                         compare_three_way{}(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>())))};
            } else if constexpr (_Weak_order::_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Weak,
                    noexcept(static_cast<partial_ordering>(static_cast<weak_ordering>(
                          weak_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))))};
            } else if constexpr (_Strong_order::_Has_ADL<_Ty1, _Ty2>) {
                return {_St::_Strong, noexcept(static_cast<partial_ordering>(static_cast<strong_ordering>(
                                            strong_order(
                                              ::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))))};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr partial_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Adl) {
                return static_cast<partial_ordering>(  partial_order(_Left, _Right));
            } else if constexpr (_Strat == _St::_Three) {
                return static_cast<partial_ordering>(compare_three_way{}(_Left, _Right));
            } else if constexpr (_Strat == _St::_Weak) {
                return static_cast<partial_ordering>(
                    static_cast<weak_ordering>(  weak_order(_Left, _Right)));
            } else if constexpr (_Strat == _St::_Strong) {
                return static_cast<partial_ordering>(
                    static_cast<strong_ordering>(  strong_order(_Left, _Right)));
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Partial_order::_Cpo partial_order;
}

 template <class _Ty1, class _Ty2>
concept _Can_fallback_eq_lt = requires(_Ty1& _Left, _Ty2& _Right) {
    { _Left == _Right } -> _Implicitly_convertible_to<bool>;
    { _Left <  _Right } -> _Implicitly_convertible_to<bool>;
};
 
 namespace _Compare_strong_order_fallback {
    template <class _Ty1, class _Ty2>
    concept _Can_strong_order = requires(_Ty1& _Left, _Ty2& _Right) {
        ::std:: strong_order(_Left, _Right);
    };

    class _Cpo {
    private:
        enum class _St { _None, _Strong, _Fallback };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Can_strong_order<_Ty1, _Ty2>) {
                return {_St::_Strong, noexcept(::std:: strong_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))};
            } else if constexpr (_Can_fallback_eq_lt<_Ty1, _Ty2>) {
                return {_St::_Fallback,
                    noexcept(::std:: declval<_Ty1&>() == ::std:: declval<_Ty2&>()  ? strong_ordering::equal
                             : ::std:: declval<_Ty1&>() < ::std:: declval<_Ty2&>() ? strong_ordering::less
                                                                             : strong_ordering::greater)};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr strong_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Strong) {
                return ::std:: strong_order(_Left, _Right);
            } else if constexpr (_Strat == _St::_Fallback) {
                return _Left == _Right ? strong_ordering::equal
                     : _Left < _Right  ? strong_ordering::less
                                       : strong_ordering::greater;
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Compare_strong_order_fallback::_Cpo compare_strong_order_fallback;
}

 namespace _Compare_weak_order_fallback {
    template <class _Ty1, class _Ty2>
    concept _Can_weak_order = requires(_Ty1& _Left, _Ty2& _Right) {
        ::std:: weak_order(_Left, _Right);
    };

    class _Cpo {
    private:
        enum class _St { _None, _Weak, _Fallback };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Can_weak_order<_Ty1, _Ty2>) {
                return {_St::_Weak, noexcept(::std:: weak_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))};
            } else if constexpr (_Can_fallback_eq_lt<_Ty1, _Ty2>) {
                return {
                    _St::_Fallback, noexcept(::std:: declval<_Ty1&>() == ::std:: declval<_Ty2&>()  ? weak_ordering::equivalent
                                             : ::std:: declval<_Ty1&>() < ::std:: declval<_Ty2&>() ? weak_ordering::less
                                                                                             : weak_ordering::greater)};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr weak_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Weak) {
                return ::std:: weak_order(_Left, _Right);
            } else if constexpr (_Strat == _St::_Fallback) {
                return _Left == _Right ? weak_ordering::equivalent
                     : _Left < _Right  ? weak_ordering::less
                                       : weak_ordering::greater;
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Compare_weak_order_fallback::_Cpo compare_weak_order_fallback;
}

 namespace _Compare_partial_order_fallback {
    template <class _Ty1, class _Ty2>
    concept _Can_partial_order = requires(_Ty1& _Left, _Ty2& _Right) {
        ::std:: partial_order(_Left, _Right);
    };

         template <class _Ty1, class _Ty2>
    concept _Can_fallback_eq_lt_twice = requires(_Ty1& _Left, _Ty2& _Right) {
        { _Left  == _Right } -> _Implicitly_convertible_to<bool>;
        { _Left  <  _Right } -> _Implicitly_convertible_to<bool>;
        { _Right <  _Left  } -> _Implicitly_convertible_to<bool>;
    };
     
    class _Cpo {
    private:
        enum class _St { _None, _Partial, _Fallback };

        template <class _Ty1, class _Ty2>
         static constexpr _Choice_t<_St> _Choose() noexcept {
            if constexpr (!same_as<decay_t<_Ty1>, decay_t<_Ty2>>) {
                return {_St::_None};
            } else if constexpr (_Can_partial_order<_Ty1, _Ty2>) {
                return {_St::_Partial, noexcept(::std:: partial_order(::std:: declval<_Ty1&>(), ::std:: declval<_Ty2&>()))};
            } else if constexpr (_Can_fallback_eq_lt_twice<_Ty1, _Ty2>) {
                return {_St::_Fallback,
                    noexcept(::std:: declval<_Ty1&>() == ::std:: declval<_Ty2&>()  ? partial_ordering::equivalent
                             : ::std:: declval<_Ty1&>() < ::std:: declval<_Ty2&>() ? partial_ordering::less
                             : ::std:: declval<_Ty2&>() < ::std:: declval<_Ty1&>() ? partial_ordering::greater
                                                                             : partial_ordering::unordered)};
            } else {
                return {_St::_None};
            }
        }

        template <class _Ty1, class _Ty2>
        static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

    public:
                 template <class _Ty1, class _Ty2>
            requires (_Choice<_Ty1&, _Ty2&>._Strategy != _St::_None)
         constexpr partial_ordering operator()(_Ty1&& _Left, _Ty2&& _Right) const
            noexcept(_Choice<_Ty1&, _Ty2&>._No_throw) {
                         constexpr _St _Strat = _Choice<_Ty1&, _Ty2&>._Strategy;
            if constexpr (_Strat == _St::_Partial) {
                return ::std:: partial_order(_Left, _Right);
            } else if constexpr (_Strat == _St::_Fallback) {
                return _Left == _Right ? partial_ordering::equivalent
                     : _Left < _Right  ? partial_ordering::less
                     : _Right < _Left  ? partial_ordering::greater
                                       : partial_ordering::unordered;
            } else {
                static_assert(_Always_false<_Ty1>, "should be unreachable");
            }
        }
    };
}  
inline namespace _Cpos {
    inline constexpr _Compare_partial_order_fallback::_Cpo compare_partial_order_fallback;
}

}






namespace std {
 template <class _Ty, class _Pr>
 constexpr const _Ty&(max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred) noexcept(
    noexcept(_Pred(_Left, _Right)))   {
         return _Pred(_Left, _Right) ? _Right : _Left;
}

template <class _Ty>
   constexpr const _Ty&(max)(
    const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right))   {
         return _Left < _Right ? _Right : _Left;
}

template <class _Ty, class _Pr>
 constexpr _Ty(max)(initializer_list<_Ty>, _Pr);  
template <class _Ty>
 constexpr _Ty(max)(initializer_list<_Ty>);  
 template <class _Ty, class _Pr>
 constexpr const _Ty&(min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred) noexcept(
    noexcept(_Pred(_Right, _Left)))   {
         return _Pred(_Right, _Left) ? _Right : _Left;
}

template <class _Ty>
   constexpr const _Ty&(min)(
    const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left))   {
         return _Right < _Left ? _Right : _Left;
}

template <class _Ty, class _Pr>
 constexpr _Ty(min)(initializer_list<_Ty>, _Pr);  
template <class _Ty>
 constexpr _Ty(min)(initializer_list<_Ty>);  
 template <class _FwdIt1, class _FwdIt2>
constexpr void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right) {      swap(*_Left, *_Right);
}

 template <class _Ty, size_t _Size, enable_if_t<_Is_swappable<_Ty>::value, int> _Enabled>
constexpr void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size]) noexcept(_Is_nothrow_swappable<_Ty>::value) {
    if (&_Left != &_Right) {
        _Ty* _First1 = _Left;
        _Ty* _Last1  = _First1 + _Size;
        _Ty* _First2 = _Right;
        for (; _First1 != _Last1; ++_First1, ++_First2) {
            ::std:: iter_swap(_First1, _First2);
        }
    }
}

template <class _Ty, enable_if_t<is_move_constructible_v<_Ty> && is_move_assignable_v<_Ty>, int> _Enabled>
constexpr void swap(_Ty& _Left, _Ty& _Right) noexcept(
    is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {
    _Ty _Tmp = ::std:: move(_Left);
    _Left    = ::std:: move(_Right);
    _Right   = ::std:: move(_Tmp);
}

 template <class _Ty>
constexpr void _Swap_adl(_Ty& _Left, _Ty& _Right) noexcept(_Is_nothrow_swappable<_Ty>::value) {
    swap(_Left, _Right);
}

 struct piecewise_construct_t {      explicit piecewise_construct_t() = default;
};

inline constexpr piecewise_construct_t piecewise_construct{};

 template <class...>
class tuple;

template <size_t _Index, class... _Types>
 constexpr auto&& _Tuple_get(tuple<_Types...>&& _Tuple) noexcept;

template <class _Ty1, class _Ty2>
struct pair {      using first_type  = _Ty1;
    using second_type = _Ty2;

    template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t<conjunction_v<is_default_constructible<_Uty1>, is_default_constructible<_Uty2>>, int> = 0>
    constexpr explicit(
        !conjunction_v<_Is_implicitly_default_constructible<_Uty1>, _Is_implicitly_default_constructible<_Uty2>>)
        pair() noexcept(
            is_nothrow_default_constructible_v<_Uty1>&& is_nothrow_default_constructible_v<_Uty2>)          : first(), second() {}

    template <class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t<conjunction_v<is_copy_constructible<_Uty1>, is_copy_constructible<_Uty2>>, int> = 0>
    constexpr explicit(!conjunction_v<is_convertible<const _Uty1&, _Uty1>, is_convertible<const _Uty2&, _Uty2>>)
        pair(const _Ty1& _Val1, const _Ty2& _Val2) noexcept(
            is_nothrow_copy_constructible_v<_Uty1>&& is_nothrow_copy_constructible_v<_Uty2>)          : first(_Val1), second(_Val2) {}

    template <class _Other1, class _Other2,
        enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>>, int> = 0>
    constexpr explicit(!conjunction_v<is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>)
        pair(_Other1&& _Val1, _Other2&& _Val2) noexcept(
            is_nothrow_constructible_v<_Ty1, _Other1>&& is_nothrow_constructible_v<_Ty2, _Other2>)          : first(::std:: forward<_Other1>(_Val1)), second(::std:: forward<_Other2>(_Val2)) {}

    pair(const pair&) = default;
    pair(pair&&)      = default;

    template <class _Other1, class _Other2,
        enable_if_t<conjunction_v<is_constructible<_Ty1, const _Other1&>, is_constructible<_Ty2, const _Other2&>>,
            int> = 0>
    constexpr explicit(!conjunction_v<is_convertible<const _Other1&, _Ty1>, is_convertible<const _Other2&, _Ty2>>)
        pair(const pair<_Other1, _Other2>& _Right) noexcept(is_nothrow_constructible_v<_Ty1, const _Other1&>&&
                is_nothrow_constructible_v<_Ty2, const _Other2&>)          : first(_Right.first), second(_Right.second) {}

    template <class _Other1, class _Other2,
        enable_if_t<conjunction_v<is_constructible<_Ty1, _Other1>, is_constructible<_Ty2, _Other2>>, int> = 0>
    constexpr explicit(!conjunction_v<is_convertible<_Other1, _Ty1>, is_convertible<_Other2, _Ty2>>)
        pair(pair<_Other1, _Other2>&& _Right) noexcept(
            is_nothrow_constructible_v<_Ty1, _Other1>&& is_nothrow_constructible_v<_Ty2, _Other2>)          : first(::std:: forward<_Other1>(_Right.first)), second(::std:: forward<_Other2>(_Right.second)) {}

    template <class _Tuple1, class _Tuple2, size_t... _Indexes1, size_t... _Indexes2>
    constexpr pair(_Tuple1& _Val1, _Tuple2& _Val2, index_sequence<_Indexes1...>, index_sequence<_Indexes2...>)
        : first(_Tuple_get<_Indexes1>(::std:: move(_Val1))...), second(_Tuple_get<_Indexes2>(::std:: move(_Val2))...) {}

    template <class... _Types1, class... _Types2>
    constexpr pair(piecewise_construct_t, tuple<_Types1...> _Val1, tuple<_Types2...> _Val2)
        : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

    pair& operator=(const volatile pair&) = delete;

    template <class _Myself = pair,
        enable_if_t<conjunction_v<_Is_copy_assignable_no_precondition_check<typename _Myself::first_type>,
                        _Is_copy_assignable_no_precondition_check<typename _Myself::second_type>>,
            int>            = 0>
    constexpr pair& operator=(_Identity_t<const _Myself&> _Right) noexcept(
        conjunction_v<is_nothrow_copy_assignable<_Ty1>, is_nothrow_copy_assignable<_Ty2>>)   {
        first  = _Right.first;
        second = _Right.second;
        return *this;
    }

    template <class _Myself = pair,
        enable_if_t<conjunction_v<_Is_move_assignable_no_precondition_check<typename _Myself::first_type>,
                        _Is_move_assignable_no_precondition_check<typename _Myself::second_type>>,
            int>            = 0>
    constexpr pair& operator=(_Identity_t<_Myself&&> _Right) noexcept(
        conjunction_v<is_nothrow_move_assignable<_Ty1>, is_nothrow_move_assignable<_Ty2>>)   {
        first  = ::std:: forward<_Ty1>(_Right.first);
        second = ::std:: forward<_Ty2>(_Right.second);
        return *this;
    }

    template <class _Other1, class _Other2,
        enable_if_t<conjunction_v<negation<is_same<pair, pair<_Other1, _Other2>>>, is_assignable<_Ty1&, const _Other1&>,
                        is_assignable<_Ty2&, const _Other2&>>,
            int> = 0>
    constexpr pair& operator=(const pair<_Other1, _Other2>& _Right) noexcept(
        is_nothrow_assignable_v<_Ty1&, const _Other1&>&&
            is_nothrow_assignable_v<_Ty2&, const _Other2&>)   {
        first  = _Right.first;
        second = _Right.second;
        return *this;
    }

    template <class _Other1, class _Other2,
        enable_if_t<conjunction_v<negation<is_same<pair, pair<_Other1, _Other2>>>, is_assignable<_Ty1&, _Other1>,
                        is_assignable<_Ty2&, _Other2>>,
            int> = 0>
    constexpr pair& operator=(pair<_Other1, _Other2>&& _Right) noexcept(
        is_nothrow_assignable_v<_Ty1&, _Other1>&& is_nothrow_assignable_v<_Ty2&, _Other2>)   {
        first  = ::std:: forward<_Other1>(_Right.first);
        second = ::std:: forward<_Other2>(_Right.second);
        return *this;
    }

    constexpr void swap(pair& _Right) noexcept(
        _Is_nothrow_swappable<_Ty1>::value&& _Is_nothrow_swappable<_Ty2>::value) {
        if (this != ::std:: addressof(_Right)) {
            _Swap_adl(first, _Right.first);
            _Swap_adl(second, _Right.second);
        }
    }

    _Ty1 first;      _Ty2 second;  };

template <class _Ty1, class _Ty2>
pair(_Ty1, _Ty2) -> pair<_Ty1, _Ty2>;

template <class _Ty1, class _Ty2, enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value, int> = 0>
constexpr void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right) noexcept(noexcept(_Left.swap(_Right))) {
    _Left.swap(_Right);
}

template <class _Ty1, class _Ty2>
 constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
    return _Left.first == _Right.first && _Left.second == _Right.second;
}

template <class _Ty1, class _Ty2>
 constexpr common_comparison_category_t<_Synth_three_way_result<_Ty1>, _Synth_three_way_result<_Ty2>>
    operator<=>(const pair<_Ty1, _Ty2>& _Left, const pair<_Ty1, _Ty2>& _Right) {
    if (auto _Result = _Synth_three_way{}(_Left.first, _Right.first); _Result != 0) {
        return _Result;
    }
    return _Synth_three_way{}(_Left.second, _Right.second);
}

 template <class _Ty>
struct _Unrefwrap_helper {      using type = _Ty;
};

template <class _Ty>
struct _Unrefwrap_helper<reference_wrapper<_Ty>> {      using type = _Ty&;
};

 template <class _Ty>
using _Unrefwrap_t = typename _Unrefwrap_helper<decay_t<_Ty>>::type;

 template <class _Ty1, class _Ty2>
 constexpr pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>> make_pair(_Ty1&& _Val1, _Ty2&& _Val2) noexcept(
    is_nothrow_constructible_v<_Unrefwrap_t<_Ty1>, _Ty1>&&
        is_nothrow_constructible_v<_Unrefwrap_t<_Ty2>, _Ty2>)   {
         using _Mypair = pair<_Unrefwrap_t<_Ty1>, _Unrefwrap_t<_Ty2>>;
    return _Mypair(::std:: forward<_Ty1>(_Val1), ::std:: forward<_Ty2>(_Val2));
}

namespace [[deprecated("warning STL4027: The namespace std::rel_ops and its contents are deprecated in C++20. Their use is superseded by C++20\'s <=> operator and automatic rewrites of relational expressions. You can define _SILENCE_CXX20_REL_OPS_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] rel_ops {
    template <class _Ty>
    [[deprecated("warning STL4027: The namespace std::rel_ops and its contents are deprecated in C++20. Their use is superseded by C++20\'s <=> operator and automatic rewrites of relational expressions. You can define _SILENCE_CXX20_REL_OPS_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  bool operator!=(const _Ty& _Left, const _Ty& _Right) {
        return !(_Left == _Right);
    }

    template <class _Ty>
    [[deprecated("warning STL4027: The namespace std::rel_ops and its contents are deprecated in C++20. Their use is superseded by C++20\'s <=> operator and automatic rewrites of relational expressions. You can define _SILENCE_CXX20_REL_OPS_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  bool operator>(const _Ty& _Left, const _Ty& _Right) {
        return _Right < _Left;
    }

    template <class _Ty>
    [[deprecated("warning STL4027: The namespace std::rel_ops and its contents are deprecated in C++20. Their use is superseded by C++20\'s <=> operator and automatic rewrites of relational expressions. You can define _SILENCE_CXX20_REL_OPS_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  bool operator<=(const _Ty& _Left, const _Ty& _Right) {
        return !(_Right < _Left);
    }

    template <class _Ty>
    [[deprecated("warning STL4027: The namespace std::rel_ops and its contents are deprecated in C++20. Their use is superseded by C++20\'s <=> operator and automatic rewrites of relational expressions. You can define _SILENCE_CXX20_REL_OPS_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  bool operator>=(const _Ty& _Left, const _Ty& _Right) {
        return !(_Left < _Right);
    }
}  
 template <class _Tuple>
struct tuple_size;

template <class _Tuple, class = void>
struct _Tuple_size_sfinae {};  
template <class _Tuple>
struct _Tuple_size_sfinae<_Tuple, void_t<decltype(tuple_size<_Tuple>::value)>>
    : integral_constant<size_t, tuple_size<_Tuple>::value> {};  
template <class _Tuple>
struct tuple_size<const _Tuple> : _Tuple_size_sfinae<_Tuple> {};  
template <class _Tuple>
struct [[deprecated("warning STL4030: Some operations on volatile-qualified types in the STL are deprecated in C++20. You can define _SILENCE_CXX20_VOLATILE_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] tuple_size<volatile _Tuple> : _Tuple_size_sfinae<_Tuple> {};  
template <class _Tuple>
struct [[deprecated("warning STL4030: Some operations on volatile-qualified types in the STL are deprecated in C++20. You can define _SILENCE_CXX20_VOLATILE_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] tuple_size<const volatile _Tuple> : _Tuple_size_sfinae<_Tuple> {};  
template <class _Ty>
inline constexpr size_t tuple_size_v = tuple_size<_Ty>::value;

template <size_t _Index, class _Tuple>
struct tuple_element;

template <size_t _Index, class _Tuple>
struct  tuple_element<_Index, const _Tuple> : tuple_element<_Index, _Tuple> {
    using _Mybase = tuple_element<_Index, _Tuple>;
    using type    = add_const_t<typename _Mybase::type>;
};

template <size_t _Index, class _Tuple>
struct [[deprecated("warning STL4030: Some operations on volatile-qualified types in the STL are deprecated in C++20. You can define _SILENCE_CXX20_VOLATILE_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  tuple_element<_Index, volatile _Tuple>
    : tuple_element<_Index, _Tuple> {
    using _Mybase = tuple_element<_Index, _Tuple>;
    using type    = add_volatile_t<typename _Mybase::type>;
};

template <size_t _Index, class _Tuple>
struct [[deprecated("warning STL4030: Some operations on volatile-qualified types in the STL are deprecated in C++20. You can define _SILENCE_CXX20_VOLATILE_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  tuple_element<_Index, const volatile _Tuple>
    : tuple_element<_Index, _Tuple> {
    using _Mybase = tuple_element<_Index, _Tuple>;
    using type    = add_cv_t<typename _Mybase::type>;
};

template <size_t _Index, class _Tuple>
using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

 template <class _Ty, size_t _Size>
class array;

template <class _Ty, size_t _Size>
struct tuple_size<array<_Ty, _Size>> : integral_constant<size_t, _Size> {};  
template <size_t _Idx, class _Ty, size_t _Size>
struct  tuple_element<_Idx, array<_Ty, _Size>> {
    static_assert(_Idx < _Size, "array index out of bounds");

    using type = _Ty;
};

 template <class... _Types>
struct tuple_size<tuple<_Types...>> : integral_constant<size_t, sizeof...(_Types)> {};  
template <size_t _Index>
struct  tuple_element<_Index, tuple<>> {      static_assert(_Always_false<integral_constant<size_t, _Index>>, "tuple index out of bounds");
};

template <class _This, class... _Rest>
struct  tuple_element<0, tuple<_This, _Rest...>> {      using type = _This;
         using _Ttype = tuple<_This, _Rest...>;
};

template <size_t _Index, class _This, class... _Rest>
struct  tuple_element<_Index, tuple<_This, _Rest...>>
    : tuple_element<_Index - 1, tuple<_Rest...>> {};  
 template <class _Ty1, class _Ty2>
struct tuple_size<pair<_Ty1, _Ty2>> : integral_constant<size_t, 2> {};  
template <size_t _Idx, class _Ty1, class _Ty2>
struct  tuple_element<_Idx, pair<_Ty1, _Ty2>> {
    static_assert(_Idx < 2, "pair index out of bounds");

    using type = conditional_t<_Idx == 0, _Ty1, _Ty2>;
};

template <class _Ret, class _Pair>
constexpr _Ret _Pair_get(_Pair& _Pr, integral_constant<size_t, 0>) noexcept {      return _Pr.first;
}

template <class _Ret, class _Pair>
constexpr _Ret _Pair_get(_Pair& _Pr, integral_constant<size_t, 1>) noexcept {      return _Pr.second;
}

template <size_t _Idx, class _Ty1, class _Ty2>
 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>& get(
    pair<_Ty1, _Ty2>& _Pr) noexcept {      using _Rtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
    return _Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>{});
}

template <class _Ty1, class _Ty2>
 constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept {      return ::std:: get<0>(_Pr);
}

template <class _Ty2, class _Ty1>
 constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept {      return ::std:: get<1>(_Pr);
}

template <size_t _Idx, class _Ty1, class _Ty2>
 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>& get(
    const pair<_Ty1, _Ty2>& _Pr) noexcept {      using _Ctype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&;
    return _Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>{});
}

template <class _Ty1, class _Ty2>
 constexpr const _Ty1& get(
    const pair<_Ty1, _Ty2>& _Pr) noexcept {      return ::std:: get<0>(_Pr);
}

template <class _Ty2, class _Ty1>
 constexpr const _Ty2& get(
    const pair<_Ty1, _Ty2>& _Pr) noexcept {      return ::std:: get<1>(_Pr);
}

template <size_t _Idx, class _Ty1, class _Ty2>
 constexpr tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&& get(
    pair<_Ty1, _Ty2>&& _Pr) noexcept {      using _RRtype = tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
    return ::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr));
}

template <class _Ty1, class _Ty2>
 constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept {      return ::std:: get<0>(::std:: move(_Pr));
}

template <class _Ty2, class _Ty1>
 constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept {      return ::std:: get<1>(::std:: move(_Pr));
}

template <size_t _Idx, class _Ty1, class _Ty2>
 constexpr const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&& get(
    const pair<_Ty1, _Ty2>&& _Pr) noexcept {      using _RRtype = const tuple_element_t<_Idx, pair<_Ty1, _Ty2>>&&;
    return ::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr));
}

template <class _Ty1, class _Ty2>
 constexpr const _Ty1&& get(
    const pair<_Ty1, _Ty2>&& _Pr) noexcept {      return ::std:: get<0>(::std:: move(_Pr));
}

template <class _Ty2, class _Ty1>
 constexpr const _Ty2&& get(
    const pair<_Ty1, _Ty2>&& _Pr) noexcept {      return ::std:: get<1>(::std:: move(_Pr));
}

 template <class _Ty, class _Other = _Ty>
constexpr _Ty exchange(_Ty& _Val, _Other&& _New_val) noexcept(
    conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>)   {
         _Ty _Old_val = static_cast<_Ty&&>(_Val);
    _Val         = static_cast<_Other&&>(_New_val);
    return _Old_val;
}

 template <class _Ty>
 constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept {      return _Val;
}

template <class _Ty>
void as_const(const _Ty&&) = delete;

 struct in_place_t {      explicit in_place_t() = default;
};
inline constexpr in_place_t in_place{};

template <class>
struct in_place_type_t {      explicit in_place_type_t() = default;
};
template <class _Ty>
inline constexpr in_place_type_t<_Ty> in_place_type{};

template <size_t>
struct in_place_index_t {      explicit in_place_index_t() = default;
};
template <size_t _Idx>
inline constexpr in_place_index_t<_Idx> in_place_index{};

template <class _Ty>
inline constexpr bool _Is_standard_integer = is_integral_v<_Ty>
    && !_Is_any_of_v<remove_cv_t<_Ty>, bool, char,
        wchar_t,
        char8_t,
        char16_t, char32_t>;

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_equal(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    static_assert(_Is_standard_integer<_Ty1> && _Is_standard_integer<_Ty2>,
        "The integer comparison functions only accept standard and extended integer types.");
    if constexpr (is_signed_v<_Ty1> == is_signed_v<_Ty2>) {
        return _Left == _Right;
    } else if constexpr (is_signed_v<_Ty2>) {
        return _Left == static_cast<make_unsigned_t<_Ty2>>(_Right) && _Right >= 0;
    } else {
        return static_cast<make_unsigned_t<_Ty1>>(_Left) == _Right && _Left >= 0;
    }
}

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_not_equal(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    return !::std:: cmp_equal(_Left, _Right);
}

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_less(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    static_assert(_Is_standard_integer<_Ty1> && _Is_standard_integer<_Ty2>,
        "The integer comparison functions only accept standard and extended integer types.");
    if constexpr (is_signed_v<_Ty1> == is_signed_v<_Ty2>) {
        return _Left < _Right;
    } else if constexpr (is_signed_v<_Ty2>) {
        return _Right > 0 && _Left < static_cast<make_unsigned_t<_Ty2>>(_Right);
    } else {
        return _Left < 0 || static_cast<make_unsigned_t<_Ty1>>(_Left) < _Right;
    }
}

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_greater(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    return ::std:: cmp_less(_Right, _Left);
}

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_less_equal(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    return !::std:: cmp_less(_Right, _Left);
}

 template <class _Ty1, class _Ty2>
 constexpr bool cmp_greater_equal(const _Ty1 _Left, const _Ty2 _Right) noexcept {
    return !::std:: cmp_less(_Left, _Right);
}

 template <class _Ty>
 constexpr _Ty _Min_limit() noexcept {      static_assert(_Is_standard_integer<_Ty>);      if constexpr (is_signed_v<_Ty>) {
        constexpr auto _Unsigned_max = static_cast<make_unsigned_t<_Ty>>(-1);
        return static_cast<_Ty>((_Unsigned_max >> 1) + 1);      } else {
        return 0;
    }
}

template <class _Ty>
 constexpr _Ty _Max_limit() noexcept {      static_assert(_Is_standard_integer<_Ty>);      if constexpr (is_signed_v<_Ty>) {
        constexpr auto _Unsigned_max = static_cast<make_unsigned_t<_Ty>>(-1);
        return static_cast<_Ty>(_Unsigned_max >> 1);
    } else {
        return static_cast<_Ty>(-1);
    }
}

template <class _Rx, class _Ty>
 constexpr bool in_range(const _Ty _Value) noexcept {
    static_assert(_Is_standard_integer<_Rx> && _Is_standard_integer<_Ty>,
        "The integer comparison functions only accept standard and extended integer types.");

    constexpr auto _Ty_min = _Min_limit<_Ty>();
    constexpr auto _Rx_min = _Min_limit<_Rx>();

    if constexpr (::std:: cmp_less(_Ty_min, _Rx_min)) {
        if (_Value < _Ty{_Rx_min}) {
            return false;
        }
    }

    constexpr auto _Ty_max = _Max_limit<_Ty>();
    constexpr auto _Rx_max = _Max_limit<_Rx>();

    if constexpr (::std:: cmp_greater(_Ty_max, _Rx_max)) {
        if (_Value > _Ty{_Rx_max}) {
            return false;
        }
    }

    return true;
}


}


 
  
 
  

  
 
      
      
       

 
  

 
  




namespace std {

   
 
 
  template <class _CharT> inline constexpr _CharT __DIGIT_TABLE[] = {_CharT{}};

template <> inline constexpr char __DIGIT_TABLE<char>[200] = {
  '0','0','0','1','0','2','0','3','0','4','0','5','0','6','0','7','0','8','0','9',
  '1','0','1','1','1','2','1','3','1','4','1','5','1','6','1','7','1','8','1','9',
  '2','0','2','1','2','2','2','3','2','4','2','5','2','6','2','7','2','8','2','9',
  '3','0','3','1','3','2','3','3','3','4','3','5','3','6','3','7','3','8','3','9',
  '4','0','4','1','4','2','4','3','4','4','4','5','4','6','4','7','4','8','4','9',
  '5','0','5','1','5','2','5','3','5','4','5','5','5','6','5','7','5','8','5','9',
  '6','0','6','1','6','2','6','3','6','4','6','5','6','6','6','7','6','8','6','9',
  '7','0','7','1','7','2','7','3','7','4','7','5','7','6','7','7','7','8','7','9',
  '8','0','8','1','8','2','8','3','8','4','8','5','8','6','8','7','8','8','8','9',
  '9','0','9','1','9','2','9','3','9','4','9','5','9','6','9','7','9','8','9','9'
};

template <> inline constexpr wchar_t __DIGIT_TABLE<wchar_t>[200] = {
  L'0',L'0',L'0',L'1',L'0',L'2',L'0',L'3',L'0',L'4',L'0',L'5',L'0',L'6',L'0',L'7',L'0',L'8',L'0',L'9',
  L'1',L'0',L'1',L'1',L'1',L'2',L'1',L'3',L'1',L'4',L'1',L'5',L'1',L'6',L'1',L'7',L'1',L'8',L'1',L'9',
  L'2',L'0',L'2',L'1',L'2',L'2',L'2',L'3',L'2',L'4',L'2',L'5',L'2',L'6',L'2',L'7',L'2',L'8',L'2',L'9',
  L'3',L'0',L'3',L'1',L'3',L'2',L'3',L'3',L'3',L'4',L'3',L'5',L'3',L'6',L'3',L'7',L'3',L'8',L'3',L'9',
  L'4',L'0',L'4',L'1',L'4',L'2',L'4',L'3',L'4',L'4',L'4',L'5',L'4',L'6',L'4',L'7',L'4',L'8',L'4',L'9',
  L'5',L'0',L'5',L'1',L'5',L'2',L'5',L'3',L'5',L'4',L'5',L'5',L'5',L'6',L'5',L'7',L'5',L'8',L'5',L'9',
  L'6',L'0',L'6',L'1',L'6',L'2',L'6',L'3',L'6',L'4',L'6',L'5',L'6',L'6',L'6',L'7',L'6',L'8',L'6',L'9',
  L'7',L'0',L'7',L'1',L'7',L'2',L'7',L'3',L'7',L'4',L'7',L'5',L'7',L'6',L'7',L'7',L'7',L'8',L'7',L'9',
  L'8',L'0',L'8',L'1',L'8',L'2',L'8',L'3',L'8',L'4',L'8',L'5',L'8',L'6',L'8',L'7',L'8',L'8',L'8',L'9',
  L'9',L'0',L'9',L'1',L'9',L'2',L'9',L'3',L'9',L'4',L'9',L'5',L'9',L'6',L'9',L'7',L'9',L'8',L'9',L'9'
};

 
 
 inline constexpr uint64_t __DOUBLE_POW5_INV_SPLIT[292][2] = {
  {                    1u, 288230376151711744u }, {  3689348814741910324u, 230584300921369395u },
  {  2951479051793528259u, 184467440737095516u }, { 17118578500402463900u, 147573952589676412u },
  { 12632330341676300947u, 236118324143482260u }, { 10105864273341040758u, 188894659314785808u },
  { 15463389048156653253u, 151115727451828646u }, { 17362724847566824558u, 241785163922925834u },
  { 17579528692795369969u, 193428131138340667u }, {  6684925324752475329u, 154742504910672534u },
  { 18074578149087781173u, 247588007857076054u }, { 18149011334012135262u, 198070406285660843u },
  {  3451162622983977240u, 158456325028528675u }, {  5521860196774363583u, 253530120045645880u },
  {  4417488157419490867u, 202824096036516704u }, {  7223339340677503017u, 162259276829213363u },
  {  7867994130342094503u, 259614842926741381u }, {  2605046489531765280u, 207691874341393105u },
  {  2084037191625412224u, 166153499473114484u }, { 10713157136084480204u, 265845599156983174u },
  { 12259874523609494487u, 212676479325586539u }, { 13497248433629505913u, 170141183460469231u },
  { 14216899864323388813u, 272225893536750770u }, { 11373519891458711051u, 217780714829400616u },
  {  5409467098425058518u, 174224571863520493u }, {  4965798542738183305u, 278759314981632789u },
  {  7661987648932456967u, 223007451985306231u }, {  2440241304404055250u, 178405961588244985u },
  {  3904386087046488400u, 285449538541191976u }, { 17880904128604832013u, 228359630832953580u },
  { 14304723302883865611u, 182687704666362864u }, { 15133127457049002812u, 146150163733090291u },
  { 16834306301794583852u, 233840261972944466u }, {  9778096226693756759u, 187072209578355573u },
  { 15201174610838826053u, 149657767662684458u }, {  2185786488890659746u, 239452428260295134u },
  {  5437978005854438120u, 191561942608236107u }, { 15418428848909281466u, 153249554086588885u },
  {  6222742084545298729u, 245199286538542217u }, { 16046240111861969953u, 196159429230833773u },
  {  1768945645263844993u, 156927543384667019u }, { 10209010661905972635u, 251084069415467230u },
  {  8167208529524778108u, 200867255532373784u }, { 10223115638361732810u, 160693804425899027u },
  {  1599589762411131202u, 257110087081438444u }, {  4969020624670815285u, 205688069665150755u },
  {  3975216499736652228u, 164550455732120604u }, { 13739044029062464211u, 263280729171392966u },
  {  7301886408508061046u, 210624583337114373u }, { 13220206756290269483u, 168499666669691498u },
  { 17462981995322520850u, 269599466671506397u }, {  6591687966774196033u, 215679573337205118u },
  { 12652048002903177473u, 172543658669764094u }, {  9175230360419352987u, 276069853871622551u },
  {  3650835473593572067u, 220855883097298041u }, { 17678063637842498946u, 176684706477838432u },
  { 13527506561580357021u, 282695530364541492u }, {  3443307619780464970u, 226156424291633194u },
  {  6443994910566282300u, 180925139433306555u }, {  5155195928453025840u, 144740111546645244u },
  { 15627011115008661990u, 231584178474632390u }, { 12501608892006929592u, 185267342779705912u },
  {  2622589484121723027u, 148213874223764730u }, {  4196143174594756843u, 237142198758023568u },
  { 10735612169159626121u, 189713759006418854u }, { 12277838550069611220u, 151771007205135083u },
  { 15955192865369467629u, 242833611528216133u }, {  1696107848069843133u, 194266889222572907u },
  { 12424932722681605476u, 155413511378058325u }, {  1433148282581017146u, 248661618204893321u },
  { 15903913885032455010u, 198929294563914656u }, {  9033782293284053685u, 159143435651131725u },
  { 14454051669254485895u, 254629497041810760u }, { 11563241335403588716u, 203703597633448608u },
  { 16629290697806691620u, 162962878106758886u }, {   781423413297334329u, 260740604970814219u },
  {  4314487545379777786u, 208592483976651375u }, {  3451590036303822229u, 166873987181321100u },
  {  5522544058086115566u, 266998379490113760u }, {  4418035246468892453u, 213598703592091008u },
  { 10913125826658934609u, 170878962873672806u }, { 10082303693170474728u, 273406340597876490u },
  {  8065842954536379782u, 218725072478301192u }, { 17520720807854834795u, 174980057982640953u },
  {  5897060404116273733u, 279968092772225526u }, {  1028299508551108663u, 223974474217780421u },
  { 15580034865808528224u, 179179579374224336u }, { 17549358155809824511u, 286687326998758938u },
  {  2971440080422128639u, 229349861599007151u }, { 17134547323305344204u, 183479889279205720u },
  { 13707637858644275364u, 146783911423364576u }, { 14553522944347019935u, 234854258277383322u },
  {  4264120725993795302u, 187883406621906658u }, { 10789994210278856888u, 150306725297525326u },
  {  9885293106962350374u, 240490760476040522u }, {   529536856086059653u, 192392608380832418u },
  {  7802327114352668369u, 153914086704665934u }, {  1415676938738538420u, 246262538727465495u },
  {  1132541550990830736u, 197010030981972396u }, { 15663428499760305882u, 157608024785577916u },
  { 17682787970132668764u, 252172839656924666u }, { 10456881561364224688u, 201738271725539733u },
  { 15744202878575200397u, 161390617380431786u }, { 17812026976236499989u, 258224987808690858u },
  {  3181575136763469022u, 206579990246952687u }, { 13613306553636506187u, 165263992197562149u },
  { 10713244041592678929u, 264422387516099439u }, { 12259944048016053467u, 211537910012879551u },
  {  6118606423670932450u, 169230328010303641u }, {  2411072648389671274u, 270768524816485826u },
  { 16686253377679378312u, 216614819853188660u }, { 13349002702143502650u, 173291855882550928u },
  { 17669055508687693916u, 277266969412081485u }, { 14135244406950155133u, 221813575529665188u },
  {   240149081334393137u, 177450860423732151u }, { 11452284974360759988u, 283921376677971441u },
  {  5472479164746697667u, 227137101342377153u }, { 11756680961281178780u, 181709681073901722u },
  {  2026647139541122378u, 145367744859121378u }, { 18000030682233437097u, 232588391774594204u },
  { 18089373360528660001u, 186070713419675363u }, {  3403452244197197031u, 148856570735740291u },
  { 16513570034941246220u, 238170513177184465u }, { 13210856027952996976u, 190536410541747572u },
  {  3189987192878576934u, 152429128433398058u }, {  1414630693863812771u, 243886605493436893u },
  {  8510402184574870864u, 195109284394749514u }, { 10497670562401807014u, 156087427515799611u },
  {  9417575270359070576u, 249739884025279378u }, { 14912757845771077107u, 199791907220223502u },
  {  4551508647133041040u, 159833525776178802u }, { 10971762650154775986u, 255733641241886083u },
  { 16156107749607641435u, 204586912993508866u }, {  9235537384944202825u, 163669530394807093u },
  { 11087511001168814197u, 261871248631691349u }, { 12559357615676961681u, 209496998905353079u },
  { 13736834907283479668u, 167597599124282463u }, { 18289587036911657145u, 268156158598851941u },
  { 10942320814787415393u, 214524926879081553u }, { 16132554281313752961u, 171619941503265242u },
  { 11054691591134363444u, 274591906405224388u }, { 16222450902391311402u, 219673525124179510u },
  { 12977960721913049122u, 175738820099343608u }, { 17075388340318968271u, 281182112158949773u },
  {  2592264228029443648u, 224945689727159819u }, {  5763160197165465241u, 179956551781727855u },
  {  9221056315464744386u, 287930482850764568u }, { 14755542681855616155u, 230344386280611654u },
  { 15493782960226403247u, 184275509024489323u }, {  1326979923955391628u, 147420407219591459u },
  {  9501865507812447252u, 235872651551346334u }, { 11290841220991868125u, 188698121241077067u },
  {  1653975347309673853u, 150958496992861654u }, { 10025058185179298811u, 241533595188578646u },
  {  4330697733401528726u, 193226876150862917u }, { 14532604630946953951u, 154581500920690333u },
  {  1116074521063664381u, 247330401473104534u }, {  4582208431592841828u, 197864321178483627u },
  { 14733813189500004432u, 158291456942786901u }, { 16195403473716186445u, 253266331108459042u },
  {  5577625149489128510u, 202613064886767234u }, {  8151448934333213131u, 162090451909413787u },
  { 16731667109675051333u, 259344723055062059u }, { 17074682502481951390u, 207475778444049647u },
  {  6281048372501740465u, 165980622755239718u }, {  6360328581260874421u, 265568996408383549u },
  {  8777611679750609860u, 212455197126706839u }, { 10711438158542398211u, 169964157701365471u },
  {  9759603424184016492u, 271942652322184754u }, { 11497031554089123517u, 217554121857747803u },
  { 16576322872755119460u, 174043297486198242u }, { 11764721337440549842u, 278469275977917188u },
  { 16790474699436260520u, 222775420782333750u }, { 13432379759549008416u, 178220336625867000u },
  {  3045063541568861850u, 285152538601387201u }, { 17193446092222730773u, 228122030881109760u },
  { 13754756873778184618u, 182497624704887808u }, { 18382503128506368341u, 145998099763910246u },
  {  3586563302416817083u, 233596959622256395u }, {  2869250641933453667u, 186877567697805116u },
  { 17052795772514404226u, 149502054158244092u }, { 12527077977055405469u, 239203286653190548u },
  { 17400360011128145022u, 191362629322552438u }, {  2852241564676785048u, 153090103458041951u },
  { 15631632947708587046u, 244944165532867121u }, {  8815957543424959314u, 195955332426293697u },
  { 18120812478965698421u, 156764265941034957u }, { 14235904707377476180u, 250822825505655932u },
  {  4010026136418160298u, 200658260404524746u }, { 17965416168102169531u, 160526608323619796u },
  {  2919224165770098987u, 256842573317791675u }, {  2335379332616079190u, 205474058654233340u },
  {  1868303466092863352u, 164379246923386672u }, {  6678634360490491686u, 263006795077418675u },
  {  5342907488392393349u, 210405436061934940u }, {  4274325990713914679u, 168324348849547952u },
  { 10528270399884173809u, 269318958159276723u }, { 15801313949391159694u, 215455166527421378u },
  {  1573004715287196786u, 172364133221937103u }, { 17274202803427156150u, 275782613155099364u },
  { 17508711057483635243u, 220626090524079491u }, { 10317620031244997871u, 176500872419263593u },
  { 12818843235250086271u, 282401395870821749u }, { 13944423402941979340u, 225921116696657399u },
  { 14844887537095493795u, 180736893357325919u }, { 15565258844418305359u, 144589514685860735u },
  {  6457670077359736959u, 231343223497377177u }, { 16234182506113520537u, 185074578797901741u },
  {  9297997190148906106u, 148059663038321393u }, { 11187446689496339446u, 236895460861314229u },
  { 12639306166338981880u, 189516368689051383u }, { 17490142562555006151u, 151613094951241106u },
  {  2158786396894637579u, 242580951921985771u }, { 16484424376483351356u, 194064761537588616u },
  {  9498190686444770762u, 155251809230070893u }, { 11507756283569722895u, 248402894768113429u },
  { 12895553841597688639u, 198722315814490743u }, { 17695140702761971558u, 158977852651592594u },
  { 17244178680193423523u, 254364564242548151u }, { 10105994129412828495u, 203491651394038521u },
  {  4395446488788352473u, 162793321115230817u }, { 10722063196803274280u, 260469313784369307u },
  {  1198952927958798777u, 208375451027495446u }, { 15716557601334680315u, 166700360821996356u },
  { 17767794532651667857u, 266720577315194170u }, { 14214235626121334286u, 213376461852155336u },
  {  7682039686155157106u, 170701169481724269u }, {  1223217053622520399u, 273121871170758831u },
  { 15735968901865657612u, 218497496936607064u }, { 16278123936234436413u, 174797997549285651u },
  {   219556594781725998u, 279676796078857043u }, {  7554342905309201445u, 223741436863085634u },
  {  9732823138989271479u, 178993149490468507u }, {   815121763415193074u, 286389039184749612u },
  { 11720143854957885429u, 229111231347799689u }, { 13065463898708218666u, 183288985078239751u },
  {  6763022304224664610u, 146631188062591801u }, {  3442138057275642729u, 234609900900146882u },
  { 13821756890046245153u, 187687920720117505u }, { 11057405512036996122u, 150150336576094004u },
  {  6623802375033462826u, 240240538521750407u }, { 16367088344252501231u, 192192430817400325u },
  { 13093670675402000985u, 153753944653920260u }, {  2503129006933649959u, 246006311446272417u },
  { 13070549649772650937u, 196805049157017933u }, { 17835137349301941396u, 157444039325614346u },
  {  2710778055689733971u, 251910462920982955u }, {  2168622444551787177u, 201528370336786364u },
  {  5424246770383340065u, 161222696269429091u }, {  1300097203129523457u, 257956314031086546u },
  { 15797473021471260058u, 206365051224869236u }, {  8948629602435097724u, 165092040979895389u },
  {  3249760919670425388u, 264147265567832623u }, {  9978506365220160957u, 211317812454266098u },
  { 15361502721659949412u, 169054249963412878u }, {  2442311466204457120u, 270486799941460606u },
  { 16711244431931206989u, 216389439953168484u }, { 17058344360286875914u, 173111551962534787u },
  { 12535955717491360170u, 276978483140055660u }, { 10028764573993088136u, 221582786512044528u },
  { 15401709288678291155u, 177266229209635622u }, {  9885339602917624555u, 283625966735416996u },
  {  4218922867592189321u, 226900773388333597u }, { 14443184738299482427u, 181520618710666877u },
  {  4175850161155765295u, 145216494968533502u }, { 10370709072591134795u, 232346391949653603u },
  { 15675264887556728482u, 185877113559722882u }, {  5161514280561562140u, 148701690847778306u },
  {   879725219414678777u, 237922705356445290u }, {   703780175531743021u, 190338164285156232u },
  { 11631070584651125387u, 152270531428124985u }, {   162968861732249003u, 243632850284999977u },
  { 11198421533611530172u, 194906280227999981u }, {  5269388412147313814u, 155925024182399985u },
  {  8431021459435702103u, 249480038691839976u }, {  3055468352806651359u, 199584030953471981u },
  { 17201769941212962380u, 159667224762777584u }, { 16454785461715008838u, 255467559620444135u },
  { 13163828369372007071u, 204374047696355308u }, { 17909760324981426303u, 163499238157084246u },
  {  2830174816776909822u, 261598781051334795u }, {  2264139853421527858u, 209279024841067836u },
  { 16568707141704863579u, 167423219872854268u }, {  4373838538276319787u, 267877151796566830u },
  {  3499070830621055830u, 214301721437253464u }, {  6488605479238754987u, 171441377149802771u },
  {  3003071137298187333u, 274306203439684434u }, {  6091805724580460189u, 219444962751747547u },
  { 15941491023890099121u, 175555970201398037u }, { 10748990379256517301u, 280889552322236860u },
  {  8599192303405213841u, 224711641857789488u }, { 14258051472207991719u, 179769313486231590u }
};

inline constexpr uint64_t __DOUBLE_POW5_SPLIT[326][2] = {
  {                    0u,  72057594037927936u }, {                    0u,  90071992547409920u },
  {                    0u, 112589990684262400u }, {                    0u, 140737488355328000u },
  {                    0u,  87960930222080000u }, {                    0u, 109951162777600000u },
  {                    0u, 137438953472000000u }, {                    0u,  85899345920000000u },
  {                    0u, 107374182400000000u }, {                    0u, 134217728000000000u },
  {                    0u,  83886080000000000u }, {                    0u, 104857600000000000u },
  {                    0u, 131072000000000000u }, {                    0u,  81920000000000000u },
  {                    0u, 102400000000000000u }, {                    0u, 128000000000000000u },
  {                    0u,  80000000000000000u }, {                    0u, 100000000000000000u },
  {                    0u, 125000000000000000u }, {                    0u,  78125000000000000u },
  {                    0u,  97656250000000000u }, {                    0u, 122070312500000000u },
  {                    0u,  76293945312500000u }, {                    0u,  95367431640625000u },
  {                    0u, 119209289550781250u }, {  4611686018427387904u,  74505805969238281u },
  { 10376293541461622784u,  93132257461547851u }, {  8358680908399640576u, 116415321826934814u },
  {   612489549322387456u,  72759576141834259u }, { 14600669991935148032u,  90949470177292823u },
  { 13639151471491547136u, 113686837721616029u }, {  3213881284082270208u, 142108547152020037u },
  {  4314518811765112832u,  88817841970012523u }, {   781462496279003136u, 111022302462515654u },
  { 10200200157203529728u, 138777878078144567u }, { 13292654125893287936u,  86736173798840354u },
  {  7392445620511834112u, 108420217248550443u }, {  4628871007212404736u, 135525271560688054u },
  { 16728102434789916672u,  84703294725430033u }, {  7075069988205232128u, 105879118406787542u },
  { 18067209522111315968u, 132348898008484427u }, {  8986162942105878528u,  82718061255302767u },
  {  6621017659204960256u, 103397576569128459u }, {  3664586055578812416u, 129246970711410574u },
  { 16125424340018921472u,  80779356694631608u }, {  1710036351314100224u, 100974195868289511u },
  { 15972603494424788992u, 126217744835361888u }, {  9982877184015493120u,  78886090522101180u },
  { 12478596480019366400u,  98607613152626475u }, { 10986559581596820096u, 123259516440783094u },
  {  2254913720070624656u,  77037197775489434u }, { 12042014186943056628u,  96296497219361792u },
  { 15052517733678820785u, 120370621524202240u }, {  9407823583549262990u,  75231638452626400u },
  { 11759779479436578738u,  94039548065783000u }, { 14699724349295723422u, 117549435082228750u },
  {  4575641699882439235u,  73468396926392969u }, { 10331238143280436948u,  91835496157991211u },
  {  8302361660673158281u, 114794370197489014u }, {  1154580038986672043u, 143492962746861268u },
  {  9944984561221445835u,  89683101716788292u }, { 12431230701526807293u, 112103877145985365u },
  {  1703980321626345405u, 140129846432481707u }, { 17205888765512323542u,  87581154020301066u },
  { 12283988920035628619u, 109476442525376333u }, {  1519928094762372062u, 136845553156720417u },
  { 12479170105294952299u,  85528470722950260u }, { 15598962631618690374u, 106910588403687825u },
  {  5663645234241199255u, 133638235504609782u }, { 17374836326682913246u,  83523897190381113u },
  {  7883487353071477846u, 104404871487976392u }, {  9854359191339347308u, 130506089359970490u },
  { 10770660513014479971u,  81566305849981556u }, { 13463325641268099964u, 101957882312476945u },
  {  2994098996302961243u, 127447352890596182u }, { 15706369927971514489u,  79654595556622613u },
  {  5797904354682229399u,  99568244445778267u }, {  2635694424925398845u, 124460305557222834u },
  {  6258995034005762182u,  77787690973264271u }, {  3212057774079814824u,  97234613716580339u },
  { 17850130272881932242u, 121543267145725423u }, { 18073860448192289507u,  75964541966078389u },
  {  8757267504958198172u,  94955677457597987u }, {  6334898362770359811u, 118694596821997484u },
  { 13182683513586250689u,  74184123013748427u }, { 11866668373555425458u,  92730153767185534u },
  {  5609963430089506015u, 115912692208981918u }, { 17341285199088104971u,  72445432630613698u },
  { 12453234462005355406u,  90556790788267123u }, { 10954857059079306353u, 113195988485333904u },
  { 13693571323849132942u, 141494985606667380u }, { 17781854114260483896u,  88434366004167112u },
  {  3780573569116053255u, 110542957505208891u }, {   114030942967678664u, 138178696881511114u },
  {  4682955357782187069u,  86361685550944446u }, { 15077066234082509644u, 107952106938680557u },
  {  5011274737320973344u, 134940133673350697u }, { 14661261756894078100u,  84337583545844185u },
  {  4491519140835433913u, 105421979432305232u }, {  5614398926044292391u, 131777474290381540u },
  { 12732371365632458552u,  82360921431488462u }, {  6692092170185797382u, 102951151789360578u },
  { 17588487249587022536u, 128688939736700722u }, { 15604490549419276989u,  80430587335437951u },
  { 14893927168346708332u, 100538234169297439u }, { 14005722942005997511u, 125672792711621799u },
  { 15671105866394830300u,  78545495444763624u }, {  1142138259283986260u,  98181869305954531u },
  { 15262730879387146537u, 122727336632443163u }, {  7233363790403272633u,  76704585395276977u },
  { 13653390756431478696u,  95880731744096221u }, {  3231680390257184658u, 119850914680120277u },
  {  4325643253124434363u,  74906821675075173u }, { 10018740084832930858u,  93633527093843966u },
  {  3300053069186387764u, 117041908867304958u }, { 15897591223523656064u,  73151193042065598u },
  { 10648616992549794273u,  91438991302581998u }, {  4087399203832467033u, 114298739128227498u },
  { 14332621041645359599u, 142873423910284372u }, { 18181260187883125557u,  89295889943927732u },
  {  4279831161144355331u, 111619862429909666u }, { 14573160988285219972u, 139524828037387082u },
  { 13719911636105650386u,  87203017523366926u }, {  7926517508277287175u, 109003771904208658u },
  {   684774848491833161u, 136254714880260823u }, {  7345513307948477581u,  85159196800163014u },
  { 18405263671790372785u, 106448996000203767u }, { 18394893571310578077u, 133061245000254709u },
  { 13802651491282805250u,  83163278125159193u }, {  3418256308821342851u, 103954097656448992u },
  {  4272820386026678563u, 129942622070561240u }, {  2670512741266674102u,  81214138794100775u },
  { 17173198981865506339u, 101517673492625968u }, {  3019754653622331308u, 126897091865782461u },
  {  4193189667727651020u,  79310682416114038u }, { 14464859121514339583u,  99138353020142547u },
  { 13469387883465536574u, 123922941275178184u }, {  8418367427165960359u,  77451838296986365u },
  { 15134645302384838353u,  96814797871232956u }, {   471562554271496325u, 121018497339041196u },
  {  9518098633274461011u,  75636560836900747u }, {  7285937273165688360u,  94545701046125934u },
  { 18330793628311886258u, 118182126307657417u }, {  4539216990053847055u,  73863828942285886u },
  { 14897393274422084627u,  92329786177857357u }, {  4786683537745442072u, 115412232722321697u },
  { 14520892257159371055u,  72132645451451060u }, { 18151115321449213818u,  90165806814313825u },
  {  8853836096529353561u, 112707258517892282u }, {  1843923083806916143u, 140884073147365353u },
  { 12681666973447792349u,  88052545717103345u }, {  2017025661527576725u, 110065682146379182u },
  { 11744654113764246714u, 137582102682973977u }, {   422879793461572340u,  85988814176858736u },
  {   528599741826965425u, 107486017721073420u }, {   660749677283706782u, 134357522151341775u },
  {  7330497575943398595u,  83973451344588609u }, { 13774807988356636147u, 104966814180735761u },
  {  3383451930163631472u, 131208517725919702u }, { 15949715511634433382u,  82005323578699813u },
  {  6102086334260878016u, 102506654473374767u }, {  3015921899398709616u, 128133318091718459u },
  { 18025852251620051174u,  80083323807324036u }, {  4085571240815512351u, 100104154759155046u },
  { 14330336087874166247u, 125130193448943807u }, { 15873989082562435760u,  78206370905589879u },
  { 15230800334775656796u,  97757963631987349u }, {  5203442363187407284u, 122197454539984187u },
  {   946308467778435600u,  76373409087490117u }, {  5794571603150432404u,  95466761359362646u },
  { 16466586540792816313u, 119333451699203307u }, {  7985773578781816244u,  74583407312002067u },
  {  5370530955049882401u,  93229259140002584u }, {  6713163693812353001u, 116536573925003230u },
  { 18030785363914884337u,  72835358703127018u }, { 13315109668038829614u,  91044198378908773u },
  {  2808829029766373305u, 113805247973635967u }, { 17346094342490130344u, 142256559967044958u },
  {  6229622945628943561u,  88910349979403099u }, {  3175342663608791547u, 111137937474253874u },
  { 13192550366365765242u, 138922421842817342u }, {  3633657960551215372u,  86826513651760839u },
  { 18377130505971182927u, 108533142064701048u }, {  4524669058754427043u, 135666427580876311u },
  {  9745447189362598758u,  84791517238047694u }, {  2958436949848472639u, 105989396547559618u },
  { 12921418224165366607u, 132486745684449522u }, { 12687572408530742033u,  82804216052780951u },
  { 11247779492236039638u, 103505270065976189u }, {   224666310012885835u, 129381587582470237u },
  {  2446259452971747599u,  80863492239043898u }, { 12281196353069460307u, 101079365298804872u },
  { 15351495441336825384u, 126349206623506090u }, { 14206370669262903769u,  78968254139691306u },
  {  8534591299723853903u,  98710317674614133u }, { 15279925143082205283u, 123387897093267666u },
  { 14161639232853766206u,  77117435683292291u }, { 13090363022639819853u,  96396794604115364u },
  { 16362953778299774816u, 120495993255144205u }, { 12532689120651053212u,  75309995784465128u },
  { 15665861400813816515u,  94137494730581410u }, { 10358954714162494836u, 117671868413226763u },
  {  4168503687137865320u,  73544917758266727u }, {   598943590494943747u,  91931147197833409u },
  {  5360365506546067587u, 114913933997291761u }, { 11312142901609972388u, 143642417496614701u },
  {  9375932322719926695u,  89776510935384188u }, { 11719915403399908368u, 112220638669230235u },
  { 10038208235822497557u, 140275798336537794u }, { 10885566165816448877u,  87672373960336121u },
  { 18218643725697949000u, 109590467450420151u }, { 18161618638695048346u, 136988084313025189u },
  { 13656854658398099168u,  85617552695640743u }, { 12459382304570236056u, 107021940869550929u },
  {  1739169825430631358u, 133777426086938662u }, { 14922039196176308311u,  83610891304336663u },
  { 14040862976792997485u, 104513614130420829u }, {  3716020665709083144u, 130642017663026037u },
  {  4628355925281870917u,  81651261039391273u }, { 10397130925029726550u, 102064076299239091u },
  {  8384727637859770284u, 127580095374048864u }, {  5240454773662356427u,  79737559608780540u },
  {  6550568467077945534u,  99671949510975675u }, {  3576524565420044014u, 124589936888719594u },
  {  6847013871814915412u,  77868710555449746u }, { 17782139376623420074u,  97335888194312182u },
  { 13004302183924499284u, 121669860242890228u }, { 17351060901807587860u,  76043662651806392u },
  {  3242082053549933210u,  95054578314757991u }, { 17887660622219580224u, 118818222893447488u },
  { 11179787888887237640u,  74261389308404680u }, { 13974734861109047050u,  92826736635505850u },
  {  8245046539531533005u, 116033420794382313u }, { 16682369133275677888u,  72520887996488945u },
  {  7017903361312433648u,  90651109995611182u }, { 17995751238495317868u, 113313887494513977u },
  {  8659630992836983623u, 141642359368142472u }, {  5412269370523114764u,  88526474605089045u },
  { 11377022731581281359u, 110658093256361306u }, {  4997906377621825891u, 138322616570451633u },
  { 14652906532082110942u,  86451635356532270u }, {  9092761128247862869u, 108064544195665338u },
  {  2142579373455052779u, 135080680244581673u }, { 12868327154477877747u,  84425425152863545u },
  {  2250350887815183471u, 105531781441079432u }, {  2812938609768979339u, 131914726801349290u },
  {  6369772649532999991u,  82446704250843306u }, { 17185587848771025797u, 103058380313554132u },
  {  3035240737254230630u, 128822975391942666u }, {  6508711479211282048u,  80514359619964166u },
  { 17359261385868878368u, 100642949524955207u }, { 17087390713908710056u, 125803686906194009u },
  {  3762090168551861929u,  78627304316371256u }, {  4702612710689827411u,  98284130395464070u },
  { 15101637925217060072u, 122855162994330087u }, { 16356052730901744401u,  76784476871456304u },
  {  1998321839917628885u,  95980596089320381u }, {  7109588318324424010u, 119975745111650476u },
  { 13666864735807540814u,  74984840694781547u }, { 12471894901332038114u,  93731050868476934u },
  {  6366496589810271835u, 117163813585596168u }, {  3979060368631419896u,  73227383490997605u },
  {  9585511479216662775u,  91534229363747006u }, {  2758517312166052660u, 114417786704683758u },
  { 12671518677062341634u, 143022233380854697u }, {  1002170145522881665u,  89388895863034186u },
  { 10476084718758377889u, 111736119828792732u }, { 13095105898447972362u, 139670149785990915u },
  {  5878598177316288774u,  87293843616244322u }, { 16571619758500136775u, 109117304520305402u },
  { 11491152661270395161u, 136396630650381753u }, {   264441385652915120u,  85247894156488596u },
  {   330551732066143900u, 106559867695610745u }, {  5024875683510067779u, 133199834619513431u },
  { 10058076329834874218u,  83249896637195894u }, {  3349223375438816964u, 104062370796494868u },
  {  4186529219298521205u, 130077963495618585u }, { 14145795808130045513u,  81298727184761615u },
  { 13070558741735168987u, 101623408980952019u }, { 11726512408741573330u, 127029261226190024u },
  {  7329070255463483331u,  79393288266368765u }, { 13773023837756742068u,  99241610332960956u },
  { 17216279797195927585u, 124052012916201195u }, {  8454331864033760789u,  77532508072625747u },
  {  5956228811614813082u,  96915635090782184u }, {  7445286014518516353u, 121144543863477730u },
  {  9264989777501460624u,  75715339914673581u }, { 16192923240304213684u,  94644174893341976u },
  {  1794409976670715490u, 118305218616677471u }, {  8039035263060279037u,  73940761635423419u },
  {  5437108060397960892u,  92425952044279274u }, { 16019757112352226923u, 115532440055349092u },
  {   788976158365366019u,  72207775034593183u }, { 14821278253238871236u,  90259718793241478u },
  {  9303225779693813237u, 112824648491551848u }, { 11629032224617266546u, 141030810614439810u },
  { 11879831158813179495u,  88144256634024881u }, {  1014730893234310657u, 110180320792531102u },
  { 10491785653397664129u, 137725400990663877u }, {  8863209042587234033u,  86078375619164923u },
  {  6467325284806654637u, 107597969523956154u }, { 17307528642863094104u, 134497461904945192u },
  { 10817205401789433815u,  84060913690590745u }, { 18133192770664180173u, 105076142113238431u },
  { 18054804944902837312u, 131345177641548039u }, { 18201782118205355176u,  82090736025967524u },
  {  4305483574047142354u, 102613420032459406u }, { 14605226504413703751u, 128266775040574257u },
  {  2210737537617482988u,  80166734400358911u }, { 16598479977304017447u, 100208418000448638u },
  { 11524727934775246001u, 125260522500560798u }, {  2591268940807140847u,  78287826562850499u },
  { 17074144231291089770u,  97859783203563123u }, { 16730994270686474309u, 122324729004453904u },
  { 10456871419179046443u,  76452955627783690u }, {  3847717237119032246u,  95566194534729613u },
  {  9421332564826178211u, 119457743168412016u }, {  5888332853016361382u,  74661089480257510u },
  { 16583788103125227536u,  93326361850321887u }, { 16118049110479146516u, 116657952312902359u },
  { 16991309721690548428u,  72911220195563974u }, { 12015765115258409727u,  91139025244454968u },
  { 15019706394073012159u, 113923781555568710u }, {  9551260955736489391u, 142404726944460888u },
  {  5969538097335305869u,  89002954340288055u }, {  2850236603241744433u, 111253692925360069u }
};

 
 
inline constexpr int __TABLE_SIZE = 64;

inline constexpr uint16_t __POW10_OFFSET[__TABLE_SIZE] = {
  0, 2, 5, 8, 12, 16, 21, 26, 32, 39,
  46, 54, 62, 71, 80, 90, 100, 111, 122, 134,
  146, 159, 173, 187, 202, 217, 233, 249, 266, 283,
  301, 319, 338, 357, 377, 397, 418, 440, 462, 485,
  508, 532, 556, 581, 606, 632, 658, 685, 712, 740,
  769, 798, 828, 858, 889, 920, 952, 984, 1017, 1050,
  1084, 1118, 1153, 1188
};

inline constexpr uint64_t __POW10_SPLIT[1224][3] = {
  {                    1u,    72057594037927936u,                    0u },
  {   699646928636035157u,             72057594u,                    0u },
  {                    1u,                    0u,                  256u },
  { 11902091922964236229u,        4722366482869u,                    0u },
  {  6760415703743915872u,                 4722u,                    0u },
  {                    1u,                    0u,             16777216u },
  { 13369850649504950658u,   309485009821345068u,                    0u },
  { 15151142278969419334u,            309485009u,                    0u },
  {                    1u,                    0u,          75511627776u },
  {  4635408826454083567u,  9437866644873197963u,                 1099u },
  { 12367138975830625353u,       20282409603651u,                    0u },
  {  7555853734021184432u,                20282u,                    0u },
  {                    1u,                    0u,         250037927936u },
  {  5171444645924616995u,   699646928636035156u,             72057594u },
  { 16672297533003297786u,  1329227995784915872u,                    0u },
  { 14479142226848862515u,           1329227995u,                    0u },
  {                    1u,                    0u,         181645213696u },
  { 12214193123817091081u, 11902091922964236228u,         114366482869u },
  { 16592893013671929435u,  6760415703743915871u,                 4722u },
  {  4549827147718617003u,       87112285931760u,                    0u },
  {  5274510003815168971u,                87112u,                    0u },
  {                    1u,                    0u,          44724781056u },
  {  9794971998307800535u, 13369850649504950657u,         209821345068u },
  { 14720142899209240169u, 15151142278969419333u,            309485009u },
  {  4300745446091561535u,  5708990770823839524u,                    0u },
  { 15197156861335443364u,           5708990770u,                    0u },
  {                    1u,                    0u,         139251286016u },
  { 13484604155038683037u,  4635408826454083566u,          67670423947u },
  {  8356963862052375699u, 12367138975830625352u,          58409603651u },
  {  5850852848337610021u,  7555853734021184431u,                20282u },
  {  2712780827214982050u,      374144419156711u,                    0u },
  {  7732076577307618052u,               374144u,                    0u },
  {                    1u,                    0u,          84280344576u },
  { 17296309485351745867u,  5171444645924616994u,         160903807060u },
  { 16598859101615853088u, 16672297533003297785u,         219784915872u },
  {  7469952526870444257u, 14479142226848862514u,           1329227995u },
  { 13531654022114669524u,  6073184580144670117u,                    1u },
  { 15757609704383306943u,          24519928653u,                    0u },
  {  9590990814237149590u,                   24u,                    0u },
  {                    1u,                    0u,         196662132736u },
  { 15408590707489433890u, 12214193123817091080u,          95899502532u },
  { 18332056844289122710u, 16592893013671929434u,         240246646623u },
  { 11114572877353986193u,  4549827147718617002u,          72285931760u },
  {  1703393793997526525u,  5274510003815168970u,                87112u },
  {  5082852056285196265u,     1606938044258990u,                    0u },
  {   816434266573722365u,              1606938u,                    0u },
  {                    1u,                    0u,         129530986496u },
  {  5736523019264798742u,  9794971998307800534u,          69797980545u },
  { 10129314776268243339u, 14720142899209240168u,          36233143877u },
  { 16511595775483995364u,  4300745446091561534u,          50823839524u },
  { 12367293405401453325u, 15197156861335443363u,           5708990770u },
  { 16934621733248854291u, 13078571300009428617u,                    5u },
  { 10278280417769171336u,         105312291668u,                    0u },
  {  5760764486226151240u,                  105u,                    0u },
  {                    1u,                    0u,         238731001856u },
  {  4128368337188369761u, 13484604155038683036u,          72453031918u },
  { 10240941003671005056u,  8356963862052375698u,         175317175368u },
  { 17933378316822368251u,  5850852848337610020u,         231147060143u },
  {  8346249813075698616u,  2712780827214982049u,         128419156711u },
  { 15906203609160902695u,  7732076577307618051u,               374144u },
  { 14525607416135386328u,     6901746346790563u,                    0u },
  {  6397156777364256320u,              6901746u,                    0u },
  {                    1u,                    0u,          34937634816u },
  { 16798760952716600048u, 17296309485351745866u,         249899825954u },
  {  2419982808370854967u, 16598859101615853087u,          50404946937u },
  {  2922947087773078956u,  7469952526870444256u,         165733552434u },
  { 15419220167069510190u, 13531654022114669523u,          77854221733u },
  {  3452124642157173416u, 15757609704383306942u,          24519928653u },
  {  5979700067267186899u,  9590990814237149589u,                   24u },
  {  4913998146922579597u,         452312848583u,                    0u },
  {  5771037749337678924u,                  452u,                    0u },
  {                    1u,                    0u,           8835301376u },
  {  3464734175350698519u, 15408590707489433889u,          90993782792u },
  {  9334527711335850125u, 18332056844289122709u,         170602522202u },
  {  7269882896518450106u, 11114572877353986192u,         202092341162u },
  {  1372511258182263196u,  1703393793997526524u,         174275541962u },
  {  7571228438575951046u,  5082852056285196264u,          26044258990u },
  {  2992506536646070406u,   816434266573722364u,              1606938u },
  {   524517896824344606u,    29642774844752946u,                    0u },
  { 15582941400898702773u,             29642774u,                    0u },
  {                    1u,                    0u,         214310977536u },
  {  3846112492507251066u,  5736523019264798741u,         104549111254u },
  { 16681117750123089487u, 10129314776268243338u,          62895095400u },
  { 14986314536556547267u, 16511595775483995363u,         163670432318u },
  {  2573712825027107389u, 12367293405401453324u,         137918027683u },
  {  7504855874008324928u, 16934621733248854290u,          84557186697u },
  {  9572138030626879787u, 10278280417769171335u,         105312291668u },
  {  8520676959353394843u,  5760764486226151239u,                  105u },
  { 13448984662897903496u,        1942668892225u,                    0u },
  { 12338883700918130648u,                 1942u,                    0u },
  {                    1u,                    0u,         156223799296u },
  {  2517285787892561600u,  4128368337188369760u,         146555162524u },
  {  4338831817635138103u, 10240941003671005055u,          36972170386u },
  {  1561495325934523196u, 17933378316822368250u,         161452451108u },
  { 12262635050079398786u,  8346249813075698615u,           3862277025u },
  { 11144065765517284188u, 15906203609160902694u,         163787434755u },
  {  1212260522471875711u, 14525607416135386327u,         242346790563u },
  {  9695352922247418869u,  6397156777364256319u,              6901746u },
  {  7227025834627242948u,   127314748520905380u,                    0u },
  {  9609008238705447829u,            127314748u,                    0u },
  {                    1u,                    0u,          74910662656u },
  {  3609144142396852269u, 16798760952716600047u,          31131187530u },
  { 11568848377382068865u,  2419982808370854966u,         224158453279u },
  { 10068303578029323957u,  2922947087773078955u,         211835877600u },
  { 11645070846862630231u, 15419220167069510189u,         190187140051u },
  { 12449386705878485055u,  3452124642157173415u,         149324160190u },
  { 15025619323517318418u,  5979700067267186898u,         199266388373u },
  { 14996237555047131272u,  4913998146922579596u,         196312848583u },
  { 10211005638256058413u,  5771037749337678923u,                  452u },
  {  1014743503555840530u,        8343699359066u,                    0u },
  { 12900897707145290678u,                 8343u,                    0u },
  {                    1u,                    0u,          33187823616u },
  {  4718003016239473662u,  3464734175350698518u,         149506025761u },
  { 14865830648693666725u,  9334527711335850124u,         144394101141u },
  { 14754517212823091778u,  7269882896518450105u,         252074403984u },
  { 11113946551474911901u,  1372511258182263195u,         232410437116u },
  {  1963520352638130630u,  7571228438575951045u,         252162224104u },
  { 13342587341404964200u,  2992506536646070405u,          50028434172u },
  {  6240392545013573291u,   524517896824344605u,          22844752946u },
  { 14377490861349714758u, 15582941400898702772u,             29642774u },
  {  1717863312631397839u,   546812681195752981u,                    0u },
  {  3611005143890591770u,            546812681u,                    0u },
  {                    1u,                    0u,          21208498176u },
  { 13168252824351245504u,  3846112492507251065u,         138904285205u },
  {   735883891883379688u, 16681117750123089486u,         227812409738u },
  { 10609203866866106404u, 14986314536556547266u,          12139521251u },
  { 12358191111890306470u,  2573712825027107388u,          18406839052u },
  { 15229916368406413528u,  7504855874008324927u,         135518906642u },
  {  7241424335568075942u,  9572138030626879786u,          71461906823u },
  {  6049715868779871913u,  8520676959353394842u,          65729070919u },
  {  2000548404719336762u, 13448984662897903495u,         150668892225u },
  {  1410974761895205301u, 12338883700918130647u,                 1942u },
  { 16000132467694084868u,       35835915874844u,                    0u },
  { 16894908866816792556u,                35835u,                    0u },
  {                    1u,                    0u,          96136462336u },
  {   589096329272056762u,  2517285787892561599u,         127235208544u },
  {  7097729792403256904u,  4338831817635138102u,         250084648831u },
  {  8553736750439287020u,  1561495325934523195u,         183664758778u },
  {  2114152625261065696u, 12262635050079398785u,          38604121015u },
  {  9817523680007641224u, 11144065765517284187u,         215065716774u },
  { 13047215537500048015u,  1212260522471875710u,          63525586135u },
  { 16755544192002345880u,  9695352922247418868u,         164391777855u },
  {  6930119832670648356u,  7227025834627242947u,          60520905380u },
  { 14560698131901886167u,  9609008238705447828u,            127314748u },
  { 16408020927503338035u,  2348542582773833227u,                    0u },
  { 14274703510609809116u,           2348542582u,                    0u },
  {                    1u,                    0u,         239195652096u },
  { 16428432973129962470u,  3609144142396852268u,          54627148527u },
  {  3721112279790863774u, 11568848377382068864u,         171545803830u },
  { 18032764903259620753u, 10068303578029323956u,          45631280555u },
  { 18058455550468776079u, 11645070846862630230u,         167674882605u },
  { 15692090139033993190u, 12449386705878485054u,         210814540455u },
  {   389416944300619393u, 15025619323517318417u,         140812947666u },
  { 12009691357260487293u, 14996237555047131271u,          75553539724u },
  { 13494259174449809900u, 10211005638256058412u,          90055009355u },
  { 18288583400616279877u,  1014743503555840529u,         151699359066u },
  {     7216107869057472u, 12900897707145290677u,                 8343u },
  { 17237061291959073878u,      153914086704665u,                    0u },
  {  1599418782488783273u,               153914u,                    0u },
  {                    1u,                    0u,          22255763456u },
  {  9565464987240335777u,  4718003016239473661u,         140805878294u },
  {   857713933775880687u, 14865830648693666724u,         185799843980u },
  {  4621617820081363356u, 14754517212823091777u,         155602488249u },
  {  9630162611715632528u, 11113946551474911900u,         197106442651u },
  {  9283986497984645815u,  1963520352638130629u,         133723303109u },
  {  8981807745082630996u, 13342587341404964199u,          29338292357u },
  { 18350140531565934622u,  6240392545013573290u,         180779405341u },
  {  4411619033127524143u, 14377490861349714757u,          21093125556u },
  {  1852297584111266889u,  1717863312631397838u,           9195752981u },
  { 11746243463811666096u,  3611005143890591769u,            546812681u },
  {  6335244004343789147u, 10086913586276986678u,                    0u },
  {  5109502367228239844u,          10086913586u,                    0u },
  {  1603272682579847821u,                   10u,                    0u },
  {                    1u,                    0u,         121713852416u },
  {  6609546910952910052u, 13168252824351245503u,          78039892345u },
  {  3911171343112928288u,   735883891883379687u,         194575126094u },
  {  5254510615100863555u, 10609203866866106403u,          60669938882u },
  {  3881927570803887650u, 12358191111890306469u,          63825615420u },
  {  6379348759607163190u, 15229916368406413527u,          42392558399u },
  { 14595733737222406466u,  7241424335568075941u,         154327955754u },
  { 14670223432002373542u,  6049715868779871912u,         135108449946u },
  {  4045087795619708513u,  2000548404719336761u,         215076489095u },
  { 12598467307137142718u,  1410974761895205300u,          28867368919u },
  {   734704388050777108u, 16000132467694084867u,         251915874844u },
  {  5682201693687285822u, 16894908866816792555u,                35835u },
  { 11048712694145438788u,      661055968790248u,                    0u },
  { 17871025777010319485u,               661055u,                    0u },
  {                    1u,                    0u,         191031934976u },
  { 15268761435931663695u,   589096329272056761u,          54384768703u },
  {  5016238054648555438u,  7097729792403256903u,          59463698998u },
  { 14236047313993899750u,  8553736750439287019u,         129114608443u },
  {  6957759675154690848u,  2114152625261065695u,          91532209025u },
  { 18439367135478514473u,  9817523680007641223u,         126707290971u },
  {  8539004472540641041u, 13047215537500048014u,         244908319870u },
  {  1908462039431738399u, 16755544192002345879u,         195375682548u },
  {   714690453250792146u,  6930119832670648355u,         148789337027u },
  { 13782189447673929633u, 14560698131901886166u,          11889480596u },
  {  3584742913798803164u, 16408020927503338034u,         118773833227u },
  {  4347581515245125291u, 14274703510609809115u,           2348542582u },
  { 16836742268156371392u,  6429475823218628948u,                    2u },
  { 11764082328865615308u,          43322963970u,                    0u },
  {  5957633711383291746u,                   43u,                    0u },
  {                    1u,                    0u,          44890587136u },
  {  9917186842884466953u, 16428432973129962469u,         128201721900u },
  {  4751011869809829335u,  3721112279790863773u,         180977558144u },
  { 11068497969931435029u, 18032764903259620752u,          86978950836u },
  { 17118056985122509954u, 18058455550468776078u,          62850669910u },
  { 14607066080907684459u, 15692090139033993189u,          17021110334u },
  { 11768892370493391107u,   389416944300619392u,         135651046673u },
  {  4043396447647747170u, 12009691357260487292u,          44731525255u },
  {  1670341095362518057u, 13494259174449809899u,          17991426092u },
  {  3190817644167043165u, 18288583400616279876u,         181000391185u },
  { 10425820027224322486u,     7216107869057471u,          25934422965u },
  { 13139964660506311565u, 17237061291959073877u,          58086704665u },
  {  2297772885416059937u,  1599418782488783272u,               153914u },
  {  7677687919964523763u,     2839213766779714u,                    0u },
  { 14144589152747892828u,              2839213u,                    0u },
  {                    1u,                    0u,         253518544896u },
  { 17069730341503660290u,  9565464987240335776u,         164046496765u },
  { 18167423787163077107u,   857713933775880686u,          65250538404u },
  {  3765746945827805904u,  4621617820081363355u,         156522052161u },
  { 10241734342430761691u,  9630162611715632527u,         197503285916u },
  { 13345717282537140784u,  9283986497984645814u,         103486904773u },
  {  9313926784816939953u,  8981807745082630995u,         170994763111u },
  {   550974205049535019u, 18350140531565934621u,          69239154346u },
  {  4494692285504086222u,  4411619033127524142u,         206100413253u },
  {  1134308559863725587u,  1852297584111266888u,          25636765134u },
  { 17587558045116130233u, 11746243463811666095u,          54343434265u },
  {  9817142032346161594u,  6335244004343789146u,          50276986678u },
  {  6071944935834172568u,  5109502367228239843u,          10086913586u },
  { 11564168293299416955u,  1603272682579847820u,                   10u },
  { 12458266507226064437u,         186070713419u,                    0u },
  {  1304432355328256915u,                  186u,                    0u },
  {                    1u,                    0u,         191358304256u },
  { 15946798815542087355u,  6609546910952910051u,         231212025023u },
  { 12082566083831286138u,  3911171343112928287u,          35284847591u },
  { 11449623684706196411u,  5254510615100863554u,         165210439715u },
  { 17518743620362604446u,  3881927570803887649u,         215345825189u },
  {  9451061563087633805u,  6379348759607163189u,         165791236311u },
  { 13191114787623314926u, 14595733737222406465u,         168795274405u },
  {  8367349876734474799u, 14670223432002373541u,          57219284648u },
  {  6544253801674393507u,  4045087795619708512u,         180682964281u },
  { 16113906253336597498u, 12598467307137142717u,           3039828404u },
  { 10294087136797312392u,   734704388050777107u,         235308032771u },
  {  9127173070014462803u,  5682201693687285821u,         232598951915u },
  { 16266900839595484952u, 11048712694145438787u,          63968790248u },
  {  3299745387370952632u, 17871025777010319484u,               661055u },
  { 12061115182604399189u,    12194330274671844u,                    0u },
  {  5066801222582989646u,             12194330u,                    0u },
  {                    1u,                    0u,         185827721216u },
  {  7568423425299591513u, 15268761435931663694u,          71271930809u },
  { 16561505984665207377u,  5016238054648555437u,         235771737671u },
  {  4329114621856906245u, 14236047313993899749u,         223377180907u },
  {  1477500474861899139u,  6957759675154690847u,         135999600095u },
  { 16891579639263969684u, 18439367135478514472u,         142462900359u },
  {  4684451357140027420u,  8539004472540641040u,         151103457934u },
  { 14727186580409080709u,  1908462039431738398u,          35038743447u },
  { 15864176859687308834u,   714690453250792145u,         214747133987u },
  {  1755486942842684438u, 13782189447673929632u,          50194329302u },
  { 17417077516652710041u,  3584742913798803163u,         219235682866u },
  {  4290982361913532783u,  4347581515245125290u,          84912721627u },
  { 11826659981004351409u, 16836742268156371391u,           2637732180u },
  {   932930645678090820u, 11764082328865615307u,          43322963970u },
  { 12707792781328052617u,  5957633711383291745u,                   43u },
  { 16491596426880311906u,         799167628880u,                    0u },
  {  3092207065214166010u,                  799u,                    0u },
  {                    1u,                    0u,         229537611776u },
  {  8142946531605512550u,  9917186842884466952u,         157257552869u },
  {  5328402096432654515u,  4751011869809829334u,         144600024477u },
  {  1932004361303814512u, 11068497969931435028u,         142927971728u },
  {  2511477647985517771u, 17118056985122509953u,         229791850638u },
  { 17451375493324716694u, 14607066080907684458u,         128637992933u },
  {  9489266854478998489u, 11768892370493391106u,         124219192960u },
  {  8803053132063235169u,  4043396447647747169u,         235090549372u },
  { 16198682197142616773u,  1670341095362518056u,          68172974571u },
  { 13696242485403414202u,  3190817644167043164u,         191565184836u },
  { 16409082426079859931u, 10425820027224322485u,          85712318911u },
  { 11653410736879597610u, 13139964660506311564u,         168124562517u },
  { 13589514120653213261u,  2297772885416059936u,          66416208296u },
  {  8032934885905905774u,  7677687919964523762u,         173766779714u },
  {  2753021350129449273u, 14144589152747892827u,              2839213u },
  { 16974897459201404133u,    52374249726338269u,                    0u },
  { 13398576176159101589u,             52374249u,                    0u },
  {                    1u,                    0u,         160925351936u },
  { 10284586955251725351u, 17069730341503660289u,         238984858016u },
  {  5294476488634150891u, 18167423787163077106u,         155204141550u },
  { 15833244538135063323u,  3765746945827805903u,         143555205531u },
  { 10348512742273116664u, 10241734342430761690u,         182723472783u },
  { 13658504610142595663u, 13345717282537140783u,          83504908982u },
  { 11956362239240850266u,  9313926784816939952u,          29029868371u },
  { 13415901703662731781u,   550974205049535018u,          46243657757u },
  {  5161774027546852762u,  4494692285504086221u,          72061490990u },
  { 15274384838790587711u,  1134308559863725586u,         175953423432u },
  { 14233354597679374929u, 17587558045116130232u,          90532188335u },
  {  4274656492162486921u,  9817142032346161593u,         227329160794u },
  { 12040276505541795046u,  6071944935834172567u,         140626894819u },
  { 13238307206256765457u, 11564168293299416954u,          75675363980u },
  { 12850161204172713271u, 12458266507226064436u,         186070713419u },
  { 17531777095001445154u,  1304432355328256914u,                  186u },
  {  5623628114515245990u,        3432398830065u,                    0u },
  {  7357116143579573377u,                 3432u,                    0u },
  {                    1u,                    0u,         227864477696u },
  {  3555734177475596582u, 15946798815542087354u,          31654997219u },
  { 14001876724756424382u, 12082566083831286137u,          66620685343u },
  { 18159905057231476140u, 11449623684706196410u,          33949692994u },
  {  5585207679308509467u, 17518743620362604445u,          53512343073u },
  { 13948697622866724672u,  9451061563087633804u,          65715091765u },
  {  9807691927739036432u, 13191114787623314925u,         165453594945u },
  { 15818010096140820918u,  8367349876734474798u,          96354764709u },
  {  5629845624785010943u,  6544253801674393506u,         189873536608u },
  {  9517635131137734707u, 16113906253336597497u,          19558043581u },
  {   619338244618780585u, 10294087136797312391u,          61494785043u },
  { 11632367007491958899u,  9127173070014462802u,          67881830461u },
  { 12083314261009739916u, 16266900839595484951u,         124178879555u },
  { 16880538609458881650u,  3299745387370952631u,         228653834364u },
  { 17404223674486504228u, 12061115182604399188u,          26274671844u },
  {  7089067015287185433u,  5066801222582989645u,             12194330u },
  {  2592264228029443648u,   224945689727159819u,                    0u },
  { 13413731084370224440u,            224945689u,                    0u },
  {                    1u,                    0u,          78410285056u },
  {  9323915941641553425u,  7568423425299591512u,         173897801038u },
  { 12155831029092699564u, 16561505984665207376u,         229234681773u },
  { 17397171276588232676u,  4329114621856906244u,          31080095461u },
  { 11874560617553253769u,  1477500474861899138u,          40915694367u },
  { 13444839516837727954u, 16891579639263969683u,          16253944616u },
  { 16994416043584590671u,  4684451357140027419u,          30798362384u },
  { 15879694502877015730u, 14727186580409080708u,         209859998750u },
  {  4234647645735263359u, 15864176859687308833u,         160095165137u },
  {  7978589901512919496u,  1755486942842684437u,         219944181664u },
  {  6114237175390859894u, 17417077516652710040u,         170232614619u },
  {  8658612872088282708u,  4290982361913532782u,         191641124522u },
  { 10253813330683324853u, 11826659981004351408u,         203050574271u },
  { 13289465061747830991u,   932930645678090819u,          97688890827u },
  {  4123165538545565412u, 12707792781328052616u,          80894011233u },
  {  7846417485927038481u, 16491596426880311905u,          31167628880u },
  { 10562273346358018864u,  3092207065214166009u,                  799u },
  {  2691512658346619120u,       14742040721959u,                    0u },
  {   751187558544605998u,                14742u,                    0u },
  {                    1u,                    0u,           8441430016u },
  {  3757709791947931308u,  8142946531605512549u,         214288853256u },
  {  3452755398462519465u,  5328402096432654514u,          20104734166u },
  {  3105818720159874523u,  1932004361303814511u,         129136147476u },
  { 16859138458894499364u,  2511477647985517770u,         106946040961u },
  { 12271894740606233755u, 17451375493324716693u,           2514414186u },
  {  5429638071845793701u,  9489266854478998488u,          97477214466u },
  {   145278150038876889u,  8803053132063235168u,          40878132321u },
  {  9050266019724932450u, 16198682197142616772u,          92742474792u },
  { 11907016253451490866u, 13696242485403414201u,         181889538140u },
  {  2472757296513770735u, 16409082426079859930u,         140631732661u },
  { 10558733798178239360u, 11653410736879597609u,          32736689036u },
  { 15917322570831255850u, 13589514120653213260u,         242435466272u },
  { 12254334656791355238u,  8032934885905905773u,          91149241586u },
  {  7869542424662730262u,  2753021350129449272u,         221920211035u },
  {  1378558986933000253u, 16974897459201404132u,         233726338269u },
  { 13521405041909411105u, 13398576176159101588u,             52374249u },
  {  3206744593298092012u,   966134380754314586u,                    0u },
  { 13914648122214918505u,            966134380u,                    0u },
  {                    1u,                    0u,           1557528576u },
  {  1235541077112082496u, 10284586955251725350u,         242287014145u },
  { 12014985518315533846u,  5294476488634150890u,         207858321906u },
  {  1561535086344155741u, 15833244538135063322u,         218560993999u },
  { 12761747276316224577u, 10348512742273116663u,          47740429018u },
  {  9745594781103966137u, 13658504610142595662u,         176648155695u },
  { 17514238702394846785u, 11956362239240850265u,          42727277488u },
  {  2428898913707151713u, 13415901703662731780u,         205279820330u },
  {    71666709959904945u,  5161774027546852761u,          18828026061u },
  {  4049380135452919193u, 15274384838790587710u,         184771591698u },
  { 18422240861777453733u, 14233354597679374928u,         185231729592u },
  {  2914504416394425696u,  4274656492162486920u,         151652704697u },
  { 12721377795748989418u, 12040276505541795045u,         122717650071u },
  {  2626074459217717422u, 13238307206256765456u,          52696608634u },
  {  4261529925046307655u, 12850161204172713270u,         146950399540u },
  { 11536038685430305586u, 17531777095001445153u,         241304857490u },
  { 12555757789435162768u,  5623628114515245989u,         104398830065u },
  { 11905178684546080059u,  7357116143579573376u,                 3432u },
  { 14032797718924543051u,       63316582777114u,                    0u },
  { 10750340288005853484u,                63316u,                    0u },
  {                    1u,                    0u,         186192756736u },
  {  9660290106216358253u,  3555734177475596581u,         121759043258u },
  { 14820142034615351103u, 14001876724756424381u,         186984450425u },
  { 12674041783707777619u, 18159905057231476139u,         157302774714u },
  { 15386686816442679994u,  5585207679308509466u,         140756160413u },
  {  5679510383719146248u, 13948697622866724671u,         237531676044u },
  {  1391101719248678506u,  9807691927739036431u,          46857496045u },
  {  3364596672173710517u, 15818010096140820917u,         162305194542u },
  { 11276509210104319732u,  5629845624785010942u,         249515952034u },
  {  5316312656902630164u,  9517635131137734706u,         135033574393u },
  { 17470981304473644647u,   619338244618780584u,          82630591879u },
  {  7373293636384920591u, 11632367007491958898u,          23655037778u },
  {  7616810902585191937u, 12083314261009739915u,         183915095831u },
  { 12740295655921903924u, 16880538609458881649u,          84943484855u },
  { 18366635945916526940u, 17404223674486504227u,          77384299092u },
  {  4472171448243407067u,  7089067015287185432u,          11140526925u },
  {   229592460858185629u,  2592264228029443647u,          25727159819u },
  { 12749672866417114996u, 13413731084370224439u,            224945689u },
  {  9452256722867098693u,  4149515568880992958u,                    0u },
  { 16251451636418604634u,           4149515568u,                    0u },
  {                    1u,                    0u,          88505450496u },
  {  4515791283442995454u,  9323915941641553424u,          80658968920u },
  { 13306155670047701346u, 12155831029092699563u,           4943102544u },
  {  4456930152933417601u, 17397171276588232675u,         130643721220u },
  {  9089157128546489637u, 11874560617553253768u,         147728846210u },
  { 12437332180345515840u, 13444839516837727953u,          27921269139u },
  {  3433060408790452524u, 16994416043584590670u,         132860839963u },
  {  8275594526021936172u, 15879694502877015729u,          33229560708u },
  {  3846512444641107689u,  4234647645735263358u,          21432520225u },
  {  6210962618469046250u,  7978589901512919495u,         152331453461u },
  {  7272858906616296575u,  6114237175390859893u,         110469384344u },
  {  3710743300451225347u,  8658612872088282707u,         176555860334u },
  {  6424677242672030600u, 10253813330683324852u,          67720423344u },
  { 11485842256170301862u, 13289465061747830990u,         136223517251u },
  {  7355797963557024308u,  4123165538545565411u,          97425355144u },
  {  6358188982569427273u,  7846417485927038480u,         249572581985u },
  { 12475094728768767402u, 10562273346358018863u,          39145907193u },
  { 17288154837907896183u,  2691512658346619119u,         150040721959u },
  {  2983850577727105262u,   751187558544605997u,                14742u },
  { 13918604635001185935u,      271942652322184u,                    0u },
  { 12033220395769876327u,               271942u,                    0u },
  {                    1u,                    0u,         101203705856u },
  {  5782377197813462997u,  3757709791947931307u,         178187174245u },
  { 17732139848231399226u,  3452755398462519464u,         111168366770u },
  {  3628839527415562921u,  3105818720159874522u,         202913935727u },
  {  3188692267613601004u, 16859138458894499363u,         149665260746u },
  {  5168130193478377352u, 12271894740606233754u,         216294341269u },
  { 12556227529405091290u,  5429638071845793700u,          96007875544u },
  { 15087090312791441192u,   145278150038876888u,         196490615904u },
  { 10281804758610642494u,  9050266019724932449u,         185645480644u },
  { 14238177586158586580u, 11907016253451490865u,         218134048441u },
  {  7107927498217678128u,  2472757296513770734u,          41572390106u },
  {  3845814658485364450u, 10558733798178239359u,          76862879785u },
  {   714293333681725946u, 15917322570831255849u,         109664308812u },
  { 16766172658649116982u, 12254334656791355237u,          56426608749u },
  {   812461421432632215u,  7869542424662730261u,         228074731832u },
  { 15218024718633799196u,  1378558986933000252u,         148732996836u },
  {  8110797782612805146u, 13521405041909411104u,          90173837972u },
  { 15941193964933529227u,  3206744593298092011u,         108754314586u },
  { 14144280602323277933u, 13914648122214918504u,            966134380u },
  { 15072402647813125245u, 17822033662586700072u,                    0u },
  { 10822706091283369889u,          17822033662u,                    0u },
  { 15163844593710966731u,                   17u,                    0u },
  {                    1u,                    0u,          38066978816u },
  {  2408529687792073670u,  1235541077112082495u,         234651333670u },
  {  3980682212356510808u, 12014985518315533845u,          26084650986u },
  {  4202670442792148519u,  1561535086344155740u,         247691815706u },
  {  9419583343154651922u, 12761747276316224576u,          78528309751u },
  { 16359166491570434575u,  9745594781103966136u,          89949448782u },
  { 12567727056384237385u, 17514238702394846784u,           4131670873u },
  {  2068388267923286639u,  2428898913707151712u,         153003885060u },
  {  5689135844565021196u,    71666709959904944u,          62219517337u },
  {  3104061965171139313u,  4049380135452919192u,          80998671678u },
  {  7955173880156328016u, 18422240861777453732u,         136157995600u },
  {  1445179403240833754u,  2914504416394425695u,         229689627272u },
  { 12538201164459126715u, 12721377795748989417u,          16142359781u },
  {  7580606719088482667u,  2626074459217717421u,          54231018000u },
  {  8168318283218819755u,  4261529925046307654u,          33625369910u },
  {  5249615277755961676u, 11536038685430305585u,         165680648993u },
  {  6312997372068219831u, 12555757789435162767u,         128645381029u },
  {  9183815417025176703u, 11905178684546080058u,          26760719488u },
  { 10683849953373876937u, 14032797718924543050u,          84582777114u },
  { 17175012155615667568u, 10750340288005853483u,                63316u },
  { 18003508288378896912u,     1167984798111281u,                    0u },
  { 14722554560950996951u,              1167984u,                    0u },
  {                    1u,                    0u,          37523685376u },
  { 15059324482416394930u,  9660290106216358252u,         189803401509u },
  {  4134778595813308312u, 14820142034615351102u,         171687061181u },
  { 16321118342639660948u, 12674041783707777618u,          26834113963u },
  {  1523550293123468805u, 15386686816442679993u,          63307886874u },
  {  8016371634569878509u,  5679510383719146247u,          15075411775u },
  {  9884220139611134110u,  1391101719248678505u,         181182395151u },
  {  7218073002727840414u,  3364596672173710516u,         254611300789u },
  { 16062235669481359233u, 11276509210104319731u,          50288197886u },
  { 15558048660560338002u,  5316312656902630163u,         168947103794u },
  {  8394398745765058609u, 17470981304473644646u,         114399707048u },
  {  5693296366442904274u,  7373293636384920590u,         139412908146u },
  { 11783494675061161358u,  7616810902585191936u,         113690652811u },
  { 13377293110865447894u, 12740295655921903923u,          35995657329u },
  { 12840734051093062130u, 18366635945916526939u,          24242436899u },
  {  7009868331566697505u,  4472171448243407066u,          63012446232u },
  {  5019690705031194477u,   229592460858185628u,          55691161151u },
  {  8608277240439804984u, 12749672866417114995u,         190512407863u },
  { 12172482590657749222u,  9452256722867098692u,          48880992958u },
  { 16613484892678771990u, 16251451636418604633u,           4149515568u },
  {  5721488662757049244u,  2758075434182769113u,                    4u },
  {   386931106438877039u,          76545051729u,                    0u },
  { 10054429752182825659u,                   76u,                    0u },
  {                    1u,                    0u,          16244801536u },
  {  8634592106137071313u,  4515791283442995453u,         171721328144u },
  { 12626356501369830731u, 13306155670047701345u,         227241610667u },
  {  4803333258178976933u,  4456930152933417600u,         136492724195u },
  { 13613083223558209297u,  9089157128546489636u,         209674229128u },
  { 16106967997237446989u, 12437332180345515839u,          78186106577u },
  { 14832921244380020170u,  3433060408790452523u,         177448620878u },
  { 13774024637717231397u,  8275594526021936171u,         126208519857u },
  {  9673012968505228885u,  3846512444641107688u,         199336696958u },
  {  5391832334264815667u,  6210962618469046249u,         117394262471u },
  { 16514436292632703088u,  7272858906616296574u,          83201159797u },
  { 12025036352783454153u,  3710743300451225346u,         180348282451u },
  {  7059867105311401050u,  6424677242672030599u,         206622648756u },
  { 12769210631552594670u, 11485842256170301861u,         227398758606u },
  {  8328873878884556145u,  7355797963557024307u,          16344678115u },
  {  1016565892414238685u,  6358188982569427272u,          47676276240u },
  {  9662978461927250281u, 12475094728768767401u,         239937192751u },
  { 13729967277551868112u, 17288154837907896182u,          45161754863u },
  {  6371593776693359475u,  2983850577727105261u,         136754529069u },
  { 17617208110845643245u, 13918604635001185934u,          70652322184u },
  { 14960960225633086797u, 12033220395769876326u,               271942u },
  { 12090634301321662558u,     5016456510113118u,                    0u },
  {  9409926148478635503u,              5016456u,                    0u },
  {                    1u,                    0u,         171313463296u },
  {  4307062684900157136u,  5782377197813462996u,         168961261227u },
  { 15300759383869911853u, 17732139848231399225u,         218196719784u },
  { 16007534237643445447u,  3628839527415562920u,          35172859354u },
  {  7138502295759677634u,  3188692267613601003u,         154280164899u },
  {  8218537071653683708u,  5168130193478377351u,         164680674458u },
  {  2254219416760329296u, 12556227529405091289u,         216817872804u },
  {  3057410459568460683u, 15087090312791441191u,          97557377752u },
  {  8217810929938874370u, 10281804758610642493u,          49771853153u },
  { 11741126472498340929u, 14238177586158586579u,         238385321521u },
  {  1175325363726654805u,  7107927498217678127u,         127208482030u },
  {  9428843070696730900u,  3845814658485364449u,          41038721919u },
  { 12662500978715131896u,   714293333681725945u,         101908896041u },
  {  6443045597035184564u, 16766172658649116981u,          21044043621u },
  {  1921385512639171183u,   812461421432632214u,          60824970773u },
  { 10469475094355551399u, 15218024718633799195u,          32439687228u },
  { 14679174489076953574u,  8110797782612805145u,         235864173856u },
  { 11853074234719825644u, 15941193964933529226u,         104766762987u },
  {  8270896886596139124u, 14144280602323277932u,          40817076584u },
  { 16532667046659118126u, 15072402647813125244u,         254586700072u },
  {   148341279888833483u, 10822706091283369888u,          17822033662u },
  { 10364629296397276041u, 15163844593710966730u,                   17u },
  { 14265682585545771671u,         328758493846u,                    0u },
  { 13991741872911347878u,                  328u,                    0u },
  {                    1u,                    0u,          63130566656u },
  { 14029045786848724433u,  2408529687792073669u,          21215793215u },
  {  4005878521026842341u,  3980682212356510807u,          92227827221u },
  {  3428326338640386488u,  4202670442792148518u,          64510636636u },
  {  1010001558294829380u,  9419583343154651921u,         184886832192u },
  {  2012063724327403418u, 16359166491570434574u,          64681297848u },
  { 10997154538851372612u, 12567727056384237384u,          96112127552u },
  {  1917749645489607898u,  2068388267923286638u,         176308408672u },
  {  9763872523711218805u,  5689135844565021195u,         152168271536u },
  { 15875699078454059311u,  3104061965171139312u,         164431250840u },
  { 10966529452671276106u,  7955173880156328015u,          95078343332u },
  { 18073244132105736913u,  1445179403240833753u,         233679697247u },
  {  4435241176994913173u, 12538201164459126714u,         173410945513u },
  {  5464400086219074323u,  7580606719088482666u,          70442805421u },
  {  2445909179323258812u,  8168318283218819754u,          49284582214u },
  {   873962058644121211u,  5249615277755961675u,         143342228273u },
  { 16675872194112650857u,  6312997372068219830u,          58497855631u },
  { 10680102689274800355u,  9183815417025176702u,          74579172666u },
  {  2370498083108897524u, 10683849953373876936u,          43931059274u },
  { 15354400521451334666u, 17175012155615667567u,          49975972139u },
  {   259991949657381021u, 18003508288378896911u,         112798111281u },
  { 10335286558772966917u, 14722554560950996950u,              1167984u },
  { 16337526653906757263u,    21545516652742137u,                    0u },
  { 12040967163702784894u,             21545516u,                    0u },
  {                    1u,                    0u,         108816367616u },
  {  3373309160242342187u, 15059324482416394929u,          62224146796u },
  { 13639841054510584221u,  4134778595813308311u,          82884769598u },
  { 15898855427739708031u, 16321118342639660947u,         185082591826u },
  {  4544387940067005419u,  1523550293123468804u,           7434568377u },
  {  5281598644835398575u,  8016371634569878508u,         105535824647u },
  { 13675642405083408835u,  9884220139611134109u,         180391292521u },
  {  3973392623768015721u,  7218073002727840413u,         243870735540u },
  {  4491285101509114191u, 16062235669481359232u,          19843403507u },
  { 15002304272810270500u, 15558048660560338001u,         102455061267u },
  { 17325098540619893468u,  8394398745765058608u,          14308634214u },
  {  1137212864974584822u,  5693296366442904273u,            638784526u },
  {  2619406097224859078u, 11783494675061161357u,          51725184512u },
  {  8281347529729293732u, 13377293110865447893u,          91696097587u },
  { 11344719666795450104u, 12840734051093062129u,         218380005723u },
  { 17283870506679425783u,  7009868331566697504u,         156272117978u },
  { 11054210518010603775u,  5019690705031194476u,         115466655644u },
  {  6399455551799092885u,  8608277240439804983u,          68659871603u },
  { 12930529916573967170u, 12172482590657749221u,          89900618820u },
  { 14550097052337552404u, 16613484892678771989u,         217310162521u },
  { 12487632712206414748u,  5721488662757049243u,          81020975577u },
  {  5791017277843595715u,   386931106438877038u,          76545051729u },
  { 10227264183449036113u, 10054429752182825658u,                   76u },
  {  2006055278511721441u,        1412006979354u,                    0u },
  {   128746359043876333u,                 1412u,                    0u },
  {                    1u,                    0u,         253468082176u },
  {  7408146306870995754u,  8634592106137071312u,          97684476157u },
  {  8299024588195267962u, 12626356501369830730u,         128260389217u },
  {  1497052939192040881u,  4803333258178976932u,          36737966720u },
  { 16771714264265803747u, 13613083223558209296u,          63873160484u },
  {   142988846654429432u, 16106967997237446988u,          43804094271u },
  { 11839838367716104145u, 14832921244380020169u,          43746691371u },
  {  6019646776647679765u, 13774024637717231396u,         232524375083u },
  {  4611972391702034948u,  9673012968505228884u,         233292291816u },
  { 16447182322205429545u,  5391832334264815666u,         126895249385u },
  {  2113477168726764245u, 16514436292632703087u,           2651878526u },
  {  3536261187802311516u, 12025036352783454152u,         135382716162u },
  { 18444381860986709854u,  7059867105311401049u,         165692220295u },
  {  4734315730275909838u, 12769210631552594669u,          51451509157u },
  {  9974936316849658174u,  8328873878884556144u,          72055108147u },
  { 11864423681540657642u,  1016565892414238684u,         169523831112u },
  {  8207245621417902667u,  9662978461927250280u,         118744303017u },
  {  7992526918695295028u, 13729967277551868111u,         237345404790u },
  {  8679354522130259987u,  6371593776693359474u,         142955030765u },
  {  6065763799692166461u, 17617208110845643244u,         102811035278u },
  { 18143341109049024976u, 14960960225633086796u,          94655434598u },
  { 15242492331283350570u, 12090634301321662557u,         136510113118u },
  {  9986352353182266963u,  9409926148478635502u,              5016456u },
  { 17340463289911536077u,    92537289398950870u,                    0u },
  {  7359344614214233035u,             92537289u,                    0u },
  {                    1u,                    0u,         212233486336u },
  {   419091135888749535u,  4307062684900157135u,          57829455828u },
  {  1073142712661309790u, 15300759383869911852u,         168867770169u },
  { 11076438902195672286u, 16007534237643445446u,         235386978984u },
  {  1820390940081322073u,  7138502295759677633u,         135445527787u },
  { 18417808973944523597u,  8218537071653683707u,         217122201479u },
  { 10251294197731582957u,  2254219416760329295u,          39165742553u },
  {  1502394029870156428u,  3057410459568460682u,          61445488423u },
  {   321014853559106075u,  8217810929938874369u,         211636487741u },
  {  2390953058510591778u, 11741126472498340928u,          47063714515u },
  { 10685224265907994087u,  1175325363726654804u,         225511138607u },
  {  5967405799190505023u,  9428843070696730899u,         249686435553u },
  { 11210723659228214761u, 12662500978715131895u,          53349278201u },
  { 12327123641078462773u,  6443045597035184563u,         150104158517u },
  {  1709976940107894237u,  1921385512639171182u,          27567551382u },
  { 16607686590938553511u, 10469475094355551398u,          25795759643u },
  { 18332088094272679457u, 14679174489076953573u,         138642556441u },
  {  2946170632136780882u, 11853074234719825643u,         108448366218u },
  {  4824449494694383419u,  8270896886596139123u,         124896237676u },
  { 17008332258693407134u, 16532667046659118125u,         160008041596u },
  {  1773419466622750661u,   148341279888833482u,         202561867680u },
  {  3892343466023784379u, 10364629296397276040u,         150773344202u },
  { 12001571085575422796u, 14265682585545771670u,          72758493846u },
  { 12933506765500977582u, 13991741872911347877u,                  328u },
  { 11884830007749143734u,        6064523798049u,                    0u },
  {  9662368568096205337u,                 6064u,                    0u },
  {                    1u,                    0u,         197760516096u },
  { 16801499925276664442u, 14029045786848724432u,          87217159109u },
  { 10492407990787637084u,  4005878521026842340u,          38185849943u },
  {  7673849751013230269u,  3428326338640386487u,          17054752294u },
  {  6046724489853072367u,  1010001558294829379u,          14109074193u },
  {  3723941391207507903u,  2012063724327403417u,          72596156942u },
  { 16844122108860347659u, 10997154538851372611u,         110103961416u },
  { 10622020182694668027u,  1917749645489607897u,          11529300590u },
  {  8741198820686854862u,  9763872523711218804u,         240860623371u },
  {  6855480461211306807u, 15875699078454059310u,          79594496752u },
  { 10005708458011566304u, 10966529452671276105u,         217979752527u },
  {  8932093106442919061u, 18073244132105736912u,         186240434905u },
  {  9062763476260756743u,  4435241176994913172u,         106296225722u },
  { 13664977682032775521u,  5464400086219074322u,         170132593002u },
  {  1078499125430623453u,  2445909179323258811u,          75047377578u },
  {  6554586738078431161u,   873962058644121210u,         182904000843u },
  { 12177313698643242883u, 16675872194112650856u,         126578969526u },
  { 16615072271904633953u, 10680102689274800354u,         200128504958u },
  { 16375404983106569285u,  2370498083108897523u,         111832363720u },
  { 13552251831473522729u, 15354400521451334665u,          15014094191u },
  {  8330500218412111874u,   259991949657381020u,         214560277007u },
  {  7044338079053294004u, 10335286558772966916u,         249885659094u },
  {  2688849443046530184u, 16337526653906757262u,          44652742137u },
  {   855940991879596845u, 12040967163702784893u,             21545516u },
  {  7344363609485825662u,   397444631628981487u,                    0u },
  { 11602660525134634992u,            397444631u,                    0u },
  {                    1u,                    0u,         177182867456u },
  { 16945343208344873835u,  3373309160242342186u,         151739417265u },
  {  9617992661337889145u, 13639841054510584220u,         147861878679u },
  { 18280344933262742088u, 15898855427739708030u,           4246351763u },
  {  5179975582362777795u,  4544387940067005418u,         236286316036u },
  {  1798918997870037130u,  5281598644835398574u,         157741358060u },
  {  6327667344756325883u, 13675642405083408834u,         157215398045u },
  { 18380327574124007701u,  3973392623768015720u,         128243473053u },
  { 18015447557304295289u,  4491285101509114190u,          81813276544u },
  { 10315590748073249878u, 15002304272810270499u,          48939195473u },
  {  7697916092577993382u, 17325098540619893467u,         209061648432u },
  {  3124132817942110723u,  1137212864974584821u,         141141998289u },
  {  7448238998520507049u,  2619406097224859077u,         213448932749u },
  { 13892823322374205297u,  8281347529729293731u,         241614998485u },
  { 11042137840046332564u, 11344719666795450103u,          32936960497u },
  { 10513966307445593804u, 17283870506679425782u,         108599249952u },
  {  9388437460943526958u, 11054210518010603774u,          55346915180u },
  { 10967228614677896228u,  6399455551799092884u,         229700965431u },
  {  2310996671540235542u, 12930529916573967169u,          21788762341u },
  {  4989110555003898587u, 14550097052337552403u,         155676955925u },
  { 16271452421983657679u, 12487632712206414747u,         110313931675u },
  {  9523160181437090473u,  5791017277843595714u,         186554421102u },
  { 13137707423765072250u, 10227264183449036112u,          26108748474u },
  { 16846859744221860705u,  2006055278511721440u,         132006979354u },
  {  7767140033449795569u,   128746359043876332u,                 1412u },
  { 17169456915721160017u,       26046931378436u,                    0u },
  { 17180899661833327819u,                26046u,                    0u },
  {                    1u,                    0u,         208401596416u },
  { 17572520700934791416u,  7408146306870995753u,          74449891024u },
  { 17968798858233825417u,  8299024588195267961u,         164081155402u },
  { 15338423313945305609u,  1497052939192040880u,          16909196452u },
  { 17895321323836726301u, 16771714264265803746u,          76007751440u },
  {   814069333008965773u,   142988846654429431u,         201641838924u },
  {  7200328959852723947u, 11839838367716104144u,          36326325705u },
  {   759884557248133773u,  6019646776647679764u,          84250015524u },
  { 13410165861863974851u,  4611972391702034947u,          50891603540u },
  {  6278452420856351570u, 16447182322205429544u,         111114571826u },
  {  9072115382556676442u,  2113477168726764244u,         200191701103u },
  {  2755882551854926563u,  3536261187802311515u,          89999871944u },
  {  8496072611504649269u, 18444381860986709853u,         237256647769u },
  {  4122009033579215815u,  4734315730275909837u,         112540742381u },
  { 10222217724450527221u,  9974936316849658173u,         220643171696u },
  {  2064539481554006325u, 11864423681540657641u,         104444915676u },
  {  7935605886598063693u,  8207245621417902666u,         207433275752u },
  {  7805147585347548429u,  7992526918695295027u,         114470508751u },
  {  5709020905457661273u,  8679354522130259986u,         236328825714u },
  { 16257370307404906674u,  6065763799692166460u,          76983552492u },
  { 14971258192939373646u, 18143341109049024975u,          93826297164u },
  {  1133404845901376390u, 15242492331283350569u,         238541361245u },
  {  9460827548162822047u,  9986352353182266962u,         214940028398u },
  {  1273897659779791346u, 17340463289911536076u,         201398950870u },
  {  7833262224435092783u,  7359344614214233034u,             92537289u },
  {  3033420566713364587u,  1707011694817242694u,                    0u },
  { 15075466825360349103u,           1707011694u,                    0u },
  {                    1u,                    0u,         207022718976u },
  {  2484134775182816690u,   419091135888749534u,          44058175183u },
  { 18400539815335991277u,  1073142712661309789u,         198600454956u },
  {   485494064952118286u, 11076438902195672285u,         193098683590u },
  { 17577048805241314891u,  1820390940081322072u,         251998431425u },
  {  2863946907557583807u, 18417808973944523596u,          79555723771u },
  { 13045307417786230800u, 10251294197731582956u,         138081444943u },
  { 12032088871615097766u,  1502394029870156427u,           1017402250u },
  {  8848763446997690580u,   321014853559106074u,          64129613825u },
  { 10031289150307672684u,  2390953058510591777u,          84579247168u },
  { 11592215575498656563u, 10685224265907994086u,          19323493716u },
  { 15894436747956898388u,  5967405799190505022u,         247607734547u },
  {  2091546719588500923u, 11210723659228214760u,         179668254711u },
  {  5863809244813756109u, 12327123641078462772u,         110092698035u },
  { 11303008753675411245u,  1709976940107894236u,         166900304494u },
  { 13238426537506910532u, 16607686590938553510u,         229993784486u },
  { 17258458071023005565u, 18332088094272679456u,         235159712229u },
  {  8385733444777075179u,  2946170632136780881u,         115261533931u },
  {  9530757096163247300u,  4824449494694383418u,          45922023539u },
  { 14423000845391072217u, 17008332258693407133u,         202096137261u },
  { 10953140011159884311u,  1773419466622750660u,         136211004362u },
  { 12228340237948264127u,  3892343466023784378u,         150650606472u },
  { 11279134946966259189u, 12001571085575422795u,         165701126806u },
  { 14640097792684582651u, 12933506765500977581u,          33644277925u },
  {  6232313315128656728u, 11884830007749143733u,         176523798049u },
  { 16136121832933322088u,  9662368568096205336u,                 6064u },
  { 15074767079673358271u,      111870718431542u,                    0u },
  { 13252722804829281908u,               111870u,                    0u },
  {                    1u,                    0u,         208910811136u },
  {  7740175894281560509u, 16801499925276664441u,         228568794576u },
  { 15670495392425593226u, 10492407990787637083u,         183416000228u },
  { 15152257626756992778u,  7673849751013230268u,          67327793591u },
  {  4090073428152440422u,  6046724489853072366u,         153201875267u },
  { 14450327772834205584u,  3723941391207507902u,          67913121689u },
  {  4466091895542494216u, 16844122108860347658u,         217575820867u },
  { 10454115378553795377u, 10622020182694668026u,         116473861337u },
  {  2267817233475657788u,  8741198820686854861u,          46371636340u },
  {  5500455702636497521u,  6855480461211306806u,          73542410542u },
  { 15178768299492252549u, 10005708458011566303u,         208484209737u },
  {  7062359872332045590u,  8932093106442919060u,         148491293392u },
  { 12297347290027942576u,  9062763476260756742u,          18740779924u },
  {  8030124596941085588u, 13664977682032775520u,         187058465554u },
  {  6526656990996654843u,  1078499125430623452u,         122355324859u },
  {  6254287345256979850u,  6554586738078431160u,         104660133498u },
  {  6642007136244870032u, 12177313698643242882u,         226900704872u },
  {  2027592955437164718u, 16615072271904633952u,         243887712482u },
  {   942718349157325567u, 16375404983106569284u,           9734669043u },
  { 14617066671884002278u, 13552251831473522728u,         156451597321u },
  {  6831631114396133348u,  8330500218412111873u,           4381874332u },
  { 14603040013386939258u,  7044338079053294003u,         142145762820u },
  {  9906106765319401103u,  2688849443046530183u,         125046400654u },
  {  1396179595609933063u,   855940991879596844u,         239398138749u },
  { 11524884268464976417u,  7344363609485825661u,          23628981487u },
  {   382929570730827274u, 11602660525134634991u,            397444631u },
  {  6109721884461301381u,  7331559403129590068u,                    0u },
  {  2390514825000339691u,           7331559403u,                    0u },
  {  6116191454763441755u,                    7u,                    0u },
  {                    1u,                    0u,          42918608896u },
  { 11598868771099176310u, 16945343208344873834u,         156521392426u },
  { 14449966445520085105u,  9617992661337889144u,         126990979484u },
  { 11675595287405614726u, 18280344933262742087u,         234280807038u },
  { 15860796398550489897u,  5179975582362777794u,         174097519594u },
  { 16180408435245829662u,  1798918997870037129u,         194343023534u },
  { 13756992797154950706u,  6327667344756325882u,         104996399554u },
  {  8830551328786758466u, 18380327574124007700u,          78976619368u },
  { 16699955256560951264u, 18015447557304295288u,          35559209294u },
  { 10038983627153402074u, 10315590748073249877u,         219417304867u },
  { 15085100736692127346u,  7697916092577993381u,         245169359579u },
  { 10007783780289711125u,  3124132817942110722u,         197403769845u },
  { 17596907048353602192u,  7448238998520507048u,         163753131461u },
  { 13530650344896573509u, 13892823322374205296u,         247598595491u },
  {  6337724853398437005u, 11042137840046332563u,         246569963255u },
  { 12768885008904063297u, 10513966307445593803u,         254508948214u },
  {  2759773619512884114u,  9388437460943526957u,         148594534654u },
  {  8434364600126655292u, 10967228614677896227u,          65125279380u },
  {  3843827521199949338u,  2310996671540235541u,          19270460225u },
  {  4661660852957808994u,  4989110555003898586u,         155882077203u },
  { 15298044134177324417u, 16271452421983657678u,         194516251547u },
  {  7747773274913338217u,  9523160181437090472u,          80712196546u },
  { 10348785912020632966u, 13137707423765072249u,         224913270096u },
  {  4175372293197190170u, 16846859744221860704u,         236421057504u },
  { 11326064156813083145u,  7767140033449795568u,           4930758124u },
  {  8100407170505981763u, 17169456915721160016u,         190931378436u },
  {  1706556116319916846u, 17180899661833327818u,                26046u },
  { 15028897280749641942u,      480481077043500u,                    0u },
  {  1421201742071739121u,               480481u,                    0u },
  {                    1u,                    0u,          41952608256u },
  {  8480737406125178272u, 17572520700934791415u,         121974090537u },
  { 10947205650755620361u, 17968798858233825416u,         176831497593u },
  {   868577942165647781u, 15338423313945305608u,         226970107312u },
  { 16017710019091388479u, 17895321323836726300u,         247044130786u },
  {  6610879150827623375u,   814069333008965772u,         208390330615u },
  { 12110095866223762092u,  7200328959852723946u,          20041193424u },
  {  7756802952949470775u,   759884557248133772u,           3726966548u },
  {  2941800790804618759u, 13410165861863974850u,          40340355587u },
  { 11703600274199927522u,  6278452420856351569u,         212491800360u },
  {   806737539257940346u,  9072115382556676441u,          91149396692u },
  { 14579028397110132023u,  2755882551854926562u,          93460573019u },
  { 14247808875344366934u,  8496072611504649268u,         205223454557u },
  {  9713379923695279513u,  4122009033579215814u,          61554147533u },
  {  2246428675703313877u, 10222217724450527220u,         233111918909u },
  {  3549783776592680620u,  2064539481554006324u,          74430190057u },
  { 12645029747929213033u,  7935605886598063692u,          51423117898u },
  { 16279009267476580506u,  7805147585347548428u,          18309486643u },
  {   343358782242907186u,  5709020905457661272u,          60881313810u },
  { 10077054739085890321u, 16257370307404906673u,         207811593532u },
  { 10526715404712173586u, 14971258192939373645u,          41061441999u },
  { 11438715865125144243u,  1133404845901376389u,          82512872489u },
  {  5040916178827294801u,  9460827548162822046u,         204069058130u },
  { 16643761637275849508u,  1273897659779791345u,         202424641996u },
  {  4852542977279030386u,  7833262224435092782u,          70164442058u },
  {  7883373066544387129u,  3033420566713364586u,         110817242694u },
  { 16699064314768500978u, 15075466825360349102u,           1707011694u },
  {  6805863634444817214u, 13042063791413317777u,                    1u },
  {  2266540253968903500u,          31488807865u,                    0u },
  {  9016913589137908810u,                   31u,                    0u },
  {                    1u,                    0u,         222134665216u },
  { 11654451024602552034u,  2484134775182816689u,          93997495262u },
  {  5299013208454526793u, 18400539815335991276u,         221026318685u },
  { 14918550373926182540u,   485494064952118285u,          88952853725u },
  {  6225552657491071054u, 17577048805241314890u,          76155254872u },
  { 10344713496596235785u,  2863946907557583806u,         236707187532u },
  { 12972405634433280209u, 13045307417786230799u,         139652260844u },
  { 12911885282402784945u, 12032088871615097765u,          26479692427u },
  {  6934311832970995868u,  8848763446997690579u,          33543797274u },
  {  9975729197003430461u, 10031289150307672683u,         230628415265u },
  {  1982857556803548935u, 11592215575498656562u,          62861639142u },
  {  2095735223386298223u, 15894436747956898387u,         232113382974u },
  {  7110931538347639365u,  2091546719588500922u,          52317877736u },
  { 15822183724630969535u,  5863809244813756108u,         220612737332u },
  { 16931982690156327501u, 11303008753675411244u,         166717656540u },
  {  6740069226761666110u, 13238426537506910531u,          32935582886u },
  {  3138792961008474902u, 17258458071023005564u,          81454591520u },
  { 12154594426971851390u,  8385733444777075178u,          58516663377u },
  { 15780127219221910902u,  9530757096163247299u,         157781872442u },
  { 16421541930960194381u, 14423000845391072216u,         196593770909u },
  {  7485894627196740576u, 10953140011159884310u,         186662899652u },
  {  8897269432694476707u, 12228340237948264126u,          75611443130u },
  { 17189823634941678805u, 11279134946966259188u,         173793641291u },
  {  9585582064286255216u, 14640097792684582650u,         181337854381u },
  { 12835472279575022097u,  6232313315128656727u,          24874740917u },
  {  6776016669542754608u, 16136121832933322087u,          54817204760u },
  { 18340015775620871027u, 15074767079673358270u,         254718431542u },
  {  5254188752292365830u, 13252722804829281907u,               111870u },
  {  6798802596750151183u,     2063650512248692u,                    0u },
  {  9449320530215272000u,              2063650u,                    0u },
  {                    1u,                    0u,         121419595776u },
  { 17110720482574968811u,  7740175894281560508u,          91849499257u },
  { 16172441693558688213u, 15670495392425593225u,         188821405531u },
  {  6234654946353717320u, 15152257626756992777u,         238221723324u },
  { 11180283100679445438u,  4090073428152440421u,         190783353838u },
  { 14852260031176961272u, 14450327772834205583u,          10242107326u },
  {  4481533167346438750u,  4466091895542494215u,         250566718730u },
  {  4269718344362365664u, 10454115378553795376u,         205122938618u },
  { 11520029752381101466u,  2267817233475657787u,          54298180301u },
  { 16778682550309368417u,  5500455702636497520u,         223822842678u },
  {  9687587467301363608u, 15178768299492252548u,         148382851295u },
  { 10093971076828497318u,  7062359872332045589u,           6666640532u },
  {  1913763026490934696u, 12297347290027942575u,          96435313926u },
  { 12701450127613557000u,  8030124596941085587u,         220353810784u },
  {  8974572160711134644u,  6526656990996654842u,         184339045596u },
  {  9890000077336694124u,  6254287345256979849u,         130360063928u },
  {  4292326716201059148u,  6642007136244870031u,          96109916034u },
  { 14644519175104337420u,  2027592955437164717u,          68051104864u },
  {  5051178622270136798u,   942718349157325566u,          40792392772u },
  {   675983118348065839u, 14617066671884002277u,           1370343464u },
  {  4431647660065117244u,  6831631114396133347u,         179791632385u },
  {  8316115180008411962u, 14603040013386939257u,         135537011123u },
  {  9621158095544965602u,  9906106765319401102u,          44075687047u },
  { 15283478958951102072u,  1396179595609933062u,         125624765228u },
  { 13981553073094447813u, 11524884268464976416u,         239020758653u },
  {  4558368743929911607u,   382929570730827273u,          52331208687u },
  { 15217004469858477791u,  6109721884461301380u,         235129590068u },
  { 11589190369996515737u,  2390514825000339690u,           7331559403u },
  {  3670624237398152929u,  6116191454763441754u,                    7u },
  { 13471713758418039777u,         135243399970u,                    0u },
  {  4489936967610296411u,                  135u,                    0u },
  {                    1u,                    0u,         106628775936u },
  {  9052049303222747950u, 11598868771099176309u,         120783334250u },
  {  1011330006193020538u, 14449966445520085104u,          71632935288u },
  { 17412075644359478612u, 11675595287405614725u,         194859815495u },
  {  6358678384745980468u, 15860796398550489896u,         137877141698u },
  { 15262353928842850919u, 16180408435245829661u,         250745768073u },
  { 11145257686438581736u, 13756992797154950705u,          20478705146u },
  {  1600562031807691890u,  8830551328786758465u,         120905306388u },
  {  6775147337046626724u, 16699955256560951263u,          85544214392u },
  { 15772127322106297822u, 10038983627153402073u,         165817764949u },
  {  4141472200527441474u, 15085100736692127345u,           2542523045u },
  { 18246007807879281267u, 10007783780289711124u,         168953930242u },
  {   960746958654787123u, 17596907048353602191u,         112733498024u },
  { 11355981212264408477u, 13530650344896573508u,         147343568752u },
  {  1573078209576251481u,  6337724853398437004u,         203692202643u },
  {  6245294478780491367u, 12768885008904063296u,          45149607627u },
  {  7523292955659721510u,  2759773619512884113u,          35457227821u },
  { 14454736751015226505u,  8434364600126655291u,          21208374307u },
  {  7219786377781411316u,  3843827521199949337u,         218252709141u },
  { 10597123082209392431u,  4661660852957808993u,         206829308634u },
  {  6922353544343010714u, 15298044134177324416u,         168420007630u },
  { 14317523356293377430u,  7747773274913338216u,         121561008808u },
  {  4057766168681892717u, 10348785912020632965u,          96226347385u },
  { 15214083611901244045u,  4175372293197190169u,         240613987168u },
  {  8390569016883950721u, 11326064156813083144u,          80439123952u },
  { 10680472538208175055u,  8100407170505981762u,         202092512592u },
  { 12173567833130544927u,  1706556116319916845u,          44814718154u },
  {  1386341248286610026u, 15028897280749641941u,         225077043500u },
  { 12487300952797237352u,  1421201742071739120u,               480481u },
  {  2614759871804869720u,     8863311460481781u,                    0u },
  {  8494389567327729477u,              8863311u,                    0u },
  {                    1u,                    0u,         247459741696u },
  {  6260469580539185878u,  8480737406125178271u,         136593449207u },
  { 17818573101084525841u, 10947205650755620360u,           8047085704u },
  {  2201029069927307150u,   868577942165647780u,          28868321800u },
  { 10397997613804897039u, 16017710019091388478u,         140358376476u },
  { 14269915965770103741u,  6610879150827623374u,         234656489612u },
  { 16776139909196366727u, 12110095866223762091u,         140420497130u },
  {  6246513436385199720u,  7756802952949470774u,         194159475340u },
  {  2926026498821554288u,  2941800790804618758u,          81634453442u },
  { 15725499391028340982u, 11703600274199927521u,          89043733329u },
  {  8576577277771450827u,   806737539257940345u,         226790330713u },
  { 15523351176022259335u, 14579028397110132022u,          52772375266u },
  {  4775158829429176134u, 14247808875344366933u,         198526563380u },
  { 10141817222123532462u,  9713379923695279512u,         244121779142u },
  { 12847658900242624586u,  2246428675703313876u,          52192434164u },
  { 13708197964460514655u,  3549783776592680619u,          76685488436u },
  {  1951540006613246932u, 12645029747929213032u,          12882486860u },
  {  9979297327280092199u, 16279009267476580505u,          88018613516u },
  { 15381307706282553684u,   343358782242907185u,         177546278232u },
  { 10037428657543061177u, 10077054739085890320u,          77570654385u },
  {  2584877324547208668u, 10526715404712173585u,         133620094029u },
  {  1126624732730703576u, 11438715865125144242u,         158273268613u },
  {  1501064139624981020u,  5040916178827294800u,         241902260126u },
  {  5219661484955306109u, 16643761637275849507u,          46263056881u },
  {  5336997298570282212u,  4852542977279030385u,         106427358510u },
  { 12191131175733833362u,  7883373066544387128u,         174905258090u },
  {  3707068178994436536u, 16699064314768500977u,         145368946606u },
  {  5045484691732942022u,  6805863634444817213u,         185122869393u },
  { 14847900542908711232u,  2266540253968903499u,          31488807865u },
  {  9097257915916965135u,  9016913589137908809u,                   31u },
  {  2472027983230314217u,         580865979874u,                    0u },
  { 15974509111133272205u,                  580u,                    0u },
  {                    1u,                    0u,         177631789056u },
  { 12099486841948187399u, 11654451024602552033u,         236287260081u },
  {  5319910566029976328u,  5299013208454526792u,          13808736236u },
  { 11549214421017285864u, 14918550373926182539u,          74337487885u },
  {  1998791413186046700u,  6225552657491071053u,         190560788042u },
  { 17075171930090011210u, 10344713496596235784u,          15703235518u },
  { 15158296003813501474u, 12972405634433280208u,         165699954703u },
  {  1360083178079384115u, 12911885282402784944u,         211375909797u },
  {  6167980558592741158u,  6934311832970995867u,         107540785363u },
  {  3630180428124865653u,  9975729197003430460u,          50107490923u },
  {  2276550099763657677u,  1982857556803548934u,          83113610034u },
  {   407006713016100655u,  2095735223386298222u,         186385484371u },
  { 14242579061653496002u,  7110931538347639364u,         204857722298u },
  { 17944493332678643704u, 15822183724630969534u,          44917884620u },
  {   987185901870869452u, 16931982690156327500u,          67365379884u },
  {  5578665155415167745u,  6740069226761666109u,         124170154307u },
  {  4849210377429577536u,  3138792961008474901u,         234658901884u },
  { 10811995403388891862u, 12154594426971851389u,         195855442410u },
  {  7051931074990177294u, 15780127219221910901u,         216890213571u },
  {  2030832259446664275u, 16421541930960194380u,          22405811160u },
  {  6069512651054767896u,  7485894627196740575u,         190482321942u },
  { 10608701253763958799u,  8897269432694476706u,         244931862206u },
  { 15700053443426906717u, 17189823634941678804u,         250519635444u },
  { 17759719234725541222u,  9585582064286255215u,          87695812346u },
  { 15187321568916405210u, 12835472279575022096u,         103367328599u },
  { 11040156458113129594u,  6776016669542754607u,         190994214247u },
  {  2800727824598008497u, 18340015775620871026u,         115284830142u },
  {  2997236166375604479u,  5254188752292365829u,         116368563827u },
  {  6260091886451512841u,  6798802596750151182u,          34512248692u },
  { 17573059315228347474u,  9449320530215271999u,              2063650u },
  {  7519453664590169251u,    38067632857031246u,                    0u },
  { 15809436065653866529u,             38067632u,                    0u },
  {                    1u,                    0u,         188927574016u },
  {   228921437623588922u, 17110720482574968810u,         137876709820u },
  {  2195862230003073884u, 16172441693558688212u,           9337981321u },
  {   960207412233973688u,  6234654946353717319u,         101606084361u },
  {  2464387149230492479u, 11180283100679445437u,         143805142629u },
  {  3631866936444955213u, 14852260031176961271u,           7242944399u },
  {  1578304441149380227u,  4481533167346438749u,          48231461895u },
  { 18190538519673445181u,  4269718344362365663u,          59624502064u },
  {  1271000736479934749u, 11520029752381101465u,         112909574203u },
  { 18292963032817745634u, 16778682550309368416u,         132525165168u },
  { 17168014021925537455u,  9687587467301363607u,          21547195268u },
  { 18046757712870378949u, 10093971076828497317u,         175103745301u },
  { 14857998893911743220u,  1913763026490934695u,         147688546991u },
  { 11933607369968684575u, 12701450127613556999u,         250486512531u },
  {  3483798509902859162u,  8974572160711134643u,         137536137978u },
  {  7378828438829845831u,  9890000077336694123u,         143232687497u },
  { 15791137430347699565u,  4292326716201059147u,         173793880975u },
  { 17044141236829932641u, 14644519175104337419u,         254273824941u },
  {  9075651910862456484u,  5051178622270136797u,         229036645118u },
  { 17811207355884564095u,   675983118348065838u,         227240240101u },
  {  4438638126207305937u,  4431647660065117243u,         121450817507u },
  { 12507972635512950185u,  8316115180008411961u,         142521564025u },
  { 14658269128098109408u,  9621158095544965601u,           6828519054u },
  {  3642436268910286111u, 15283478958951102071u,          32757941510u },
  {  3783099432964819561u, 13981553073094447812u,           9247109664u },
  {  9497579866027539638u,  4558368743929911606u,         132824915465u },
  {  3395179445046271361u, 15217004469858477790u,         234628251268u },
  {  5938502732309497276u, 11589190369996515736u,          90198984938u },
  {  5793671185917606255u,  3670624237398152928u,          34730303066u },
  {   889272970253526588u, 13471713758418039776u,         135243399970u },
  {  8594177504370135501u,  4489936967610296410u,                  135u },
  {  7374354721120724712u,        2494800386918u,                    0u },
  { 14764532643665507567u,                 2494u,                    0u },
  {                    1u,                    0u,         117490712576u },
  {  5392404173658087695u,  9052049303222747949u,         112054824309u },
  {  4976586473237854316u,  1011330006193020537u,         133943910512u },
  {  6308932742419013569u, 17412075644359478611u,          40344704645u },
  {  4831846642430703059u,  6358678384745980467u,          29827373864u },
  { 18139507855949846901u, 15262353928842850918u,          49604185629u },
  {  4865833876326628410u, 11145257686438581735u,          65086766641u },
  { 14296661839130179261u,  1600562031807691889u,         223367281473u },
  {  9254773150378118248u,  6775147337046626723u,         217855008735u },
  { 12174712433727875143u, 15772127322106297821u,         113224509657u },
  {   705653145340915199u,  4141472200527441473u,          20989118065u },
  { 17763928858962481812u, 18246007807879281266u,         143052082196u },
  {  3982836567612046296u,   960746958654787122u,          68615608975u },
  { 12730849277561967739u, 11355981212264408476u,         140085276740u },
  { 17314488764367235908u,  1573078209576251480u,          64338558092u },
  { 15951418930590301119u,  6245294478780491366u,         145407838528u },
  {  7193356087283467261u,  7523292955659721509u,          59783592849u },
  { 17592945625696089446u, 14454736751015226504u,          25391385403u },
  {  3554461664875361428u,  7219786377781411315u,          97574471193u },
  {  2213779057785318208u, 10597123082209392430u,         128375261537u },
  {  3880940796082421148u,  6922353544343010713u,         104776154496u },
  {  4528237545358141043u, 14317523356293377429u,         133219971944u },
  { 11681196539088147363u,  4057766168681892716u,          25824757125u },
  {  9835005502912643017u, 15214083611901244044u,           8454853657u },
  {  4964088126040986696u,  8390569016883950720u,          66578989576u },
  {  3355564873147047622u, 10680472538208175054u,          45659930434u },
  {  1853093467828272927u, 12173567833130544926u,         213075153709u },
  { 14755341584803008677u,  1386341248286610025u,         240676937941u },
  {  4701571132542556621u, 12487300952797237351u,         245141746416u },
  {  6128849686644853851u,  2614759871804869719u,          79460481781u },
  { 12026867901170202094u,  8494389567327729476u,              8863311u },
  { 17909760324981426303u,   163499238157084246u,                    0u },
  {  2897692901883393664u,            163499238u,                    0u },
  {                    1u,                    0u,         159339380736u },
  { 12323704802554838154u,  6260469580539185877u,           8965946783u },
  {  7135886931147821732u, 17818573101084525840u,         164119318024u },
  { 15341283120292884947u,  2201029069927307149u,          62563676580u },
  {  3092789040392634166u, 10397997613804897038u,         206773573694u },
  {  8811761390822097865u, 14269915965770103740u,         171909436366u },
  { 16870860798610218169u, 16776139909196366726u,          54338624171u },
  { 17452041453591904833u,  6246513436385199719u,           6158620214u },
  { 10314783684009874908u,  2926026498821554287u,         225852481030u },
  {  4932636630789274903u, 15725499391028340981u,         121464937185u },
  { 18143884346082124480u,  8576577277771450826u,          54841522553u },
  {  2823209155405527322u, 15523351176022259334u,          85258861878u },
  { 16195396106620226251u,  4775158829429176133u,         152549789013u },
  {  1150544491807648944u, 10141817222123532461u,         212696472984u },
  {  7767455475523884824u, 12847658900242624585u,         171743122900u },
  { 15204378045683991808u, 13708197964460514654u,         104105793195u },
  { 17239732561718805622u,  1951540006613246931u,         153540978792u },
  { 12886430624522800062u,  9979297327280092198u,          49833822361u },
  { 18162250541178258136u, 15381307706282553683u,          16544130097u },
  { 17028935366700158084u, 10037428657543061176u,          17140126480u },
  { 16075467823964198637u,  2584877324547208667u,         178061074449u },
  {  9803858825574498304u,  1126624732730703575u,          80081372850u },
  { 17464070808143041817u,  1501064139624981019u,          35282958416u },
  { 17682703471239266776u,  5219661484955306108u,         113289319203u },
  { 18147688354161351336u,  5336997298570282211u,          56660882545u },
  {  6663423873348080051u, 12191131175733833361u,         241200960568u },
  {  9417270363716235133u,  3707068178994436535u,          61273516273u },
  {  9295013721571344179u,  5045484691732942021u,          75804906301u },
  {  6199479138350037783u, 14847900542908711231u,          73493163339u },
  {   887603005365085688u,  9097257915916965134u,         226134008905u },
  {   333989628642975696u,  2472027983230314216u,          68865979874u },
  {  4620735991403939439u, 15974509111133272204u,                  580u },
  { 12418523063962801201u,       10715086071862u,                    0u },
  {  1587745622680169419u,                10715u,                    0u },
  {                    1u,                    0u,         225655914496u },
  { 10968905082284365638u, 12099486841948187398u,          72288392929u },
  { 14076907092801977812u,  5319910566029976327u,         139626084168u },
  {  3438322122816124202u, 11549214421017285863u,          77108354699u },
  { 14645413324829073676u,  1998791413186046699u,           8925646925u },
  { 12271281439492289999u, 17075171930090011209u,         208821732872u },
  {  6233751789862708246u, 15158296003813501473u,         176073730256u },
  {  1962644459455827991u,  1360083178079384114u,         155334366896u },
  {  8726934184642952500u,  6167980558592741157u,          60196792475u },
  {  4531087719737475147u,  3630180428124865652u,           6123412028u },
  {   481513520412720775u,  2276550099763657676u,         110022063878u },
  {   992149349835802669u,   407006713016100654u,          68772091758u },
  { 11165474436676191361u, 14242579061653496001u,         190972772932u },
  { 10240785855143707184u, 17944493332678643703u,          76053515454u },
  { 10059329918238932466u,   987185901870869451u,          61302420044u },
  { 14791716450947031886u,  5578665155415167744u,          21262876221u },
  { 15378882314737417403u,  4849210377429577535u,         125586119445u },
  { 14726970229242271128u, 10811995403388891861u,         117382285949u },
  {  5090110549507128156u,  7051931074990177293u,          76110091637u },
  { 17185220781106503841u,  2030832259446664274u,         223329028940u },
  {  9858517691519529306u,  6069512651054767895u,         162575098847u },
  {  5595905546638020703u, 10608701253763958798u,         212851101602u },
  { 15555173226968030256u, 15700053443426906716u,         111962756308u },
  { 10745236628845355771u, 17759719234725541221u,          16823306351u },
  {  9973314042399760760u, 15187321568916405209u,          47598488080u },
  {  4374506813558796576u, 11040156458113129593u,         114151827759u },
  { 15960826480426749933u,  2800727824598008496u,           5162480498u },
  {  9636454862798615738u,  2997236166375604478u,          14339360261u },
  { 17973331528911319269u,  6260091886451512840u,          63952637454u },
  {  7366495200039369602u, 17573059315228347473u,          78407630399u },
  { 10505831326526933399u,  7519453664590169250u,         176857031246u },
  {  2803218632575724145u, 15809436065653866528u,             38067632u },
  {  8425731874431741636u,   702223880805592151u,                    0u },
  { 14860552245711912111u,            702223880u,                    0u },
  {                    1u,                    0u,         234012409856u },
  {  6993664200669526994u,   228921437623588921u,         212119037930u },
  {  4065363582031999356u,  2195862230003073883u,          71052052948u },
  {  6899780515342669867u,   960207412233973687u,         189133594695u },
  { 17713500890201844939u,  2464387149230492478u,         247196883901u },
  {  6445781125105107086u,  3631866936444955212u,          93085560055u },
  { 13563044070717478571u,  1578304441149380226u,         223986111069u },
  { 13167612994149348885u, 18190538519673445180u,         153068901087u },
  {  5505463469596727288u,  1271000736479934748u,          96991663513u },
  { 12125446212518819372u, 18292963032817745633u,         151930679904u },
  { 12537707724735421794u, 17168014021925537454u,         165978316695u },
  { 15173675086703777069u, 18046757712870378948u,         167805453733u },
  { 13535510174093048476u, 14857998893911743219u,           7646922151u },
  { 10698912997087096629u, 11933607369968684574u,         179188857095u },
  { 16952559548431933861u,  3483798509902859161u,         107400007091u },
  { 13528255827744249993u,  7378828438829845830u,          75856039275u },
  { 14122167436324771955u, 15791137430347699564u,          11923964747u },
  { 13071007137740038297u, 17044141236829932640u,         221491992075u },
  { 13011887609328904025u,  9075651910862456483u,          46965547485u },
  {  3116434332871336590u, 17811207355884564094u,          59240619054u },
  {  9050993820536772770u,  4438638126207305936u,          57678058555u },
  { 11993719123438634238u, 12507972635512950184u,         225794626361u },
  {  1414857165879849301u, 14658269128098109407u,         119197456865u },
  { 13819438220812375094u,  3642436268910286110u,         196205082231u },
  {  6073063033888264440u,  3783099432964819560u,          54514864836u },
  {  6828883869150720294u,  9497579866027539637u,         222184053046u },
  {  4548265621068768345u,  3395179445046271360u,         152321926878u },
  { 10422524923581371874u,  5938502732309497275u,         224314075544u },
  {  1858996082510682634u,  5793671185917606254u,         224048207584u },
  {   890276727450878316u,   889272970253526587u,          90465891296u },
  {  3886008133802710905u,  8594177504370135500u,         102399764570u },
  {   612074409233016757u,  7374354721120724711u,         190800386918u },
  {  3927020336901729264u, 14764532643665507566u,                 2494u },
  {  5298603480094474942u,       46020944252475u,                    0u },
  { 17418383752590430025u,                46020u,                    0u },
  {                    1u,                    0u,          45292322816u },
  {  8973799690601597929u,  5392404173658087694u,         121269781293u },
  {  1343055462055792431u,  4976586473237854315u,          83342007929u },
  { 17425118728683169659u,  6308932742419013568u,          51261934931u },
  { 18389781726026675967u,  4831846642430703058u,         102983344691u },
  {   272526939565961561u, 18139507855949846900u,         231263777382u },
  { 11293026845930963228u,  4865833876326628409u,         113775023591u },
  { 13997416438903902597u, 14296661839130179260u,         163501702257u },
  {  6186605805999441184u,  9254773150378118247u,         221659992483u },
  {  4401776373281836138u, 12174712433727875142u,          65038253533u },
  { 16338917089754547008u,   705653145340915198u,         114962984513u },
  { 13337700757935003056u, 17763928858962481811u,          50215910002u },
  { 14612496890816348693u,  3982836567612046295u,         156690140722u },
  {  3219935399907691719u, 12730849277561967738u,          88938620316u },
  { 10887238730052330387u, 17314488764367235907u,         102864728152u },
  {   360256418697768294u, 15951418930590301118u,          37389952614u },
  {   321440824631118565u,  7193356087283467260u,         136953715493u },
  { 10069228080701402580u, 17592945625696089445u,         243192687752u },
  {  9428069607611622975u,  3554461664875361427u,          46120009203u },
  { 14736799017468812344u,  2213779057785318207u,         153210386222u },
  { 10875332567307979280u,  3880940796082421147u,         149245476249u },
  {  4611492910339012807u,  4528237545358141042u,         108633238933u },
  { 10743508637597314786u, 11681196539088147362u,         140533156716u },
  {  9356196315668016028u,  9835005502912643016u,         128269103756u },
  { 15755598617722189347u,  4964088126040986695u,         206181905536u },
  {  1275276394173375542u,  3355564873147047621u,          30100456398u },
  { 12644999363867216251u,  1853093467828272926u,         105799888670u },
  {  4553830511509832021u, 14755341584803008676u,         103254872681u },
  {  8869400642218174412u,  4701571132542556620u,          87332245607u },
  { 16570849151159054040u,  6128849686644853850u,          68651977815u },
  { 16127119334101797673u, 12026867901170202093u,          86970890052u },
  {  9686867250420930550u, 17909760324981426302u,         230157084246u },
  { 10678226869774428035u,  2897692901883393663u,            163499238u },
  {  7767227962910162068u,  3016028602530220424u,                    0u },
  {  9780840471948993674u,           3016028602u,                    0u },
  {                    1u,                    0u,         213668069376u },
  {  6288709332106746357u, 12323704802554838153u,          16386837205u },
  {  9066785620141948673u,  7135886931147821731u,         141831652624u },
  {  8442375916704414909u, 15341283120292884946u,          14167660429u },
  { 11604629218100425803u,  3092789040392634165u,         188477686542u },
  {  3877248044010875762u,  8811761390822097864u,         134914571196u },
  { 16435137704395217283u, 16870860798610218168u,         103946077062u },
  { 14994442577577813271u, 17452041453591904832u,         111559165543u },
  {  4410105917142436089u, 10314783684009874907u,         245267398767u },
  {  4632574728444936970u,  4932636630789274902u,         202983581941u },
  {  9117147535650050359u, 18143884346082124479u,         134153046474u },
  {   588939301256904809u,  2823209155405527321u,          69877954182u },
  {   324393982565305683u, 16195396106620226250u,         173062371141u },
  {  9380909186923521175u,  1150544491807648943u,          73421074605u },
  {  4463385697777230217u,  7767455475523884823u,          94824230985u },
  { 16378985502426333808u, 15204378045683991807u,         211934567774u },
  { 18210894922387834354u, 17239732561718805621u,          38698574803u },
  {  1555748035329493205u, 12886430624522800061u,          83984577574u },
  {  4277055533891898507u, 18162250541178258135u,         184923140435u },
  { 11574429772510874408u, 17028935366700158083u,         219871452856u },
  { 17391099253493808815u, 16075467823964198636u,         215531468251u },
  {  5791212393959129882u,  9803858825574498303u,          27946729175u },
  { 11254268231455680880u, 17464070808143041816u,         124958581275u },
  { 16355477587312235322u, 17682703471239266775u,         227983788156u },
  {  2411485149249320633u, 18147688354161351335u,         145361224931u },
  { 12763114642070638360u,  6663423873348080050u,         183510511249u },
  {  1147543073987366419u,  9417270363716235132u,         197503883703u },
  {  8410777835225272692u,  9295013721571344178u,          63336074437u },
  {  8134725822306818018u,  6199479138350037782u,          14048117055u },
  {  8899607004752328377u,   887603005365085687u,         232018105614u },
  {   690976506652396830u,   333989628642975695u,         140250490600u },
  { 12281570945595192074u,  4620735991403939438u,          54673209484u },
  { 12592957291365552899u, 12418523063962801200u,         219086071862u },
  { 13595807339013970272u,  1587745622680169418u,                10715u },
  {  9698096389749839992u,      197658450495420u,                    0u },
  {  8310173728816391804u,               197658u,                    0u },
};

inline constexpr int __TABLE_SIZE_2 = 69;
inline constexpr int __ADDITIONAL_BITS_2 = 120;

inline constexpr uint16_t __POW10_OFFSET_2[__TABLE_SIZE_2] = {
     0,    2,    6,   12,   20,   29,   40,   52,   66,   80,
    95,  112,  130,  150,  170,  192,  215,  240,  265,  292,
   320,  350,  381,  413,  446,  480,  516,  552,  590,  629,
   670,  712,  755,  799,  845,  892,  940,  989, 1040, 1092,
  1145, 1199, 1254, 1311, 1369, 1428, 1488, 1550, 1613, 1678,
  1743, 1810, 1878, 1947, 2017, 2088, 2161, 2235, 2311, 2387,
  2465, 2544, 2625, 2706, 2789, 2873, 2959, 3046, 3133
};

inline constexpr uint8_t __MIN_BLOCK_2[__TABLE_SIZE_2] = {
     0,    0,    0,    0,    0,    0,    1,    1,    2,    3,
     3,    4,    4,    5,    5,    6,    6,    7,    7,    8,
     8,    9,    9,   10,   11,   11,   12,   12,   13,   13,
    14,   14,   15,   15,   16,   16,   17,   17,   18,   19,
    19,   20,   20,   21,   21,   22,   22,   23,   23,   24,
    24,   25,   26,   26,   27,   27,   28,   28,   29,   29,
    30,   30,   31,   31,   32,   32,   33,   34,    0
};

inline constexpr uint64_t __POW10_SPLIT_2[3133][3] = {
  {                    0u,                    0u,              3906250u },
  {                    0u,                    0u,         202000000000u },
  {                    0u, 11153727427136454656u,                   59u },
  {                    0u,  7205759403792793600u,          59604644775u },
  {                    0u,                    0u,         167390625000u },
  {                    0u,                    0u,         232000000000u },
  {                    0u,    16777216000000000u,                    0u },
  {                    0u, 12945425605062557696u,               909494u },
  {                    0u,  4388757836872548352u,         182701772928u },
  {                    0u,  1152921504606846976u,         128237915039u },
  {                    0u,                    0u,         159062500000u },
  {                    0u,                    0u,         160000000000u },
  {                    0u,         256000000000u,                    0u },
  {                    0u, 16192327041775828992u,                   13u },
  {                    0u, 15024075324038053888u,          13877787807u },
  {                    0u,  5449091666327633920u,         159814456755u },
  {                    0u,  2494994193563254784u,         179295395851u },
  {                    0u,  4611686018427387904u,          11135253906u },
  {                    0u,                    0u,         146250000000u },
  {                    0u,                    0u,         128000000000u },
  {                    0u,              3906250u,                    0u },
  {                    0u,     3906250000000000u,                    0u },
  {                    0u,  4368439412768899072u,               211758u },
  {                    0u,  1563676642168012800u,          46236813575u },
  {                    0u, 11532349341402398720u,           7084767080u },
  {                    0u,  9048364970084925440u,         104625169910u },
  {                    0u, 16609275425742389248u,         246490512847u },
  {                    0u,                    0u,         207900390625u },
  {                    0u,                    0u,         225000000000u },
  { 11153727427136454656u,                   59u,                    0u },
  {  7205759403792793600u,          59604644775u,                    0u },
  {                    0u,  4264412554261970152u,                    3u },
  {                    0u, 14485570586272534528u,           3231174267u },
  {                    0u, 17827675094632103936u,         123785264354u },
  {                    0u,  7347197909193981952u,         226966440203u },
  {                    0u, 13677404030777688064u,          11398292396u },
  {                    0u,  3810326759732150272u,         172741453558u },
  {                    0u,  9943947977234055168u,         246206558227u },
  {                    0u,                    0u,          19539062500u },
  {                    0u,                    0u,         228000000000u },
  { 12945425605062557696u,               909494u,                    0u },
  {  4388757836872548352u,      909494701772928u,                    0u },
  {  1152921504606846976u, 14878706826214591391u,                49303u },
  {                    0u,  4387341015746028192u,         151806576313u },
  {                    0u,   651726680428265472u,         185237838233u },
  {                    0u,  2570638187944738816u,         153035330174u },
  {                    0u,  7419175577111756800u,         126139354575u },
  {                    0u, 17299322326264840192u,         207402194313u },
  {                    0u,  7990511638862102528u,         137937798142u },
  {                    0u, 16717361816799281152u,         254433166503u },
  {                    0u,                    0u,         167906250000u },
  {                    0u,                    0u,          16000000000u },
  { 16192327041775828992u,                   13u,                    0u },
  { 15024075324038053888u,          13877787807u,                    0u },
  {  5449091666327633920u, 13877787807814456755u,                    0u },
  {  2494994193563254784u,  9707857417284919307u,            752316384u },
  {  4611686018427387904u,  1844515466944871826u,         224526264005u },
  {                    0u, 15167599819856275072u,         197099991383u },
  {                    0u, 14830185305589481472u,          87822237233u },
  {                    0u,  6163721531743535104u,          49803945956u },
  {                    0u, 14122847407012052992u,         228334136013u },
  {                    0u,   335491783960035328u,         205765601092u },
  {                    0u,   941252322120433664u,          68018187046u },
  {                    0u, 11529215046068469760u,          38051025390u },
  {                    0u,                    0u,         238625000000u },
  {                    0u,                    0u,          64000000000u },
  {  4368439412768899072u,               211758u,                    0u },
  {  1563676642168012800u,      211758236813575u,                    0u },
  { 11532349341402398720u,  8061591463141767016u,                11479u },
  {  9048364970084925440u, 16628725344207857142u,         215437019748u },
  { 16609275425742389248u,  3555541870038531535u,         100901445007u },
  {                    0u, 18316647450161853665u,         143192746310u },
  {                    0u, 16709574568378075648u,          70992947447u },
  {                    0u,  7696022835795591168u,         247905827852u },
  {                    0u, 16664449640376041472u,          12417202233u },
  {                    0u,  3109186955116544000u,          57903381625u },
  {                    0u, 10515518101817131008u,         121168549362u },
  {                    0u,  9961962375743537152u,         242570047378u },
  {                    0u,  9223372036854775808u,         146540039062u },
  {                    0u,                    0u,         150500000000u },
  { 14485570586272534528u,           3231174267u,                    0u },
  { 17827675094632103936u,  3231174267785264354u,                    0u },
  {  7347197909193981952u,   748977172262750475u,            175162308u },
  { 13677404030777688064u, 15965033457315095468u,         196040602133u },
  {  3810326759732150272u, 16809402149066729206u,          21865466197u },
  {  9943947977234055168u,  7563769067065700371u,          85911239516u },
  {                    0u, 13550322810840051428u,          92410032742u },
  {                    0u,  8663209637545764864u,         102734564471u },
  {                    0u,  8969247575312957440u,         119469633535u },
  {                    0u,  6193172891660451840u,         255486223885u },
  {                    0u,  3427954273864908800u,          13335732575u },
  {                    0u, 10058367555266936832u,          95185829773u },
  {                    0u, 13907115649320091648u,         141545265197u },
  {                    0u,                    0u,          45753906250u },
  {                    0u,                    0u,          74000000000u },
  { 14878706826214591391u,                49303u,                    0u },
  {  4387341015746028192u,       49303806576313u,                    0u },
  {   651726680428265472u, 14106411361315920281u,                 2672u },
  {  2570638187944738816u,  3609034283485221502u,         112764710092u },
  {  7419175577111756800u,  9896072247338192335u,         204195646140u },
  { 17299322326264840192u,  8889095178479228297u,         188536467151u },
  {  7990511638862102528u,  3631796911038383102u,         207481878815u },
  { 16717361816799281152u,   898318840772166823u,          31196880105u },
  {                    0u, 17293677953982795024u,         233048697961u },
  {                    0u,  7353628266884669440u,         105937492160u },
  {                    0u,  2404693032470315008u,         192398640987u },
  {                    0u,  9191155893041889280u,          91130358670u },
  {                    0u,  6353946855033798656u,         142498253559u },
  {                    0u,  3767824038248841216u,         247344448149u },
  {                    0u,  7205759403792793600u,         149204254150u },
  {                    0u,                    0u,         198390625000u },
  {                    0u,                    0u,         232000000000u },
  {  9707857417284919307u,            752316384u,                    0u },
  {  1844515466944871826u,   752316384526264005u,                    0u },
  { 15167599819856275072u, 17063068157692817751u,             40783152u },
  { 14830185305589481472u,  5385330256507239985u,          48924990778u },
  {  6163721531743535104u,  3373050282752075748u,          58291939338u },
  { 14122847407012052992u,  4116064001262906061u,          10182853422u },
  {   335491783960035328u, 11306582046748043076u,          46223132276u },
  {   941252322120433664u, 17035410946089626406u,         116612931040u },
  { 11529215046068469760u, 15618595715183448558u,         224923491477u },
  {                    0u,  5141740092277295680u,         149846685770u },
  {                    0u, 16973644291514990592u,          74278734288u },
  {                    0u, 14625255268443750400u,         208920143100u },
  {                    0u, 14021170507320131584u,         252792836676u },
  {                    0u,  4451355232865091584u,          68760089176u },
  {                    0u, 12891553933348044800u,          88241308450u },
  {                    0u,  1152921504606846976u,          34698852539u },
  {                    0u,                    0u,         187062500000u },
  {                    0u,                    0u,         160000000000u },
  {  8061591463141767016u,                11479u,                    0u },
  { 16628725344207857142u,       11479437019748u,                    0u },
  {  3555541870038531535u,  5562205901560339855u,                  622u },
  { 18316647450161853665u,  2106077949367544134u,         110301527786u },
  { 16709574568378075648u,  7496855998374373623u,         234114170714u },
  {  7696022835795591168u,   229183437194837004u,          90406405378u },
  { 16664449640376041472u,   465169186276472889u,           2012424059u },
  {  3109186955116544000u,  2152980561625316473u,         123025216872u },
  { 10515518101817131008u,  2059790725449340402u,         104116713310u },
  {  9961962375743537152u, 17891190926410198930u,          94111661478u },
  {  9223372036854775808u,  9930696175609809814u,         166969883403u },
  {                    0u,  7276914261609005312u,          11538344118u },
  {                    0u, 10539762974036983808u,         182394482312u },
  {                    0u, 12851089458992250880u,         136571361695u },
  {                    0u,  9449311677678878720u,         159696658955u },
  {                    0u,  8699564697382289408u,          11512248212u },
  {                    0u,  4224376450473525248u,         148471604347u },
  {                    0u,  4611686018427387904u,         123229003906u },
  {                    0u,                    0u,         130250000000u },
  {                    0u,                    0u,         128000000000u },
  {   748977172262750475u,            175162308u,                    0u },
  { 15965033457315095468u,   175162308040602133u,                    0u },
  { 16809402149066729206u, 13756840147955779925u,              9495567u },
  {  7563769067065700371u, 13788447602092505948u,          15745759798u },
  { 13550322810840051428u,  4972540435632173670u,          54747473242u },
  {  8663209637545764864u,  2844874687533091959u,          90269561957u },
  {  8969247575312957440u, 15377573779532804095u,         101154220965u },
  {  6193172891660451840u, 17824715805091194381u,         165833619944u },
  {  3427954273864908800u, 18277569135638159711u,         232966279779u },
  { 10058367555266936832u,  4254645803379752845u,          99990829008u },
  { 13907115649320091648u,  2933643244178200621u,         208230644811u },
  {                    0u, 17188148801879487562u,          75159033118u },
  {                    0u, 11069762501163246592u,          30931771413u },
  {                    0u, 11676570643941818368u,          21600093027u },
  {                    0u, 17840016768744030208u,          99632988162u },
  {                    0u, 16463817321652158464u,           2967109246u },
  {                    0u,  6954191143357644800u,         126892505325u },
  {                    0u,  5080060379673919488u,         237376987457u },
  {                    0u,                    0u,          65275390625u },
  {                    0u,                    0u,         161000000000u },
  { 14106411361315920281u,                 2672u,                    0u },
  {  3609034283485221502u,        2672764710092u,                    0u },
  {  9896072247338192335u, 16433563478020213436u,                  144u },
  {  8889095178479228297u,  4194750497955655375u,         144890865261u },
  {  3631796911038383102u,  2691539602252904735u,         109227397880u },
  {   898318840772166823u,  3775467271962795241u,         248145908654u },
  { 17293677953982795024u, 16980212613224918121u,         174204668490u },
  {  7353628266884669440u,  4172857038337333440u,          74920499170u },
  {  2404693032470315008u,  5936867627376461659u,         226226211033u },
  {  9191155893041889280u, 17856837443266866062u,         217321838238u },
  {  6353946855033798656u,  8956297047799810807u,         158968021097u },
  {  3767824038248841216u, 15356974049716912789u,         105485521835u },
  {  7205759403792793600u,  6923608913322982854u,         171832503231u },
  {                    0u,  4855902993563955944u,         191375329591u },
  {                    0u, 13835893222288330752u,          55263239028u },
  {                    0u,  9114973913760137216u,         116750045274u },
  {                    0u, 17937099003422310400u,          90494123725u },
  {                    0u,  7007960010734960640u,         205972372085u },
  {                    0u,  7683422439270776832u,         117379902273u },
  {                    0u,   720575940379279360u,          65416519165u },
  {                    0u,                    0u,         253039062500u },
  {                    0u,                    0u,         228000000000u },
  { 17063068157692817751u,             40783152u,                    0u },
  {  5385330256507239985u,    40783152924990778u,                    0u },
  {  3373050282752075748u,  2768933352715741194u,              2210859u },
  {  4116064001262906061u, 15201941611824153390u,          43150104177u },
  { 11306582046748043076u,  1418128541727000180u,         113824098906u },
  { 17035410946089626406u,  5353350204565757408u,          90076876902u },
  { 15618595715183448558u,  1721001680354286741u,         102290205696u },
  {  5141740092277295680u,   637631411660453962u,             93295688u },
  { 16973644291514990592u,  1630012588870568400u,          72034566068u },
  { 14625255268443750400u,  9253063571656828156u,         180088363159u },
  { 14021170507320131584u,  6029146854993203780u,         151501609581u },
  {  4451355232865091584u, 16987401965352759896u,         109326840705u },
  { 12891553933348044800u, 14499131620542087970u,         129920888905u },
  {  1152921504606846976u,  1978417255298660539u,          73785999500u },
  {                    0u,  5790079354402454176u,         140107250214u },
  {                    0u, 13748918935842078720u,          38313880830u },
  {                    0u, 18047438014740692992u,         254745330388u },
  {                    0u,  3116889656839372800u,         212978353575u },
  {                    0u, 15995952446606147584u,         167168966926u },
  {                    0u, 12530140063251562496u,          14867142319u },
  {                    0u, 16717361816799281152u,         175679260253u },
  {                    0u,                    0u,          93906250000u },
  {                    0u,                    0u,          16000000000u },
  {  5562205901560339855u,                  622u,                    0u },
  {  2106077949367544134u,         622301527786u,                    0u },
  {  7496855998374373623u, 13558973353698967386u,                   33u },
  {   229183437194837004u,  6228991722850501890u,          33735033418u },
  {   465169186276472889u, 16886831391703377787u,          74337674317u },
  {  2152980561625316473u,  1181713637872883048u,          77915436964u },
  {  2059790725449340402u, 12393932434925221726u,         164064060824u },
  { 17891190926410198930u, 10684799845419711910u,         152671876423u },
  {  9930696175609809814u,  4590318792215640843u,          71579224160u },
  {  7276914261609005312u,  6383712187366189238u,          96248841680u },
  { 10539762974036983808u,  1904270214927675016u,         208346061731u },
  { 12851089458992250880u,  3711506775113308575u,         163103230695u },
  {  9449311677678878720u,  8091219444738793995u,         231201201185u },
  {  8699564697382289408u,    39436684991068052u,          33438625885u },
  {  4224376450473525248u, 18025182908196512891u,          93002137866u },
  {  4611686018427387904u,  7853924592034603138u,          10977147123u },
  {                    0u,  4815749283615688320u,         243425762105u },
  {                    0u, 14242399906544287744u,          57261062291u },
  {                    0u,    76242322576113664u,         147772082046u },
  {                    0u, 10858088421377703936u,         126004133104u },
  {                    0u, 14293835879041466368u,         240588618152u },
  {                    0u, 12182236992037191680u,         168774870395u },
  {                    0u, 11529215046068469760u,         123660400390u },
  {                    0u,                    0u,           6625000000u },
  {                    0u,                    0u,          64000000000u },
  { 13756840147955779925u,              9495567u,                    0u },
  { 13788447602092505948u,     9495567745759798u,                    0u },
  {  4972540435632173670u, 14000097438505379162u,               514755u },
  {  2844874687533091959u, 16451062686452429925u,         195758946802u },
  { 15377573779532804095u,  4009347599785716645u,         242891813895u },
  { 17824715805091194381u, 16544162347546196456u,           7217347168u },
  { 18277569135638159711u, 17674258299745817187u,          96896860837u },
  {  4254645803379752845u,  5215238411201214416u,         165958123462u },
  {  2933643244178200621u, 14253990228345322571u,         198282718640u },
  { 17188148801879487562u, 11214836553940194590u,         176772710358u },
  { 11069762501163246592u, 14620711348380590101u,         214607957507u },
  { 11676570643941818368u,  6638710787931587427u,           3792590350u },
  { 17840016768744030208u, 17320000343692853250u,          14359885232u },
  { 16463817321652158464u,    75147386268843646u,         176938919100u },
  {  6954191143357644800u, 17938801582125480173u,         188004073747u },
  {  5080060379673919488u,  6573358613626446145u,          19972464382u },
  {                    0u,  8688505427903736481u,         254356342484u },
  {                    0u,   539870168696556032u,         212471004823u },
  {                    0u,  9002861336394465280u,         151029266420u },
  {                    0u, 17989846818158018560u,         244488046090u },
  {                    0u,  2700938287723315200u,          10975231550u },
  {                    0u, 17800090499088908288u,          62146418157u },
  {                    0u,  8809040871136690176u,         237964944839u },
  {                    0u,  9223372036854775808u,         199477539062u },
  {                    0u,                    0u,         246500000000u },
  { 16433563478020213436u,                  144u,                    0u },
  {  4194750497955655375u,         144890865261u,                    0u },
  {  2691539602252904735u, 15763656745260536568u,                    7u },
  {  3775467271962795241u,  8787336846248645550u,           7854549544u },
  { 16980212613224918121u, 17584084447880694346u,          40476362484u },
  {  4172857038337333440u, 18041672551129683938u,         244953235127u },
  {  5936867627376461659u, 14025886302294509785u,         183978041028u },
  { 17856837443266866062u, 18430498103283160734u,         196760344819u },
  {  8956297047799810807u,  3292348826238025833u,         243999119304u },
  { 15356974049716912789u,  9211721212658275243u,         200178478587u },
  {  6923608913322982854u, 10233245872666307519u,         251499368407u },
  {  4855902993563955944u,  6200995035623311671u,         215554745370u },
  { 13835893222288330752u,  8480542380570450804u,          26336156614u },
  {  9114973913760137216u, 11870363864499900506u,         198459731123u },
  { 17937099003422310400u,  9301051379839581901u,         179643493714u },
  {  7007960010734960640u, 11456694803569638005u,          82504211005u },
  {  7683422439270776832u, 14327208890643983169u,          61621068669u },
  {   720575940379279360u,  4510081789599866365u,         125776679550u },
  {                    0u, 13255356976020303332u,         126244492023u },
  {                    0u,  9658806854127314944u,         247718574341u },
  {                    0u, 13708435528809971712u,           5523604968u },
  {                    0u,  1580190652103131136u,         232743135779u },
  {                    0u, 16557336970347413504u,          35085662306u },
  {                    0u, 12751520132434493440u,          98897575035u },
  {                    0u,  9295429630892703744u,         123691261291u },
  {                    0u,                    0u,         107503906250u },
  {                    0u,                    0u,         202000000000u },
  {  2768933352715741194u,              2210859u,                    0u },
  { 15201941611824153390u,     2210859150104177u,                    0u },
  {  1418128541727000180u, 16872870088062921306u,               119850u },
  {  5353350204565757408u,  5112979788807802982u,          42914680120u },
  {  1721001680354286741u, 13742728082020150272u,          56277175189u },
  {   637631411660453962u,  2217110934613627976u,         149744994782u },
  {  1630012588870568400u, 11021433940188610484u,         222120189824u },
  {  9253063571656828156u,  1713669895470733463u,         128597473131u },
  {  6029146854993203780u,  3313382510572018285u,         107092898231u },
  { 16987401965352759896u, 14976595232784069505u,         183179618825u },
  { 14499131620542087970u,  7213172372862496841u,           9811882854u },
  {  1978417255298660539u, 15836474542502248588u,         102391026857u },
  {  5790079354402454176u,  3221099285878340134u,         169858497005u },
  { 13748918935842078720u,  3265814602578095358u,         237174616142u },
  { 18047438014740692992u,  6502528252282225364u,          78177040164u },
  {  3116889656839372800u, 16392476834556790183u,          36352502762u },
  { 15995952446606147584u, 15167629413417091342u,         234888637949u },
  { 12530140063251562496u,  1366763272626280111u,         253822238838u },
  { 16717361816799281152u,  8720523635169216093u,         118074092385u },
  {                    0u,  9649171375767398672u,          97472740533u },
  {                    0u,  7647980704001073152u,         181523082628u },
  {                    0u, 13286434495608651776u,         132414597864u },
  {                    0u,  4358271637167013888u,         232720259057u },
  {                    0u, 15954987941890097152u,         241236262378u },
  {                    0u,  7911135695429697536u,         234864921629u },
  {                    0u,  7205759403792793600u,          29428863525u },
  {                    0u,                    0u,          37390625000u },
  {                    0u,                    0u,         232000000000u },
  { 13558973353698967386u,                   33u,                    0u },
  {  6228991722850501890u,          33735033418u,                    0u },
  { 16886831391703377787u, 15288289344628122701u,                    1u },
  {  1181713637872883048u,   952589339068938148u,           1828779826u },
  { 12393932434925221726u, 10058155040190817688u,          50051639971u },
  { 10684799845419711910u,  5322725640026584391u,         163545253677u },
  {  4590318792215640843u,  2269982385930389600u,          45288545535u },
  {  6383712187366189238u, 13216683679976310224u,         255123055991u },
  {  1904270214927675016u, 17417440642083494819u,         119716477857u },
  {  3711506775113308575u,  3029180749090900711u,         161944201349u },
  {  8091219444738793995u,  8315443826261908513u,         133164212217u },
  {    39436684991068052u,  1488962797247197277u,         249450781113u },
  { 18025182908196512891u, 18009099634999034122u,         185080716834u },
  {  7853924592034603138u,  8092455412807497971u,          34976275247u },
  {  4815749283615688320u, 17808458047236758329u,          47438692886u },
  { 14242399906544287744u,  3164591817527425171u,          22965398445u },
  {    76242322576113664u,  3314036340472350590u,         173171552866u },
  { 10858088421377703936u,    33234902404332784u,          98179654270u },
  { 14293835879041466368u, 12349284717857274280u,         126001801667u },
  { 12182236992037191680u, 18209607903013119355u,         195669456065u },
  { 11529215046068469760u,  7891549145984268038u,         193987144822u },
  {                    0u,  7703609897518594624u,         118427801736u },
  {                    0u,  6336912652634587136u,         136417613529u },
  {                    0u,  4461621834659397632u,         217343524723u },
  {                    0u,  5484660635557953536u,         115241865004u },
  {                    0u, 15142619273265938432u,          44297324048u },
  {                    0u, 12170977992968765440u,          16820883035u },
  {                    0u,  1152921504606846976u,          91659790039u },
  {                    0u,                    0u,         215062500000u },
  {                    0u,                    0u,         160000000000u },
  { 14000097438505379162u,               514755u,                    0u },
  { 16451062686452429925u,      514755758946802u,                    0u },
  {  4009347599785716645u, 17812314011563521031u,                27904u },
  { 16544162347546196456u,  7684138864490314336u,            965607477u },
  { 17674258299745817187u,  9740522787420029605u,          53416558002u },
  {  5215238411201214416u,  6701109407732989894u,         178528034798u },
  { 14253990228345322571u, 16534886227502443952u,         238363267868u },
  { 11214836553940194590u,  8908667306968317910u,          28896357978u },
  { 14620711348380590101u,  7531472173477105155u,          90482939822u },
  {  6638710787931587427u, 11527371604834801166u,         174408281924u },
  { 17320000343692853250u, 15688593496691078576u,          68624900066u },
  {    75147386268843646u, 11394944804253312188u,         226850480357u },
  { 17938801582125480173u, 11182279880854372627u,         229617721195u },
  {  6573358613626446145u,   150579373068361470u,         107606192607u },
  {  8688505427903736481u,  3147220002440857300u,         223008162924u },
  {   539870168696556032u,  3630514817795505815u,         108170611138u },
  {  9002861336394465280u, 11708796588334233588u,         194196810602u },
  { 17989846818158018560u, 16844495466426369546u,         106634735134u },
  {  2700938287723315200u, 17636655472325475902u,          30913141928u },
  { 17800090499088908288u, 17038926655686645229u,         168956085008u },
  {  8809040871136690176u, 15602838456783529415u,          16923682064u },
  {  9223372036854775808u, 10869815869248876790u,          16845831567u },
  {                    0u, 18407124180939800832u,         143589253898u },
  {                    0u,  5705018517251293184u,          10997852201u },
  {                    0u,  9660452258743058432u,          41309269673u },
  {                    0u,  5646292272224927744u,         169523694166u },
  {                    0u,  7410409304047484928u,          86306086117u },
  {                    0u,  5953758707383795712u,         229401719093u },
  {                    0u,  4611686018427387904u,          53322753906u },
  {                    0u,                    0u,         114250000000u },
  {                    0u,                    0u,         128000000000u },
  { 15763656745260536568u,                    7u,                    0u },
  {  8787336846248645550u,           7854549544u,                    0u },
  { 17584084447880694346u,  7854549544476362484u,                    0u },
  { 18041672551129683938u,    15035424419724983u,            425795984u },
  { 14025886302294509785u, 18280822466032836292u,         144000815071u },
  { 18430498103283160734u, 11524250747302615283u,         223991005371u },
  {  3292348826238025833u, 15212285943691810760u,         187624730884u },
  {  9211721212658275243u,  7951804027551297019u,           4824659673u },
  { 10233245872666307519u,  1706416229965221847u,         217431068160u },
  {  6200995035623311671u,  3406023111930700826u,             92505009u },
  {  8480542380570450804u, 16132696204133391302u,         177184640882u },
  { 11870363864499900506u, 11593846688794356915u,         114874555213u },
  {  9301051379839581901u,  6875759884161133906u,          77628503688u },
  { 11456694803569638005u,  3593593325323835965u,         136372735690u },
  { 14327208890643983169u,  9542049733257388925u,         202194809084u },
  {  4510081789599866365u,  9926551925937787518u,         252517275552u },
  { 13255356976020303332u,  3128491553219547895u,         160538119458u },
  {  9658806854127314944u, 17158408656931354885u,          34169595866u },
  { 13708435528809971712u,  2065169543154992616u,         218930159197u },
  {  1580190652103131136u,  4832622393556232739u,          93111953065u },
  { 16557336970347413504u, 16505930714733656162u,         169261976984u },
  { 12751520132434493440u, 18270988073492888699u,         152894788296u },
  {  9295429630892703744u,  2525111411519708523u,         200990472248u },
  {                    0u, 16728989342518570442u,          56136886563u },
  {                    0u,  7974052022039438336u,          35906880329u },
  {                    0u,  5356554962386550784u,          73432274226u },
  {                    0u,  6693869495028547584u,          50290379426u },
  {                    0u,  8157517147199766528u,         162362875392u },
  {                    0u, 12065776720423157760u,            442219890u },
  {                    0u, 11997589407315001344u,         114654087066u },
  {                    0u,                    0u,         154650390625u },
  {                    0u,                    0u,          97000000000u },
  { 16872870088062921306u,               119850u,                    0u },
  {  5112979788807802982u,      119850914680120u,                    0u },
  { 13742728082020150272u,  2418433229320326037u,                 6497u },
  {  2217110934613627976u,  1143911773589293534u,          97131103528u },
  { 11021433940188610484u,  9276183703610924928u,          40062011581u },
  {  1713669895470733463u,  3532180128827684715u,         189502862926u },
  {  3313382510572018285u,  8563997501322031543u,          78191479868u },
  { 14976595232784069505u, 14843890409658460681u,          60464255234u },
  {  7213172372862496841u,  9489417861634552678u,           2804688911u },
  { 15836474542502248588u,  1113198223322322089u,          15514422373u },
  {  3221099285878340134u, 11190777557146597869u,         101060346596u },
  {  3265814602578095358u, 17764553645932638286u,         228606653266u },
  {  6502528252282225364u, 14900777150991234852u,          82963018382u },
  { 16392476834556790183u, 17364899863357893610u,         142807772747u },
  { 15167629413417091342u, 15537570181590167037u,          75941353107u },
  {  1366763272626280111u,  5558052627121307766u,         147842293367u },
  {  8720523635169216093u, 12095241565795232609u,         119301302636u },
  {  9649171375767398672u,  2187936505958366389u,         108655684359u },
  {  7647980704001073152u, 12009203621325860228u,           7118608275u },
  { 13286434495608651776u, 14814842834750302952u,         147651020232u },
  {  4358271637167013888u,  5965296499605198833u,         200803114239u },
  { 15954987941890097152u,  4051026394962148842u,         255323379371u },
  {  7911135695429697536u, 16799526299141688349u,         171219606580u },
  {  7205759403792793600u,  9460214166646215205u,          52910704145u },
  {                    0u, 10750736995029068008u,          17512839237u },
  {                    0u,  5377963045376430080u,          69582798620u },
  {                    0u, 15996910350253424640u,          28291539960u },
  {                    0u, 13651157529655246848u,         248867194247u },
  {                    0u,  9771305410219737088u,         135740030732u },
  {                    0u, 12709439623416250368u,          12529703527u },
  {                    0u,  9943947977234055168u,         103688980102u },
  {                    0u,                    0u,         134539062500u },
  {                    0u,                    0u,         228000000000u },
  {   952589339068938148u,           1828779826u,                    0u },
  { 10058155040190817688u,  1828779826051639971u,                    0u },
  {  5322725640026584391u,   371564423966525229u,             99138353u },
  {  2269982385930389600u, 14464859121514339583u,          49020142547u },
  { 13216683679976310224u,  3913119023023056247u,         211784141584u },
  { 17417440642083494819u,  5493396321716566945u,          16212130607u },
  {  3029180749090900711u,  5837454566818211973u,          47297797611u },
  {  8315443826261908513u,  2886670683193253881u,         235316449046u },
  {  1488962797247197277u,  5504823105587173817u,          22156486731u },
  { 18009099634999034122u,  9431834277334851106u,          75298417058u },
  {  8092455412807497971u, 12921661346456247087u,         162511300760u },
  { 17808458047236758329u,  3643076516404724246u,         152700484665u },
  {  3164591817527425171u, 12559396953196866477u,          57197491573u },
  {  3314036340472350590u,  1626880974916825698u,         117680846273u },
  {    33234902404332784u,  6806994170946429566u,         193088193394u },
  { 12349284717857274280u,  7596631230206896579u,         114369007893u },
  { 18209607903013119355u,  3100480253729502401u,          21411814204u },
  {  7891549145984268038u,  6310570748781063286u,          60168077371u },
  {  7703609897518594624u, 14251867077375744136u,          59342096725u },
  {  6336912652634587136u,  6701165793751570137u,          85772595262u },
  {  4461621834659397632u, 10856833140463959923u,          62363270925u },
  {  5484660635557953536u, 15867563727561248556u,          13588550103u },
  { 15142619273265938432u,  5048961008671491600u,         215860182353u },
  { 12170977992968765440u, 13278183119599849051u,          81273704724u },
  {  1152921504606846976u,  4547591784941053655u,          20719811749u },
  {                    0u, 11815437715887182496u,         165246525444u },
  {                    0u,   398495392178782208u,           4640516162u },
  {                    0u,  9154841240825495552u,          66021602478u },
  {                    0u,  1902683298245640192u,         174496284938u },
  {                    0u,  5081900962138816512u,          10103144668u },
  {                    0u,  3234710432358858752u,         220275490403u },
  {                    0u, 16717361816799281152u,          99175354003u },
  {                    0u,                    0u,         147906250000u },
  {                    0u,                    0u,          16000000000u },
  { 17812314011563521031u,                27904u,                    0u },
  {  7684138864490314336u,       27904965607477u,                    0u },
  {  9740522787420029605u, 13488568028574514610u,                 1512u },
  {  6701109407732989894u,   275784718433886190u,         232731216738u },
  { 16534886227502443952u, 10020568880357102364u,          98014950319u },
  {  8908667306968317910u,  8876397213146246746u,         175543216127u },
  {  7531472173477105155u,  2155905919114811310u,         255481190457u },
  { 11527371604834801166u,  1087100407155601220u,          57116871894u },
  { 15688593496691078576u,  2903498381705011170u,         214058931831u },
  { 11394944804253312188u, 12223476257006657765u,         119157398962u },
  { 11182279880854372627u, 12148657163736735595u,         178662635975u },
  {   150579373068361470u,  8951241323311673823u,         199658580024u },
  {  3147220002440857300u,  8463862715901576300u,          56485247764u },
  {  3630514817795505815u,  3873401978748963266u,          20458826917u },
  { 11708796588334233588u,   248364795947002730u,         165209977542u },
  { 16844495466426369546u, 10454378025404001822u,         198013463882u },
  { 17636655472325475902u,  6574176865628265640u,          74566732968u },
  { 17038926655686645229u,    16703315293848336u,         168356386842u },
  { 15602838456783529415u,  9896033222450013456u,          26000905488u },
  { 10869815869248876790u, 17311376269334085007u,          16536465035u },
  { 18407124180939800832u, 18378511316495639306u,         139938451587u },
  {  5705018517251293184u, 15120796393727584297u,         131996301094u },
  {  9660452258743058432u, 18253447805740347049u,          38819700014u },
  {  5646292272224927744u,  5842497225601731158u,          46989521388u },
  {  7410409304047484928u,  4369968404176723173u,         236316722409u },
  {  5953758707383795712u, 16142207253674488117u,         233236896461u },
  {  4611686018427387904u, 12124259227391928178u,         205875070808u },
  {                    0u, 13019483264566077056u,          88657257409u },
  {                    0u,    74901376448135168u,         193705787602u },
  {                    0u, 13897060093813325824u,         210004060411u },
  {                    0u,  4495486210810052608u,         251753361137u },
  {                    0u, 14885496280087265280u,         241243700795u },
  {                    0u,  4976477588244398080u,          59806944370u },
  {                    0u, 11529215046068469760u,         114269775390u },
  {                    0u,                    0u,          30625000000u },
  {                    0u,                    0u,          64000000000u },
  {    15035424419724983u,            425795984u,                    0u },
  { 18280822466032836292u,   425795984000815071u,                    0u },
  { 11524250747302615283u, 10043594327130472635u,             23082446u },
  { 15212285943691810760u,  8336034337032909060u,         206544464339u },
  {  7951804027551297019u, 16717215784895280857u,         211451897326u },
  {  1706416229965221847u, 10968831263951212032u,         238906242083u },
  {  3406023111930700826u,  5536629379734406065u,          35594621534u },
  { 16132696204133391302u,  1618806894932332402u,          94300141280u },
  { 11593846688794356915u, 11363331325254998861u,         224087755697u },
  {  6875759884161133906u,  8775167772751754888u,         177616007425u },
  {  3593593325323835965u,  2898202945316114122u,           1475702798u },
  {  9542049733257388925u,  8868842714495185148u,          14157111896u },
  {  9926551925937787518u, 17052094667531999136u,          88480780926u },
  {  3128491553219547895u,  3658615537031138594u,         126924395904u },
  { 17158408656931354885u, 12486952437987190746u,         128198333945u },
  {  2065169543154992616u,   912079238520577629u,         249676919048u },
  {  4832622393556232739u, 10960072898031888041u,           8049443914u },
  { 16505930714733656162u,  6129550094334741912u,          74594146742u },
  { 18270988073492888699u,  7965724516573729480u,         182332283576u },
  {  2525111411519708523u,  5801761178810791992u,         184431822791u },
  { 16728989342518570442u, 13197466483098446115u,         199314514103u },
  {  7974052022039438336u, 11326268638393107273u,         183715436091u },
  {  5356554962386550784u,  3597339351794947378u,          59613998253u },
  {  6693869495028547584u,   353880726151383714u,         173195012157u },
  {  8157517147199766528u, 11154818162602073600u,          61019183912u },
  { 12065776720423157760u,  5141043976157511026u,          40604703904u },
  { 11997589407315001344u,  7188225141808859034u,         160278696552u },
  {                    0u, 13894168943295705185u,         104389674465u },
  {                    0u, 12176538069834828288u,         225753204407u },
  {                    0u,  7994239409235165184u,         183660091451u },
  {                    0u, 13707777025480065024u,          59433368586u },
  {                    0u, 10120227247676719104u,          10743100081u },
  {                    0u,  7358494763030413312u,         177548618618u },
  {                    0u,  7656119366529843200u,         122398904800u },
  {                    0u,  9223372036854775808u,         224415039062u },
  {                    0u,                    0u,          86500000000u },
  {  2418433229320326037u,                 6497u,                    0u },
  {  1143911773589293534u,        6497131103528u,                    0u },
  {  9276183703610924928u,  3877189582299842749u,                  352u },
  {  3532180128827684715u,  7625565791857948238u,          96210182868u },
  {  8563997501322031543u, 16568435163612007484u,         212413382749u },
  { 14843890409658460681u, 17592071940521808130u,          93898176669u },
  {  9489417861634552678u, 15158637878035490831u,         157953668130u },
  {  1113198223322322089u, 17789243229146401893u,          34821751405u },
  { 11190777557146597869u, 14677686051252896484u,         109964356807u },
  { 17764553645932638286u,  3531237481269211986u,         199795678955u },
  { 14900777150991234852u,  8074435404989280910u,         235191428767u },
  { 17364899863357893610u,  7086549341467684427u,         159437716020u },
  { 15537570181590167037u, 10556134770918626963u,          52384162609u },
  {  5558052627121307766u, 10772666134712966775u,          49572249212u },
  { 12095241565795232609u,  6195173298198112620u,         124583987401u },
  {  2187936505958366389u,  8144773843324250887u,         201335841017u },
  { 12009203621325860228u, 14144284817150924691u,         249441529074u },
  { 14814842834750302952u,  6464447844648863176u,         242766763216u },
  {  5965296499605198833u, 15760468443293179135u,         208350438419u },
  {  4051026394962148842u,  5172191224908322475u,          19854376706u },
  { 16799526299141688349u,  2357554307308969012u,           2280385048u },
  {  9460214166646215205u,  1602046917604361745u,          24127803275u },
  { 10750736995029068008u,  7830970218109515845u,         139086847137u },
  {  5377963045376430080u,  2899479134887821084u,         161424517746u },
  { 15996910350253424640u, 15792042302392017912u,         114157181078u },
  { 13651157529655246848u, 11286099112296056199u,         150856088328u },
  {  9771305410219737088u, 15161477829153947404u,           8611820658u },
  { 12709439623416250368u,   423831848142641767u,         114821905360u },
  {  9943947977234055168u,  9707413321046312582u,         208022975970u },
  {                    0u, 10969483299803835620u,         226526239930u },
  {                    0u,  4326479556120930304u,         186594656881u },
  {                    0u, 12876227232041795584u,         113234538926u },
  {                    0u, 16967986827791171584u,         174698021676u },
  {                    0u,  1288146316538413056u,          44919836409u },
  {                    0u, 13715290452691779584u,         249069830551u },
  {                    0u,  4683743612465315840u,         151743507385u },
  {                    0u,                    0u,         185253906250u },
  {                    0u,                    0u,          74000000000u },
  {   371564423966525229u,             99138353u,                    0u },
  { 14464859121514339583u,    99138353020142547u,                    0u },
  {  3913119023023056247u, 16344805304534272784u,              5374300u },
  {  5493396321716566945u,    26429987091348271u,          92886053671u },
  {  5837454566818211973u,  8691371289609838059u,          39001432772u },
  {  2886670683193253881u, 12980168378493046550u,         196471160181u },
  {  5504823105587173817u, 14010125458129496139u,         117703656337u },
  {  9431834277334851106u, 17061829677031795106u,         145759490422u },
  { 12921661346456247087u,  2227928323072698520u,         118924923640u },
  {  3643076516404724246u,  7394752319272287289u,         248120776236u },
  { 12559396953196866477u,  8805771303577744757u,          44400870326u },
  {  1626880974916825698u, 16371027194302248385u,         182477361818u },
  {  6806994170946429566u,  9114324123731231602u,         154887475162u },
  {  7596631230206896579u, 14468189808746991893u,         218494088500u },
  {  3100480253729502401u,  2376054557800684348u,          52784322141u },
  {  6310570748781063286u, 12462238943546048571u,          93128806175u },
  { 14251867077375744136u, 15334855370842605909u,          31675579326u },
  {  6701165793751570137u,  7211347914013798462u,         190831304175u },
  { 10856833140463959923u, 13763642332572548877u,         239390927953u },
  { 15867563727561248556u, 16868268377740071383u,          81746128545u },
  {  5048961008671491600u,  1120013377627684177u,         161914430661u },
  { 13278183119599849051u, 15898107650717274388u,         197060716046u },
  {  4547591784941053655u, 12281923376333274277u,          14861838142u },
  { 11815437715887182496u,  6383530489286615044u,          62665804400u },
  {   398495392178782208u,  4253822060257126466u,         112346051881u },
  {  9154841240825495552u, 17614372438391501998u,          41230600155u },
  {  1902683298245640192u,  4309951310554333450u,         219954877043u },
  {  5081900962138816512u, 13106185988973773020u,         115233642928u },
  {  3234710432358858752u,  2070134359761960547u,         176710487766u },
  { 16717361816799281152u,  9399359914137865875u,         214112222208u },
  {                    0u, 17415053284723541264u,            509540321u },
  {                    0u,  4840502610448261120u,         225944071930u },
  {                    0u,  5690599259712258048u,         250262404172u },
  {                    0u,   114769594245185536u,          76308488004u },
  {                    0u,  3150620882578178048u,          68006221672u },
  {                    0u,  5136918324969472000u,         104170795500u },
  {                    0u,  7205759403792793600u,         236278472900u },
  {                    0u,                    0u,         196390625000u },
  {                    0u,                    0u,         232000000000u },
  { 13488568028574514610u,                 1512u,                    0u },
  {   275784718433886190u,        1512731216738u,                    0u },
  { 10020568880357102364u,    98202693831717807u,                   82u },
  {  8876397213146246746u, 12909287260170414079u,          82005323578u },
  {  2155905919114811310u, 11728631949380786233u,          58699813864u },
  {  1087100407155601220u, 18263701925522197718u,         232635810411u },
  {  2903498381705011170u,  4868886449713321591u,         107990077265u },
  { 12223476257006657765u,  5870139507184082354u,          81263942863u },
  { 12148657163736735595u,  5978562500822661575u,         207318220900u },
  {  8951241323311673823u, 10821136839630268472u,         100324098522u },
  {  8463862715901576300u,  9490907630136752916u,         218586615003u },
  {  3873401978748963266u, 10564005678001613989u,         219514503133u },
  {   248364795947002730u,  5754050547468481222u,         221572675895u },
  { 10454378025404001822u,  3833909949855542602u,          55311927705u },
  {  6574176865628265640u, 15446538552665967784u,         153207836674u },
  {    16703315293848336u, 14924837848804399130u,           2837358532u },
  {  9896033222450013456u, 18140170340418344208u,         196809077080u },
  { 17311376269334085007u, 11380424819825208971u,          88983380604u },
  { 18378511316495639306u, 12416915664152252547u,         124616934065u },
  { 15120796393727584297u, 17195282241626289958u,         177673122346u },
  { 18253447805740347049u,  2649541045825281326u,          42932158118u },
  {  5842497225601731158u, 16577429864268509676u,         166143631907u },
  {  4369968404176723173u, 12051257060168107241u,          35898664273u },
  { 16142207253674488117u,  5363884561143470797u,          81653299954u },
  { 12124259227391928178u, 13054029903083620184u,         242290776764u },
  { 13019483264566077056u,   566314952158634945u,         188707660379u },
  {    74901376448135168u,  1329472079642345682u,          91030699995u },
  { 13897060093813325824u, 15686237486658857211u,         219072070825u },
  {  4495486210810052608u,  1069073549290598129u,         169850352638u },
  { 14885496280087265280u,  4323599065125928507u,         254057954593u },
  {  4976477588244398080u, 17861823329752681586u,          33234382774u },
  { 11529215046068469760u, 17220149985412802078u,         182968291382u },
  {                    0u,  4344934572159429184u,          54933506201u },
  {                    0u,  2252927464837120000u,         153235539375u },
  {                    0u, 10910018171964489728u,         175122131442u },
  {                    0u,  3597328585515335680u,         242591433270u },
  {                    0u,  6972808074239148032u,          54195011573u },
  {                    0u,  2227030015734710272u,         245377996683u },
  {                    0u,  1152921504606846976u,         139120727539u },
  {                    0u,                    0u,         243062500000u },
  {                    0u,                    0u,         160000000000u },
  { 10043594327130472635u,             23082446u,                    0u },
  {  8336034337032909060u,    23082446544464339u,                    0u },
  { 16717215784895280857u, 17238287503805244910u,              1251301u },
  { 10968831263951212032u,  1434575446038410275u,         229934489438u },
  {  5536629379734406065u, 14009569747841241694u,          94077768490u },
  {  1618806894932332402u, 14938795732275951328u,          42759460297u },
  { 11363331325254998861u,  6687653542888983473u,         201809833739u },
  {  8775167772751754888u,    28238723295162625u,          11362538425u },
  {  2898202945316114122u,  4745270274832691214u,         185001530824u },
  {  8868842714495185148u,   926478968112308824u,         200257241617u },
  { 17052094667531999136u,  9213681606604198526u,          17050224525u },
  {  3658615537031138594u, 13346223820579313024u,         141499474680u },
  { 12486952437987190746u,   691642518601291257u,         248723500243u },
  {   912079238520577629u,  1153720150033789192u,         211037494016u },
  { 10960072898031888041u, 12089015034721780810u,             62543294u },
  {  6129550094334741912u,  3555868702841788854u,         190655346818u },
  {  7965724516573729480u, 11708406782758214328u,         130192764028u },
  {  5801761178810791992u,  9417497762905343943u,         124634714003u },
  { 13197466483098446115u, 12838336066957615287u,         147510523576u },
  { 11326268638393107273u, 13737708142128207419u,         184695967592u },
  {  3597339351794947378u, 11683434809834695853u,         104744722650u },
  {   353880726151383714u,  2689114340106315837u,         218633360270u },
  { 11154818162602073600u,  8859225263374261032u,         142145777180u },
  {  5141043976157511026u, 15761671984578600096u,          28480259563u },
  {  7188225141808859034u,  7087267079878005352u,         235854441950u },
  { 13894168943295705185u,  4601291730423121377u,         222384201518u },
  { 12176538069834828288u,  9559411037059581623u,          46249436524u },
  {  7994239409235165184u, 12969820289641388091u,         108518216710u },
  { 13707777025480065024u, 13628239920285957130u,           6703095366u },
  { 10120227247676719104u,  8049893933765800625u,          70738788366u },
  {  7358494763030413312u, 10391755948840250234u,          14436385624u },
  {  7656119366529843200u, 14454650777462444512u,          88563338218u },
  {  9223372036854775808u, 14244638523341127254u,         234783588188u },
  {                    0u, 12246016810439753984u,          92772203401u },
  {                    0u,  9382741764551081984u,         137663857901u },
  {                    0u,  4608696190291148800u,         237508639450u },
  {                    0u,  1696483666416369664u,         218249837921u },
  {                    0u, 15416683541605384192u,          97091966563u },
  {                    0u,  7683140964294066176u,          99835740089u },
  {                    0u,  4611686018427387904u,         185416503906u },
  {                    0u,                    0u,          98250000000u },
  {                    0u,                    0u,         128000000000u },
  {  3877189582299842749u,                  352u,                    0u },
  {  7625565791857948238u,         352210182868u,                    0u },
  { 16568435163612007484u,  1722045467931902045u,                   19u },
  { 17592071940521808130u, 16095324008152856733u,          19093352271u },
  { 15158637878035490831u, 15216188060094280738u,          79872529262u },
  { 17789243229146401893u, 10793385929903030893u,         110824871207u },
  { 14677686051252896484u, 12613277226875940039u,          39585110623u },
  {  3531237481269211986u, 10644539625155600107u,          95683767128u },
  {  8074435404989280910u,  6181262895644173983u,          88577041649u },
  {  7086549341467684427u,   148914399627082292u,         241335086933u },
  { 10556134770918626963u, 14379289774887985969u,          85008072665u },
  { 10772666134712966775u, 11743339675582627452u,         217779502860u },
  {  6195173298198112620u,  7841621929809463497u,          12636607719u },
  {  8144773843324250887u, 11168944680251236601u,         231425095176u },
  { 14144284817150924691u,  6178560202529287410u,           8605469704u },
  {  6464447844648863176u, 13295243308201596112u,           8334940419u },
  { 15760468443293179135u, 17040673746172470291u,           3720736583u },
  {  5172191224908322475u, 14957442487039409922u,          71923776774u },
  {  2357554307308969012u, 17778155426506992152u,           6810844581u },
  {  1602046917604361745u, 14945404984219733899u,         165963755736u },
  {  7830970218109515845u, 11590754866058681505u,         216810192027u },
  {  2899479134887821084u,  6020790784469412466u,         155628336080u },
  { 15792042302392017912u,  7934351824569522326u,         208326387722u },
  { 11286099112296056199u,  5038361112172116744u,          10430122074u },
  { 15161477829153947404u,  3305187319649924210u,          90273130103u },
  {   423831848142641767u, 11470175511099161552u,         119179174563u },
  {  9707413321046312582u,  7308362160352048610u,         163621799460u },
  { 10969483299803835620u, 10666410671225576634u,          36396187106u },
  {  4326479556120930304u,  2181639019945820785u,         226578227281u },
  { 12876227232041795584u,  4615749499734847918u,          81118266888u },
  { 16967986827791171584u, 14076159200958497580u,           8250220281u },
  {  1288146316538413056u,  5470405257862074105u,         249763070119u },
  { 13715290452691779584u,  4565741478181339543u,         167296551263u },
  {  4683743612465315840u,  8901832997861862329u,          95247509341u },
  {                    0u, 14190141170191714122u,          93482569333u },
  {                    0u,  4240772322245764096u,         117769249094u },
  {                    0u,  4422842195340951552u,          70229892728u },
  {                    0u, 15448426386733137920u,         120239762755u },
  {                    0u,  9203504548935630848u,          67837460872u },
  {                    0u,  5936377627571912704u,         136498922981u },
  {                    0u,   468374361246531584u,         229321811676u },
  {                    0u,                    0u,         220025390625u },
  {                    0u,                    0u,          33000000000u },
  { 16344805304534272784u,              5374300u,                    0u },
  {    26429987091348271u,     5374300886053671u,                    0u },
  {  8691371289609838059u,  8020875056524075716u,               291341u },
  { 12980168378493046550u,  1400288714762747253u,          13434812508u },
  { 14010125458129496139u,  6136037711314764689u,          92075909803u },
  { 17061829677031795106u, 15735488086392394102u,         171332635270u },
  {  2227928323072698520u,  7735094782793634552u,         134853022518u },
  {  7394752319272287289u,  7273689191766726188u,          54419320328u },
  {  8805771303577744757u,  3410634565056431030u,           8394307481u },
  { 16371027194302248385u,  4600927904885215898u,         153184890870u },
  {  9114324123731231602u,  9154871331680374746u,         246249416801u },
  { 14468189808746991893u,  6117978272461042996u,          97496286569u },
  {  2376054557800684348u, 13116904339287496285u,         105331656266u },
  { 12462238943546048571u,   867037205615660831u,          74711068809u },
  { 15334855370842605909u,  1802487145191504830u,         137047002181u },
  {  7211347914013798462u, 17242009718457409007u,          69097713023u },
  { 13763642332572548877u, 13620802355488468049u,         127934691219u },
  { 16868268377740071383u,  4442227880594435745u,         147738385175u },
  {  1120013377627684177u, 17354849212854314181u,          23240813655u },
  { 15898107650717274388u, 18202319179831567886u,          87940808260u },
  { 12281923376333274277u, 17568634016348874558u,          68986749699u },
  {  6383530489286615044u,  7496925598312450672u,           3952397558u },
  {  4253822060257126466u,   601870379496813865u,         246406409151u },
  { 17614372438391501998u, 11995106565680728027u,         191032627458u },
  {  4309951310554333450u, 16331071694764184179u,           2650256029u },
  { 13106185988973773020u,  9665962217000524208u,         157885309170u },
  {  2070134359761960547u, 13682661374415474390u,         242523992861u },
  {  9399359914137865875u,  6940361789924260864u,          29741738559u },
  { 17415053284723541264u,  9658039831644010465u,          63376237766u },
  {  4840502610448261120u,  6843715893910236922u,         198523563388u },
  {  5690599259712258048u,    47089792870595660u,         124370998582u },
  {   114769594245185536u, 14510386192097156932u,          54002552742u },
  {  3150620882578178048u, 12059931208360040296u,         166786609611u },
  {  5136918324969472000u, 14877013468459184620u,         203653770180u },
  {  7205759403792793600u,  2397668560671695044u,         196806484516u },
  {                    0u,  2195572305559232232u,          36129977873u },
  {                    0u,  3261686279425953792u,          17119022213u },
  {                    0u,  9333850662059900928u,         133176816367u },
  {                    0u,  5036522340217782272u,         239505989058u },
  {                    0u,  2800120215143186432u,         194273030423u },
  {                    0u,   441634238459019264u,          23151794821u },
  {                    0u,   720575940379279360u,         133023941040u },
  {                    0u,                    0u,         176039062500u },
  {                    0u,                    0u,         228000000000u },
  {    98202693831717807u,                   82u,                    0u },
  { 12909287260170414079u,          82005323578u,                    0u },
  { 11728631949380786233u,  8218347283861607400u,                    4u },
  { 18263701925522197718u, 17896200385973633643u,           4445517498u },
  {  4868886449713321591u, 16333242102094352209u,         186970154966u },
  {  5870139507184082354u,  9981905728606788815u,         214885426828u },
  {  5978562500822661575u, 15219470018924839012u,         140541120193u },
  { 10821136839630268472u, 17152070168529617370u,         193825049122u },
  {  9490907630136752916u, 17841343440958328027u,          34929815586u },
  { 10564005678001613989u, 17291078023923990493u,          34967181165u },
  {  5754050547468481222u, 16744804581790759223u,         109937351217u },
  {  3833909949855542602u,  5001622214111594905u,          49907737675u },
  { 15446538552665967784u,  9676746897435398146u,          75271138483u },
  { 14924837848804399130u,  8109025833995118532u,         179524577500u },
  { 18140170340418344208u,  5495826424046694744u,         220439591171u },
  { 11380424819825208971u,  7890288164365705852u,           3297929347u },
  { 12416915664152252547u,  8616438349039895217u,         131427733378u },
  { 17195282241626289958u, 15787154801788760618u,         130467098058u },
  {  2649541045825281326u, 12418659311480782502u,         202855823376u },
  { 16577429864268509676u,  4486988874116669987u,          16673216870u },
  { 12051257060168107241u,  4828971301551875409u,         102243240154u },
  {  5363884561143470797u, 14769106422014442226u,         218261779058u },
  { 13054029903083620184u,  7763933466423188156u,         114800634863u },
  {   566314952158634945u, 10449097116253839963u,         239420883676u },
  {  1329472079642345682u, 12870692502472900571u,         220566446689u },
  { 15686237486658857211u, 11597479481311003817u,          97697721638u },
  {  1069073549290598129u,  8294994869530047486u,          38628700622u },
  {  4323599065125928507u, 16879315829924478241u,         206449672572u },
  { 17861823329752681586u, 11873324837601439670u,         124915029544u },
  { 17220149985412802078u,  3277599055636107318u,          40643654229u },
  {  4344934572159429184u, 15363467897354242201u,          85177679000u },
  {  2252927464837120000u, 10351182204479784367u,         152832855263u },
  { 10910018171964489728u, 12811517584931924466u,         223561138711u },
  {  3597328585515335680u, 16988930699558748726u,          23694513759u },
  {  6972808074239148032u, 11683499918824718325u,          95920971778u },
  {  2227030015734710272u, 13119300691281647499u,           2633363799u },
  {  1152921504606846976u, 10125549106595354099u,          87711198715u },
  {                    0u, 17505352699870800544u,         251548907116u },
  {                    0u,  6756039242241163264u,         108948967071u },
  {                    0u,  3537338758766526464u,         159366245621u },
  {                    0u,  6522626374119718912u,         245191759518u },
  {                    0u,  4733294203482669056u,         158353592284u },
  {                    0u, 16997710893603094528u,         220256592392u },
  {                    0u, 16717361816799281152u,           8921447753u },
  {                    0u,                    0u,          73906250000u },
  {                    0u,                    0u,          16000000000u },
  { 17238287503805244910u,              1251301u,                    0u },
  {  1434575446038410275u,     1251301934489438u,                    0u },
  { 14009569747841241694u,  3943737498063000362u,                67833u },
  { 14938795732275951328u,  2870731037991212489u,         249213790438u },
  {  6687653542888983473u,  7389433400402095883u,         230155622641u },
  {    28238723295162625u,  5675049236146197433u,         241400581987u },
  {  4745270274832691214u,  9953779846262904264u,          99307645035u },
  {   926478968112308824u, 12691978937179636241u,         107539595486u },
  {  9213681606604198526u, 15523327331528198029u,         222688033556u },
  { 13346223820579313024u, 15722603279568118520u,          20841521260u },
  {   691642518601291257u, 11838632364171816147u,         108852324031u },
  {  1153720150033789192u,  7832751832367143680u,         191641773546u },
  { 12089015034721780810u, 12167724027162940862u,         234424614327u },
  {  3555868702841788854u,  4108211144748152962u,         183659613641u },
  { 11708406782758214328u,  7530983398136343676u,         201222706572u },
  {  9417497762905343943u,  1117587133956542355u,         140408255428u },
  { 12838336066957615287u, 17134748625149490872u,         196060584519u },
  { 13737708142128207419u,  4039918359454207848u,          71928876584u },
  { 11683434809834695853u,  1830218764589441242u,          40219004413u },
  {  2689114340106315837u,   637895981480825742u,         253099216358u },
  {  8859225263374261032u,  8246879226348334620u,         230034580410u },
  { 15761671984578600096u, 12389239568142583275u,         186447064218u },
  {  7087267079878005352u, 14041257178803154398u,         154671622022u },
  {  4601291730423121377u, 16312515716494630702u,         134761178076u },
  {  9559411037059581623u, 17088522799596987756u,         220884303248u },
  { 12969820289641388091u,  3588932524637852678u,         144926370677u },
  { 13628239920285957130u,   107218049069817414u,         117194556422u },
  {  8049893933765800625u,  1596707240462008334u,           6005812302u },
  { 10391755948840250234u, 17461913142391587672u,          78086557672u },
  { 14454650777462444512u,  4366474266651610090u,         232946612208u },
  { 14244638523341127254u,  5539304013194805084u,         240236707044u },
  { 12246016810439753984u,  4762470619211987849u,         228300286272u },
  {  9382741764551081984u, 10835638458986644717u,          64258174049u },
  {  4608696190291148800u, 16141642290510052058u,          97587401137u },
  {  1696483666416369664u, 17390568670756355425u,         177875040181u },
  { 15416683541605384192u, 12536768491333867107u,         181942744616u },
  {  7683140964294066176u, 13145148522871947193u,          40679619581u },
  {  4611686018427387904u,  5665349945233068642u,         253712599929u },
  {                    0u, 17074607537751066240u,         121307119235u },
  {                    0u,  6241525660962062336u,         131925616329u },
  {                    0u,  1142860629783085056u,         201338353784u },
  {                    0u, 16287527416870469632u,         120061954598u },
  {                    0u,  9028002014738513920u,          38882948630u },
  {                    0u, 16217462258161156096u,          22489408969u },
  {                    0u, 11529215046068469760u,         201879150390u },
  {                    0u,                    0u,          54625000000u },
  {                    0u,                    0u,          64000000000u },
  {  1722045467931902045u,                   19u,                    0u },
  { 16095324008152856733u,          19093352271u,                    0u },
  { 15216188060094280738u,   646608198162977646u,                    1u },
  { 10793385929903030893u, 12170458846894708007u,           1035052700u },
  { 12613277226875940039u,  1797330480103086687u,         156659761896u },
  { 10644539625155600107u, 10332188564497263448u,         232097433480u },
  {  6181262895644173983u,  7524259485079594225u,         136560109064u },
  {   148914399627082292u,    62681109059153749u,           8407890924u },
  { 14379289774887985969u, 13480636451804037081u,         236003397949u },
  { 11743339675582627452u,  6948168233012789004u,          61730786766u },
  {  7841621929809463497u, 12015502974041806055u,         206376660954u },
  { 11168944680251236601u,  7343801660689004040u,         218651361721u },
  {  6178560202529287410u, 13670580858640731144u,         185398108285u },
  { 13295243308201596112u,  5605073897566574851u,         125741083673u },
  { 17040673746172470291u, 15387788940505247559u,          25303851664u },
  { 14957442487039409922u, 17565181499678113030u,         144834173709u },
  { 17778155426506992152u,  1893743623847493029u,          13952210397u },
  { 14945404984219733899u, 10243498996716269784u,         221102660047u },
  { 11590754866058681505u,  5619675836950314139u,         207555301193u },
  {  6020790784469412466u, 10224869737511515088u,          73304643237u },
  {  7934351824569522326u,  2574495974386198538u,         165554291299u },
  {  5038361112172116744u,  7825756347302873178u,          99139563706u },
  {  3305187319649924210u, 12071550103794656887u,         186424235101u },
  { 11470175511099161552u,  7195875213867606691u,          93654400042u },
  {  7308362160352048610u, 18271364438406891044u,          42390089176u },
  { 10666410671225576634u, 16966521933952564706u,         216990492650u },
  {  2181639019945820785u,   289920862029570129u,         234919756997u },
  {  4615749499734847918u,  7804199568098625032u,         197015716641u },
  { 14076159200958497580u,  5758118571242446585u,          33423066506u },
  {  5470405257862074105u,  4030788293606375591u,         138312148233u },
  {  4565741478181339543u,  4387716460037196127u,           9218509471u },
  {  8901832997861862329u, 16807506478881285981u,         159237858585u },
  { 14190141170191714122u, 17033060604413529717u,          25911136751u },
  {  4240772322245764096u, 10498418508292170054u,         239923364065u },
  {  4422842195340951552u, 13237752038744465016u,         225569120407u },
  { 15448426386733137920u, 17737618428304633155u,         151717619975u },
  {  9203504548935630848u, 13546183833248825736u,           7961558221u },
  {  5936377627571912704u,   826778452978976229u,         205734340097u },
  {   468374361246531584u, 13728076626990147292u,           1044819749u },
  {                    0u,  2794860281883592225u,          37744200525u },
  {                    0u,  8680705720425908736u,          77151509679u },
  {                    0u,   731520517439488000u,         175470582000u },
  {                    0u, 13120812320768917504u,         240039655806u },
  {                    0u,  2722954908557901824u,         126711280661u },
  {                    0u,  6860847004205973504u,          21147611681u },
  {                    0u,  6503197861922996224u,          33371927261u },
  {                    0u,  9223372036854775808u,         221352539062u },
  {                    0u,                    0u,         182500000000u },
  {  8020875056524075716u,               291341u,                    0u },
  {  1400288714762747253u,      291341434812508u,                    0u },
  {  6136037711314764689u, 12005656413127238315u,                15793u },
  { 15735488086392394102u,  4821130826186787462u,         177650827938u },
  {  7735094782793634552u, 14377899467066168118u,         162261354025u },
  {  7273689191766726188u, 16575613239625444872u,          41779427491u },
  {  3410634565056431030u,  4317827099179284377u,         163898565794u },
  {  4600927904885215898u,  1242354770412171254u,         162234069876u },
  {  9154871331680374746u,   994838588328896609u,         116067348187u },
  {  6117978272461042996u, 17283309862013060457u,         219053930307u },
  { 13116904339287496285u,   124242522249856586u,          67936930105u },
  {   867037205615660831u, 11564608014666985609u,          57006735200u },
  {  1802487145191504830u, 12401028575581654085u,          96626918656u },
  { 17242009718457409007u,  2490725392961465727u,            672261106u },
  { 13620802355488468049u,  1949482237120640915u,         242135022494u },
  {  4442227880594435745u, 15410502396166200087u,         158105681643u },
  { 17354849212854314181u, 15694919529799920727u,         235835405008u },
  { 18202319179831567886u, 10324869370171768388u,         208850823292u },
  { 17568634016348874558u,  1631866459122189059u,         124559712290u },
  {  7496925598312450672u,   172020494461226230u,          34088463658u },
  {   601870379496813865u, 12734610307908856767u,          42009325249u },
  { 11995106565680728027u,  1467513250829340930u,         193690344608u },
  { 16331071694764184179u, 13558759428494307997u,         160079554052u },
  {  9665962217000524208u,  7915355143999496434u,           4735021821u },
  { 13682661374415474390u,  2876370200608797469u,         253429092262u },
  {  6940361789924260864u,   343685370404989503u,         166155928341u },
  {  9658039831644010465u,  4837266557407634630u,          21018631221u },
  {  6843715893910236922u,  9622591415747161468u,          53262228745u },
  {    47089792870595660u, 16503783814424220982u,           9521641725u },
  { 14510386192097156932u,  5377083431343591334u,         253894671913u },
  { 12059931208360040296u, 16508482371299291595u,          41291492276u },
  { 14877013468459184620u, 10515883558812249028u,         180894926622u },
  {  2397668560671695044u,    63492062913405476u,          30570067190u },
  {  2195572305559232232u, 11571919759617799697u,         246003441911u },
  {  3261686279425953792u,  2956602334970088581u,         247627315027u },
  {  9333850662059900928u, 13604736747717849839u,          83160277733u },
  {  5036522340217782272u, 16573540719338151362u,         229737514256u },
  {  2800120215143186432u, 12620703004601168151u,          16898453442u },
  {   441634238459019264u, 14649407809089591941u,         194684169680u },
  {   720575940379279360u, 11290375247898624432u,         208794145988u },
  {                    0u, 11020319450292874212u,         196612052468u },
  {                    0u,  8754634933362354176u,         244597412714u },
  {                    0u, 12976319450332528640u,         106474589710u },
  {                    0u, 17447331119627239424u,          14703447686u },
  {                    0u,  3665184902673858560u,         134945821715u },
  {                    0u, 12949678516038795264u,          19198690071u },
  {                    0u,    72057594037927936u,          23702003479u },
  {                    0u,                    0u,          23003906250u },
  {                    0u,                    0u,         202000000000u },
  {  8218347283861607400u,                    4u,                    0u },
  { 17896200385973633643u,           4445517498u,                    0u },
  { 16333242102094352209u,  4445517498970154966u,                    0u },
  {  9981905728606788815u,  9413159735776077452u,            240991986u },
  { 15219470018924839012u, 14279163482889998017u,         242510288411u },
  { 17152070168529617370u,  8693044629541194274u,          27774075003u },
  { 17841343440958328027u, 11863110253260222498u,         123471250893u },
  { 17291078023923990493u,  8319293368489531245u,         205643100495u },
  { 16744804581790759223u,  3376307525676489265u,          79450989797u },
  {  5001622214111594905u, 13205662254759912523u,         229183029997u },
  {  9676746897435398146u,  5276250334231686323u,         237715880385u },
  {  8109025833995118532u, 13790198520922745052u,         193286026103u },
  {  5495826424046694744u, 14195535250150996227u,         119747568159u },
  {  7890288164365705852u, 16425228796427004035u,          31769541507u },
  {  8616438349039895217u,  4295900841296269186u,         131890413437u },
  { 15787154801788760618u,  4533952595483946442u,         125232881251u },
  { 12418659311480782502u, 12885038019373447184u,          99245786062u },
  {  4486988874116669987u, 12140736240487831910u,         206698499310u },
  {  4828971301551875409u,  6927124077155322074u,         238658150630u },
  { 14769106422014442226u, 12477788342407819890u,         230375520148u },
  {  7763933466423188156u,  7980854329409711087u,         148676422261u },
  { 10449097116253839963u,  2062671021810827996u,         117432642980u },
  { 12870692502472900571u,  2739521363598172769u,         164111817620u },
  { 11597479481311003817u, 12897585686593465638u,         148148509750u },
  {  8294994869530047486u,  1127632646629044686u,          54699179521u },
  { 16879315829924478241u,  4833775019274666364u,           1061129088u },
  { 11873324837601439670u, 15867662672939849256u,         128262039468u },
  {  3277599055636107318u,  2092350330982953557u,         172860187717u },
  { 15363467897354242201u, 13330062299842493592u,          69113426538u },
  { 10351182204479784367u,  4479193352178519263u,         106722624125u },
  { 12811517584931924466u,  3149393938889064983u,         125242817558u },
  { 16988930699558748726u,  9736379904070620767u,          22170728987u },
  { 11683499918824718325u,  3816238703055069186u,          27527810212u },
  { 13119300691281647499u, 11598915938798661975u,         164206878714u },
  { 10125549106595354099u, 17821633264606555643u,         250628778492u },
  { 17505352699870800544u,  2514623558764574316u,         252966112675u },
  {  6756039242241163264u,  4976730480406253215u,         163136318016u },
  {  3537338758766526464u, 17276563697191611637u,          64269789099u },
  {  6522626374119718912u, 12524734095940998814u,         171936564394u },
  {  4733294203482669056u, 15331551308930355164u,         170678967195u },
  { 16997710893603094528u, 15417115581125943816u,         155831125061u },
  { 16717361816799281152u,  6010750237807115593u,          69835763510u },
  {                    0u,  5624630987553628432u,          54325843423u },
  {                    0u, 14881848243837640704u,         223304911856u },
  {                    0u, 15281613886881529856u,         240806746609u },
  {                    0u, 14057902358273196032u,         241828417948u },
  {                    0u, 16075318494433902592u,         156762080413u },
  {                    0u, 13891916000577716224u,         157871444761u },
  {                    0u,  7205759403792793600u,          25753082275u },
  {                    0u,                    0u,         163390625000u },
  {                    0u,                    0u,         232000000000u },
  {  3943737498063000362u,                67833u,                    0u },
  {  2870731037991212489u,       67833213790438u,                    0u },
  {  7389433400402095883u,  4535831408134330609u,                 3677u },
  {  5675049236146197433u,  6204770794376564579u,          93245887913u },
  {  9953779846262904264u, 13869812122751887467u,         169336361298u },
  { 12691978937179636241u, 14253229412394467550u,          82751884021u },
  { 15523327331528198029u, 12776557610216045332u,         245772669114u },
  { 15722603279568118520u, 16493640728678654060u,         186692618575u },
  { 11838632364171816147u,  9434398296825833151u,          79894122055u },
  {  7832751832367143680u,  8773374058285327850u,          71511439756u },
  { 12167724027162940862u, 12932015276748029367u,         140475605560u },
  {  4108211144748152962u, 16293958583527755209u,          56701045952u },
  {  7530983398136343676u, 13511893936143127948u,         192883297264u },
  {  1117587133956542355u, 18409936402005226436u,         240732481237u },
  { 17134748625149490872u,  2189663026458466887u,         213998004652u },
  {  4039918359454207848u,  9497725274248154664u,         172118701870u },
  {  1830218764589441242u, 14766925481127792125u,          46514872718u },
  {   637895981480825742u,  6982373971809635814u,         142800516634u },
  {  8246879226348334620u,  8616702383006884794u,          26378515251u },
  { 12389239568142583275u,  3059473300040871066u,          51467112372u },
  { 14041257178803154398u, 17123843157031495558u,         180165854379u },
  { 16312515716494630702u, 11210627174210626524u,         171928285397u },
  { 17088522799596987756u, 15868067138625928592u,         213607729316u },
  {  3588932524637852678u,  4467869511636937589u,         164860209643u },
  {   107218049069817414u, 10052108125844341766u,         235242203691u },
  {  1596707240462008334u,  7470588003218451534u,          43544925873u },
  { 17461913142391587672u,  2613527085490786280u,         177404981387u },
  {  4366474266651610090u,  3632919450036549616u,         139141679587u },
  {  5539304013194805084u,   179367907231218916u,         227196940958u },
  {  4762470619211987849u, 13553068184555874624u,         158009723553u },
  { 10835638458986644717u,  8798774862365584481u,         161734713298u },
  { 16141642290510052058u,   910911255817064881u,         210476982541u },
  { 17390568670756355425u,  2304331144765093813u,          13049380598u },
  { 12536768491333867107u, 12248937023083640360u,         246124918041u },
  { 13145148522871947193u, 10206039550662130685u,          25664016206u },
  {  5665349945233068642u, 12267881323837852537u,          78553270512u },
  { 17074607537751066240u,  2858642007937891971u,         240665043179u },
  {  6241525660962062336u, 14171330289750320841u,         235154967293u },
  {  1142860629783085056u,  6601103619749017720u,         253768229354u },
  { 16287527416870469632u,  4919573414486739494u,         234357846544u },
  {  9028002014738513920u,  3401998285294974486u,          16266690609u },
  { 16217462258161156096u, 10799436256515532233u,          49184422696u },
  { 11529215046068469760u, 10083786644665753398u,          40585438612u },
  {                    0u,  6481194517685688896u,         148546643169u },
  {                    0u, 15104161756860547072u,         225351346258u },
  {                    0u,  9556039274244079616u,          82818798249u },
  {                    0u,  1376343134954323968u,         169518033927u },
  {                    0u, 15682488278596976640u,           7074611710u },
  {                    0u,  1506454075355430912u,         254850149393u },
  {                    0u,  1152921504606846976u,          17081665039u },
  {                    0u,                    0u,          15062500000u },
  {                    0u,                    0u,         160000000000u },
  { 12170458846894708007u,           1035052700u,                    0u },
  {  1797330480103086687u,  1035052700659761896u,                    0u },
  { 10332188564497263448u,  6172559441576707976u,             56110319u },
  {  7524259485079594225u, 15083329738554729992u,         239334615117u },
  {    62681109059153749u, 10013126833549229036u,          77817668943u },
  { 13480636451804037081u,  5817156823499936061u,          79542812693u },
  {  6948168233012789004u,  5282692560913632718u,          21315348703u },
  { 12015502974041806055u, 10252307034225766362u,         223286375337u },
  {  7343801660689004040u, 17981881283247669689u,         169555778677u },
  { 13670580858640731144u, 11689290159733383293u,         117974799737u },
  {  5605073897566574851u,  5530668968487988249u,         121633677689u },
  { 15387788940505247559u, 10083765740821947024u,         121299818165u },
  { 17565181499678113030u,  2798423656816843533u,         181546642036u },
  {  1893743623847493029u,  7614494481582904797u,         116151702850u },
  { 10243498996716269784u, 17811318500083423695u,          66412782572u },
  {  5619675836950314139u, 11641467412200329033u,         236965553510u },
  { 10224869737511515088u, 17733593025296340645u,         102631085212u },
  {  2574495974386198538u,  3689424000190644835u,         156961340004u },
  {  7825756347302873178u, 14966634145516728506u,         100200004075u },
  { 12071550103794656887u, 14171681941562070109u,         235811342862u },
  {  7195875213867606691u,  8130575762882608170u,          14768248417u },
  { 18271364438406891044u,  5234550794400656856u,          97440759395u },
  { 16966521933952564706u,  3020576149360486378u,          99283765567u },
  {   289920862029570129u,  3038675756589057221u,          63163745761u },
  {  7804199568098625032u, 15470260187120878369u,         225164726942u },
  {  5758118571242446585u,  3497929414841828746u,         158838644485u },
  {  4030788293606375591u,  9935840636861015305u,           5189623133u },
  {  4387716460037196127u,  3647355485153741471u,          93538623000u },
  { 16807506478881285981u,   766100215038272793u,          24197723537u },
  { 17033060604413529717u, 16128087474216800751u,         145041530375u },
  { 10498418508292170054u, 16216631732633731297u,           7874305373u },
  { 13237752038744465016u, 13760220872779997335u,          93879105367u },
  { 17737618428304633155u,  3826276262374222087u,          87745943068u },
  { 13546183833248825736u, 14938032745839181005u,          28207422851u },
  {   826778452978976229u, 14479259995009508865u,         131809792377u },
  { 13728076626990147292u,  2372033248156102437u,         121784922257u },
  {  2794860281883592225u,   792005346826701645u,         145128588180u },
  {  8680705720425908736u, 16278924527931792559u,         148042934695u },
  {   731520517439488000u, 17442516423538940144u,         167882482266u },
  { 13120812320768917504u,    13844184233048446u,          90945560710u },
  {  2722954908557901824u, 13486193870480782357u,         134000750494u },
  {  6860847004205973504u, 11931315179184648737u,         158731088034u },
  {  6503197861922996224u, 16492562205587485405u,         162646797891u },
  {  9223372036854775808u, 12128987217680380854u,          67894063588u },
  {                    0u, 10568123814189138176u,         228657513714u },
  {                    0u, 17007583519117541376u,         242572899139u },
  {                    0u,   143791533903052800u,          67921982950u },
  {                    0u, 12398714235792654336u,         230007794954u },
  {                    0u,  9659957317919047680u,          10672135645u },
  {                    0u,  9412523221204336640u,         221523667335u },
  {                    0u,  4611686018427387904u,         135510253906u },
  {                    0u,                    0u,          82250000000u },
  {                    0u,                    0u,         128000000000u },
  { 12005656413127238315u,                15793u,                    0u },
  {  4821130826186787462u,       15793650827938u,                    0u },
  { 14377899467066168118u,  3237900842885170729u,                  856u },
  { 16575613239625444872u,  7515893506498066595u,          88175526956u },
  {  4317827099179284377u,  7300206309181072546u,          44407437403u },
  {  1242354770412171254u,     5999737279837044u,          91395744977u },
  {   994838588328896609u,  7556839307242450651u,         209000325246u },
  { 17283309862013060457u, 12946035041643640643u,         126409657079u },
  {   124242522249856586u, 15885877642352740665u,         247701805965u },
  { 11564608014666985609u, 10770818348246089568u,         141861175152u },
  { 12401028575581654085u, 11635415503599551744u,         112583887232u },
  {  2490725392961465727u,  6248053924100826098u,         128630757138u },
  {  1949482237120640915u, 16894170802729859998u,          18338707681u },
  { 15410502396166200087u,  6143589029651889899u,         225915834834u },
  { 15694919529799920727u, 11812087701837886160u,         210333044628u },
  { 10324869370171768388u,  7306705080150829180u,         148640334557u },
  {  1631866459122189059u,  1485332570280714274u,         221396097276u },
  {   172020494461226230u, 18042602303295630634u,         252080520039u },
  { 12734610307908856767u, 13397029889257074369u,         103978091430u },
  {  1467513250829340930u,  9948104869613411488u,         166726254445u },
  { 13558759428494307997u, 10836066241170646532u,         109539287845u },
  {  7915355143999496434u, 18330574781234459389u,          37587424327u },
  {  2876370200608797469u,   666297360208433062u,          71993702450u },
  {   343685370404989503u,  5035352224889324309u,          50036120052u },
  {  4837266557407634630u,  1341745796439923765u,         244272966991u },
  {  9622591415747161468u,  6846932182653803785u,          79072736185u },
  { 16503783814424220982u,  6727685027257825533u,         185371172937u },
  {  5377083431343591334u,  2168538874806877737u,          73364708536u },
  { 16508482371299291595u, 17694936100676971444u,         184117556727u },
  { 10515883558812249028u,  2163944241059563294u,         247959244408u },
  {    63492062913405476u,  6727780864524301558u,         120117307652u },
  { 11571919759617799697u,  8599551977795002615u,           4364713731u },
  {  2956602334970088581u, 15428264807806859091u,           3466182646u },
  { 13604736747717849839u,  2126771385339683557u,         246836367911u },
  { 16573540719338151362u, 15094316562082972944u,          39115292507u },
  { 12620703004601168151u,  8111300598225956802u,          91818264540u },
  { 14649407809089591941u,  9481215200564260304u,         220439714486u },
  { 11290375247898624432u, 16836674128623424708u,         182513977705u },
  { 11020319450292874212u,  7087243115299722740u,         105912717933u },
  {  8754634933362354176u,  2343560867338408810u,         109384200219u },
  { 12976319450332528640u,  3431385749090422286u,          27127044689u },
  { 17447331119627239424u,  3504545517469224582u,          81186015794u },
  {  3665184902673858560u,  3333759805712094227u,          50189981793u },
  { 12949678516038795264u,  3595183476205994775u,          97180723481u },
  {    72057594037927936u, 14191566632569921303u,          25194895286u },
  {                    0u, 12917427671358095562u,         182769326368u },
  {                    0u,  3883793922738316288u,          32700255157u },
  {                    0u,  7857281689266421760u,         181210540890u },
  {                    0u, 15987081651486195712u,          90425944093u },
  {                    0u, 16827562156399525888u,          29866661432u },
  {                    0u,  7012737938513461248u,          56912223972u },
  {                    0u,  7385903388887613440u,         228380161285u },
  {                    0u,                    0u,           5400390625u },
  {                    0u,                    0u,         225000000000u },
  {  9413159735776077452u,            240991986u,                    0u },
  { 14279163482889998017u,   240991986510288411u,                    0u },
  {  8693044629541194274u, 14135788013842776187u,             13064201u },
  { 11863110253260222498u, 13284322918167594445u,           9766302603u },
  {  8319293368489531245u,  7264587765474046287u,         139720144588u },
  {  3376307525676489265u, 16176482219778368741u,         204393814091u },
  { 13205662254759912523u,  5401983818872095469u,          75876928858u },
  {  5276250334231686323u, 11208857446851049921u,          90292842129u },
  { 13790198520922745052u, 13794690008281035639u,         145607633379u },
  { 14195535250150996227u, 14519782740993303071u,         227747811643u },
  { 16425228796427004035u, 10885858587044789123u,          59787118999u },
  {  4295900841296269186u,  8710500938899914621u,         151590123576u },
  {  4533952595483946442u,  1284182587483102819u,          56472197202u },
  { 12885038019373447184u, 10346074482131502030u,          82069615677u },
  { 12140736240487831910u,  9429804686255246574u,          61560861821u },
  {  6927124077155322074u,  6412022633845121254u,         125511190736u },
  { 12477788342407819890u,  8892351297529018260u,         208347596443u },
  {  7980854329409711087u, 14098160105983060597u,         155482055329u },
  {  2062671021810827996u, 13793833029739474340u,         161764262790u },
  {  2739521363598172769u, 16367653765996977044u,         134747765186u },
  { 12897585686593465638u, 10684788343333772342u,         194887292288u },
  {  1127632646629044686u, 13272681218705145345u,         128579223536u },
  {  4833775019274666364u, 11093568615497829248u,         240719513490u },
  { 15867662672939849256u, 12488220765137758124u,         146601383559u },
  {  2092350330982953557u,  3727114642519696453u,         135676987804u },
  { 13330062299842493592u, 11549865375695057514u,         156202047289u },
  {  4479193352178519263u, 11292809154908783229u,          57626119456u },
  {  3149393938889064983u, 17723904861837310998u,          32612184410u },
  {  9736379904070620767u, 14877674388187150875u,          90960814807u },
  {  3816238703055069186u, 12178961950105734308u,         215806520344u },
  { 11598915938798661975u,  4540604068069253114u,          24660222850u },
  { 17821633264606555643u, 13832478722153359868u,         130246146639u },
  {  2514623558764574316u,  1308046668730371491u,          79749860174u },
  {  4976730480406253215u, 18400531023544756800u,          78070909351u },
  { 17276563697191611637u,  9789823458621466539u,         167997494785u },
  { 12524734095940998814u,  1924870562610267306u,           1530707393u },
  { 15331551308930355164u,  5290016144582400923u,         193104347442u },
  { 15417115581125943816u, 15162883663174059077u,          50286772349u },
  {  6010750237807115593u,  8078086116520046390u,         125821981570u },
  {  5624630987553628432u, 15731407332173190623u,         130437913925u },
  { 14881848243837640704u,  5346389182763011056u,          69852801300u },
  { 15281613886881529856u,  6368422217216252401u,          20289828338u },
  { 14057902358273196032u,  2961453088119116188u,         242345232860u },
  { 16075318494433902592u, 10932141691610170525u,         220160540693u },
  { 13891916000577716224u, 11034016191361782553u,          21592632588u },
  {  7205759403792793600u,  5455325785621453219u,          12598155216u },
  {                    0u,  7735615202566149352u,         208295733803u },
  {                    0u,  7502396497775759360u,          43419348540u },
  {                    0u,  1601286435751591936u,          60406705729u },
  {                    0u, 11449383158571597824u,          65086805911u },
  {                    0u, 13043944595690356736u,         151620672304u },
  {                    0u,  7773494431818186752u,          48707113653u },
  {                    0u,  9943947977234055168u,         181421401977u },
  {                    0u,                    0u,         121539062500u },
  {                    0u,                    0u,         228000000000u },
  {  4535831408134330609u,                 3677u,                    0u },
  {  6204770794376564579u,        3677245887913u,                    0u },
  { 13869812122751887467u,  6343817245135589714u,                  199u },
  { 14253229412394467550u, 17549323075660516085u,         199343899021u },
  { 12776557610216045332u,  3948641822109421754u,         141951350710u },
  { 16493640728678654060u,  1750739713693534543u,         182214056302u },
  {  9434398296825833151u,   962163898128633415u,         110094907790u },
  {  8773374058285327850u,  7967320249386531212u,         142052159009u },
  { 12932015276748029367u,  3018466665533383224u,          33431909296u },
  { 16293958583527755209u, 15076865731854945472u,         176163631405u },
  { 13511893936143127948u,   691187172844604400u,          45817318529u },
  { 18409936402005226436u, 13274492813370992341u,         129037469331u },
  {  2189663026458466887u,  6364168818499152300u,         147719611697u },
  {  9497725274248154664u, 17599380787401914158u,          49345002282u },
  { 14766925481127792125u,  3782323149461692814u,          42954064344u },
  {  6982373971809635814u, 14470163442442237466u,         216205040148u },
  {  8616702383006884794u,   476109872130437939u,          20784429132u },
  {  3059473300040871066u, 16330548844673355700u,          76025809967u },
  { 17123843157031495558u, 14089158961463739563u,          47885280826u },
  { 11210627174210626524u, 13385510793074798805u,          58763774837u },
  { 15868067138625928592u,  1549401308746959012u,         117725629994u },
  {  4467869511636937589u,  4607384943843027435u,          42083993213u },
  { 10052108125844341766u,  5157353797716093483u,         125249766838u },
  {  7470588003218451534u, 10846828782671550129u,         182279580709u },
  {  2613527085490786280u,  9915857350819131531u,          37588007766u },
  {  3632919450036549616u,  1673544973504317923u,          86537539704u },
  {   179367907231218916u, 14780986291622785694u,         120090723054u },
  { 13553068184555874624u,  8168111319515466401u,         238801278872u },
  {  8798774862365584481u, 16345760387859734482u,         152442794201u },
  {   910911255817064881u,  3177475373321281805u,         217886105446u },
  {  2304331144765093813u,  2558676822419554038u,         102172251285u },
  { 12248937023083640360u,  8813474062662382873u,         149138706148u },
  { 10206039550662130685u,  5426294560236228430u,         228477779386u },
  { 12267881323837852537u,  9919177474128333040u,         186294160017u },
  {  2858642007937891971u,  6197383943089627371u,         145537719688u },
  { 14171330289750320841u, 13673239314867423997u,         136335960856u },
  {  6601103619749017720u,  9309584098968723946u,          24741227788u },
  {  4919573414486739494u,  4647101757759615504u,          12504673565u },
  {  3401998285294974486u,  1405809295505096753u,          29251919891u },
  { 10799436256515532233u, 11332704079573859112u,          19076209074u },
  { 10083786644665753398u,  2960072434514044308u,         178614347119u },
  {  6481194517685688896u,  3887266602785432801u,         111160465848u },
  { 15104161756860547072u, 14545546084687849554u,         184210729144u },
  {  9556039274244079616u,  4617763804182385321u,         184788515633u },
  {  1376343134954323968u,  7857823815580249095u,          49250329477u },
  { 15682488278596976640u, 10939326736548364798u,         133425973482u },
  {  1506454075355430912u, 12262012446566951953u,         234593022090u },
  {  1152921504606846976u, 12555024338687723023u,         138664725026u },
  {                    0u,  3332969632922829472u,          34680609233u },
  {                    0u, 15535060143360327680u,         209180680645u },
  {                    0u, 15794322927987458048u,         197842157297u },
  {                    0u, 10571474314433921024u,         241856211961u },
  {                    0u, 16679514427547975680u,         249573080770u },
  {                    0u, 16925653299565166592u,         194904198288u },
  {                    0u, 16717361816799281152u,         144917541503u },
  {                    0u,                    0u,         127906250000u },
  {                    0u,                    0u,          16000000000u },
  {  6172559441576707976u,             56110319u,                    0u },
  { 15083329738554729992u,    56110319334615117u,                    0u },
  { 10013126833549229036u,  9335385384027907407u,              3041746u },
  {  5817156823499936061u, 13237828406194798613u,         210506072255u },
  {  5282692560913632718u, 15667486867836528863u,         191717624115u },
  { 10252307034225766362u, 17982325043592934313u,          51849336164u },
  { 17981881283247669689u, 17159117626917379189u,         100974823793u },
  { 11689290159733383293u,  8336208968408929657u,         113930197630u },
  {  5530668968487988249u, 12767090573379150201u,         126451906793u },
  { 10083765740821947024u, 14736070002412246709u,         233692105366u },
  {  2798423656816843533u,  9697296975344560756u,         150798843955u },
  {  7614494481582904797u,  7291706381199103298u,          51525691522u },
  { 17811318500083423695u, 18098546597780825068u,         130395284194u },
  { 11641467412200329033u,   132913902678533478u,         226981124177u },
  { 17733593025296340645u,  1879347741692007580u,          81007205277u },
  {  3689424000190644835u,  4056624629214083684u,         157101879645u },
  { 14966634145516728506u, 14713227692042795499u,          93219910061u },
  { 14171681941562070109u,  7366415124022528526u,         173797605671u },
  {  8130575762882608170u,   825770353378039393u,          39399334164u },
  {  5234550794400656856u, 10244023944395357795u,          20044765100u },
  {  3020576149360486378u, 14302658294713551167u,         172555329650u },
  {  3038675756589057221u, 14246653166206862817u,         114775348659u },
  { 15470260187120878369u, 12404486258134291102u,         179772312615u },
  {  3497929414841828746u,  8887442218637942533u,          39672448547u },
  {  9935840636861015305u,  1186724038081863005u,          35481789208u },
  {  3647355485153741471u,   211331772484951576u,          24064332439u },
  {   766100215038272793u,  6311919513247413649u,         151011456318u },
  { 16128087474216800751u,  8131780018703965703u,          62342169842u },
  { 16216631732633731297u,  2262544347226725725u,         242440824678u },
  { 13760220872779997335u, 15318188749880522583u,         102122652774u },
  {  3826276262374222087u,  1073117094162650652u,         102830400676u },
  { 14938032745839181005u,  4447950380665871747u,         164058173794u },
  { 14479259995009508865u,  5373227185066463609u,          98241123873u },
  {  2372033248156102437u,  6739731406934274193u,          33291283229u },
  {   792005346826701645u, 12328812617001239444u,          29365361571u },
  { 16278924527931792559u,  3246111484407310759u,         163668346271u },
  { 17442516423538940144u,  3250825415176839770u,         159175972056u },
  {    13844184233048446u, 16146270540000862342u,         216176227598u },
  { 13486193870480782357u, 15686773375425916830u,          14875291079u },
  { 11931315179184648737u, 11920791905793880226u,         199850381688u },
  { 16492562205587485405u,  1853290561644080707u,         120646227424u },
  { 12128987217680380854u, 12157689141506159076u,         224100467082u },
  { 10568123814189138176u, 18100318838862562546u,         138659069648u },
  { 17007583519117541376u,  7171257882533475139u,         208981220250u },
  {   143791533903052800u, 14477550873015039462u,         154388754668u },
  { 12398714235792654336u,  8109481182495403274u,         236784829605u },
  {  9659957317919047680u, 14565395719337663965u,         165439615855u },
  {  9412523221204336640u,  1860318978161305991u,         111789591684u },
  {  4611686018427387904u, 16268646275151585618u,         132100848093u },
  {                    0u, 13759019338835519104u,         221881925081u },
  {                    0u, 17003783176010661888u,         217745877932u },
  {                    0u, 18357489540307877888u,         172921776932u },
  {                    0u,   905481790074912768u,          36995161502u },
  {                    0u,  3638882110636294144u,         158049086266u },
  {                    0u,  9011702854368362496u,          58197264194u },
  {                    0u, 11529215046068469760u,          66488525390u },
  {                    0u,                    0u,          78625000000u },
  {                    0u,                    0u,          64000000000u },
  {  3237900842885170729u,                  856u,                    0u },
  {  7515893506498066595u,         856175526956u,                    0u },
  {  7300206309181072546u,  7625299565768063067u,                   46u },
  {     5999737279837044u, 13889021769065194705u,          46413368317u },
  {  7556839307242450651u, 14498170692313014398u,         253752925378u },
  { 12946035041643640643u,  1541631360972245751u,         194785947408u },
  { 15885877642352740665u,  9903958882920799117u,          16083572003u },
  { 10770818348246089568u, 15744148547788062576u,          35536894686u },
  { 11635415503599551744u, 17936061801321712000u,         222853492002u },
  {  6248053924100826098u,  9986394078324430610u,          34972315858u },
  { 16894170802729859998u, 13849561248103430369u,         210541363507u },
  {  6143589029651889899u, 12142378807953854930u,          51750786219u },
  { 11812087701837886160u,  2513847703931031444u,         171658239674u },
  {  7306705080150829180u,  1752183758129038045u,         186136275957u },
  {  1485332570280714274u, 15824833342220556540u,         245094986071u },
  { 18042602303295630634u,  8168747198299470695u,          87857865934u },
  { 13397029889257074369u, 17414799840149357478u,         206442828672u },
  {  9948104869613411488u,    83147520704167789u,         128944058191u },
  { 10836066241170646532u,  2383542703041471269u,          79004507436u },
  { 18330574781234459389u, 15540952725549257799u,          44129212108u },
  {   666297360208433062u,  6949835416232048690u,         204842476735u },
  {  5035352224889324309u, 15398868937585367540u,         191376751332u },
  {  1341745796439923765u, 14710915985268256079u,         228834774357u },
  {  6846932182653803785u,  9665704836873335737u,          85797480353u },
  {  6727685027257825533u,  2528789298740305993u,         161523978909u },
  {  2168538874806877737u, 10562914675687726264u,         157137085942u },
  { 17694936100676971444u, 17671658300096837111u,         246572616751u },
  {  2163944241059563294u,   356471401631698552u,          47957982516u },
  {  6727780864524301558u,  7450677157218003204u,          52019324353u },
  {  8599551977795002615u,   317174560787152643u,         193403902018u },
  { 15428264807806859091u,  7251937674440720374u,          66017194067u },
  {  2126771385339683557u,  1252631516699038247u,          83393128329u },
  { 15094316562082972944u, 10818009768860843867u,         137067905290u },
  {  8111300598225956802u, 12330114194950162396u,          10586445484u },
  {  9481215200564260304u, 15826681638261168822u,         172668416829u },
  { 16836674128623424708u, 14240150078499211625u,          61857966130u },
  {  7087243115299722740u, 10725372116242125421u,          50771960082u },
  {  2343560867338408810u,  8434925524647833627u,          18581423587u },
  {  3431385749090422286u, 17133902668520348241u,         227457258228u },
  {  3504545517469224582u, 15093996047981365810u,         244928830724u },
  {  3333759805712094227u,  6187974166976813153u,           4818247165u },
  {  3595183476205994775u, 13946144707720259865u,         253335450751u },
  { 14191566632569921303u,  9138079832881862582u,         127756022019u },
  { 12917427671358095562u,  6600697628576225568u,           3495376300u },
  {  3883793922738316288u,  8137099536646556597u,         172357824535u },
  {  7857281689266421760u, 14169855543453903706u,          23441113049u },
  { 15987081651486195712u,  3706403268650100765u,         217768149408u },
  { 16827562156399525888u, 14736932266877982264u,         160200924523u },
  {  7012737938513461248u, 18004795125138956004u,         107798890698u },
  {  7385903388887613440u,  9068489270661002501u,         202976041899u },
  {                    0u,  7758835715193269217u,         171491603788u },
  {                    0u, 16943947811135261184u,          76420607326u },
  {                    0u,  6745843108403216384u,          94918533251u },
  {                    0u, 12338229654069444608u,         131365692887u },
  {                    0u, 14358176069683511296u,         215668856769u },
  {                    0u,  7083775185760813056u,         193778358284u },
  {                    0u,  5350276357316149248u,          12384012222u },
  {                    0u,  9223372036854775808u,         190290039062u },
  {                    0u,                    0u,          22500000000u },
  { 14135788013842776187u,             13064201u,                    0u },
  { 13284322918167594445u,    13064201766302603u,                    0u },
  {  7264587765474046287u, 14699116688460625612u,               708211u },
  { 16176482219778368741u,  6684126021499623499u,         115796840712u },
  {  5401983818872095469u, 12614606079692508506u,           8362347197u },
  { 11208857446851049921u, 15358270276683001489u,         189683839165u },
  { 13794690008281035639u, 18077126190953408995u,         189832573499u },
  { 14519782740993303071u,  7864121581925945659u,          59979962974u },
  { 10885858587044789123u,  3518026639210514839u,          94426314885u },
  {  8710500938899914621u,  4698310163811252280u,         133190712606u },
  {  1284182587483102819u,  6101155398200416338u,          30254695904u },
  { 10346074482131502030u, 16049178580360033341u,         224330744296u },
  {  9429804686255246574u,  3167464649127375997u,         232870027714u },
  {  6412022633845121254u, 12778923935480989904u,         194171708602u },
  {  8892351297529018260u, 11875553912612980379u,         186692746854u },
  { 14098160105983060597u, 10628760849351697057u,         102643775067u },
  { 13793833029739474340u,  3408944711673234310u,          91576186280u },
  { 16367653765996977044u,  2102091496050506178u,         168184799263u },
  { 10684788343333772342u,  6254611118630245760u,          31113954608u },
  { 13272681218705145345u,  2647941151989776368u,          48339063148u },
  { 11093568615497829248u,  8855437735410157458u,         108143545177u },
  { 12488220765137758124u, 10184270603132180103u,          89480054241u },
  {  3727114642519696453u, 12079083162535627164u,         225552090415u },
  { 11549865375695057514u,  5952952868716156729u,          47654808410u },
  { 11292809154908783229u, 11958907037815852320u,          90322710221u },
  { 17723904861837310998u, 10101562137321697626u,         205648293649u },
  { 14877674388187150875u, 13633527411279258327u,          17547606780u },
  { 12178961950105734308u, 16555627393501768728u,         252739075001u },
  {  4540604068069253114u,  6359650463500280706u,         185897482359u },
  { 13832478722153359868u,  8093923611102181967u,         119344757342u },
  {  1308046668730371491u,  2848827352928635726u,          94438772478u },
  { 18400531023544756800u,  4686723431961561511u,         254154435240u },
  {  9789823458621466539u,  6245554925867652609u,         168254067786u },
  {  1924870562610267306u, 17527406820792516033u,          74338572210u },
  {  5290016144582400923u, 12119966834653692210u,         178950162627u },
  { 15162883663174059077u, 11606502845877928061u,         195657024718u },
  {  8078086116520046390u,   424311496652297090u,         206629189780u },
  { 15731407332173190623u,  5977664048034127173u,         148023001972u },
  {  5346389182763011056u,  6702712461535947028u,         116324049817u },
  {  6368422217216252401u, 11384349854055020018u,         153363354770u },
  {  2961453088119116188u,  3782955013294836188u,         146617146842u },
  { 10932141691610170525u,  3531805968821207061u,         218205074402u },
  { 11034016191361782553u,  3867566898657193228u,         226191459585u },
  {  5455325785621453219u, 12688734637425072080u,           1209661221u },
  {  7735615202566149352u, 18435982764454619691u,          37687857682u },
  {  7502396497775759360u,  4728836163964677692u,          18999416628u },
  {  1601286435751591936u,  2120012917348838977u,          52256350722u },
  { 11449383158571597824u,  9856965465824679831u,           2114926130u },
  { 13043944595690356736u, 11217197671061248816u,          50534347168u },
  {  7773494431818186752u,  3840562972677739189u,         160608085504u },
  {  9943947977234055168u, 17104366978925258617u,            208197335u },
  {                    0u, 16177877219841993444u,         215927229591u },
  {                    0u,  7338522384267208704u,         151877004481u },
  {                    0u, 10935240458612244480u,         193397822095u },
  {                    0u,  1732868046462124032u,         143592800573u },
  {                    0u,   557965042578882560u,          61093938965u },
  {                    0u, 10454684322475540480u,          21030247345u },
  {                    0u, 13907115649320091648u,         177566749572u },
  {                    0u,                    0u,         132753906250u },
  {                    0u,                    0u,          74000000000u },
  {  6343817245135589714u,                  199u,                    0u },
  { 17549323075660516085u,         199343899021u,                    0u },
  {  3948641822109421754u, 14876458284855834550u,                   10u },
  {  1750739713693534543u, 10450704926982265198u,          10806454419u },
  {   962163898128633415u,  5385653213018257806u,         147566533849u },
  {  7967320249386531212u, 12735569669880147489u,         217291956845u },
  {  3018466665533383224u,  3619762560577729456u,         109690396615u },
  { 15076865731854945472u, 11123448126624084269u,         199196227721u },
  {   691187172844604400u,  4072715118852885633u,         137603003331u },
  { 13274492813370992341u, 18239087231420827283u,         195220782328u },
  {  6364168818499152300u,   423431461216085297u,         248988742900u },
  { 17599380787401914158u,  9360976716520160042u,         244022954265u },
  {  3782323149461692814u, 11655927117263208920u,          25507459564u },
  { 14470163442442237466u,  2646622721938364948u,         236631869075u },
  {   476109872130437939u,  4496462484548171852u,         147143473705u },
  { 16330548844673355700u, 13140258519803350063u,          41243753719u },
  { 14089158961463739563u, 13089764333320627770u,         247712334841u },
  { 13385510793074798805u,  6926286827289840501u,         249709597546u },
  {  1549401308746959012u,  4985580225290866218u,         106375474761u },
  {  4607384943843027435u, 10478790837359789693u,          73270268845u },
  {  5157353797716093483u, 10041191967455692214u,         173568056389u },
  { 10846828782671550129u,  5035461258013813797u,          69544334107u },
  {  9915857350819131531u, 14208759661559249750u,          27272972901u },
  {  1673544973504317923u, 12347272163241758840u,         101770258404u },
  { 14780986291622785694u,  3372534174410277614u,         228669346965u },
  {  8168111319515466401u, 17226704187274712984u,         149182825443u },
  { 16345760387859734482u,  4250480179449852121u,         227933861505u },
  {  3177475373321281805u,  4303723537755414374u,         129230418992u },
  {  2558676822419554038u,  8680503847344854165u,          48233305320u },
  {  8813474062662382873u,  8817608623911079652u,         232470571056u },
  {  5426294560236228430u,  5692030448698539450u,          48478003521u },
  {  9919177474128333040u, 16908836314686769809u,          65308565588u },
  {  6197383943089627371u,  6073762347067727240u,          84916629853u },
  { 13673239314867423997u, 10931066692585106200u,          93329259316u },
  {  9309584098968723946u, 14466591364061539596u,          52592574312u },
  {  4647101757759615504u,  4958077340960173341u,         104784235489u },
  {  1405809295505096753u,  4076890037156765715u,         225268777911u },
  { 11332704079573859112u, 14083973146609179058u,         183221008651u },
  {  2960072434514044308u,  2565183738039805295u,          11763493714u },
  {  3887266602785432801u,  1482420938751351224u,          82139058889u },
  { 14545546084687849554u,  2151089495335413944u,         201080362200u },
  {  4617763804182385321u,  3738604531753220913u,         216116610795u },
  {  7857823815580249095u, 14195686514836005765u,         235202670157u },
  { 10939326736548364798u, 17808833916231796970u,          77769549707u },
  { 12262012446566951953u,  1302384553035657354u,         139965418821u },
  { 12555024338687723023u,  1672033517974833698u,          69070602408u },
  {  3332969632922829472u, 11673925532927662545u,         168090641118u },
  { 15535060143360327680u,  3905334232240480709u,         222632844771u },
  { 15794322927987458048u, 17411087320267472625u,         227211708592u },
  { 10571474314433921024u, 16573305231063706617u,         176943856934u },
  { 16679514427547975680u, 15481103236037148354u,          38898440676u },
  { 16925653299565166592u,   907440704754420880u,         228839232288u },
  { 16717361816799281152u,  3224970785139077759u,          32049192459u },
  {                    0u, 10560826509734608144u,          11174826016u },
  {                    0u,  4700940027512659968u,          32572503552u },
  {                    0u,  9733694683502084096u,            254838469u },
  {                    0u,  1995535635724632064u,         197527664646u },
  {                    0u, 10629833226245373952u,           6108178203u },
  {                    0u, 15729384648544878592u,          27576244413u },
  {                    0u,  7205759403792793600u,         189852691650u },
  {                    0u,                    0u,         194390625000u },
  {                    0u,                    0u,         232000000000u },
  {  9335385384027907407u,              3041746u,                    0u },
  { 13237828406194798613u,     3041746506072255u,                    0u },
  { 15667486867836528863u,  7535526066623007027u,               164893u },
  { 17982325043592934313u, 11302146918409311588u,          29408501686u },
  { 17159117626917379189u,  2480833299122194801u,         182612690612u },
  {  8336208968408929657u, 11513226205589330558u,         180134486242u },
  { 12767090573379150201u,  4073957068281936105u,         226624133243u },
  { 14736070002412246709u,  3729887061093812886u,         123220849655u },
  {  9697296975344560756u, 13616911779739451443u,         247202197582u },
  {  7291706381199103298u, 13039053282195777666u,          78738174266u },
  { 18098546597780825068u, 14490756113210417890u,          58706848494u },
  {   132913902678533478u, 17432486112977557585u,         238785545462u },
  {  1879347741692007580u, 14308820825344039837u,         246945016965u },
  {  4056624629214083684u,  4190949538817536349u,         133775682731u },
  { 14713227692042795499u, 13616552502810964397u,         171227191829u },
  {  7366415124022528526u,  4898145803694965031u,          21738154790u },
  {   825770353378039393u,  1399036321001644308u,          38265529016u },
  { 10244023944395357795u, 17170331128243738540u,         184075841910u },
  { 14302658294713551167u, 10641321388205367410u,         118930805515u },
  { 14246653166206862817u,  6648873641312572851u,          11576867188u },
  { 12404486258134291102u,  5988456964560374823u,         116360436162u },
  {  8887442218637942533u,  9972593758348346915u,         194324634902u },
  {  1186724038081863005u, 16709668921872818968u,          22540615390u },
  {   211331772484951576u,  6094829131503407767u,         222905832967u },
  {  6311919513247413649u,  4892016478899926334u,           7330401349u },
  {  8131780018703965703u, 13150857244079031538u,          69265196744u },
  {  2262544347226725725u, 12983943395318785894u,         200712909399u },
  { 15318188749880522583u, 15341644584614757478u,          87703860981u },
  {  1073117094162650652u,  7507635124856644772u,         245831672219u },
  {  4447950380665871747u, 11619655367084544354u,         155406989715u },
  {  5373227185066463609u, 11553116952478783009u,         147629902779u },
  {  6739731406934274193u, 17392150014233193245u,         187626295724u },
  { 12328812617001239444u,  8877887560294980515u,         172942830341u },
  {  3246111484407310759u, 18404180619915609503u,           5481271248u },
  {  3250825415176839770u, 10079413095288181976u,         208997692630u },
  { 16146270540000862342u, 14102802966539105550u,         214546406078u },
  { 15686773375425916830u, 13333966026135891399u,         190764514480u },
  { 11920791905793880226u, 12344968670173516152u,         176722835746u },
  {  1853290561644080707u, 10577007819804726752u,          34669222092u },
  { 12157689141506159076u, 15337041354031088010u,         204573380742u },
  { 18100318838862562546u, 14333607285614673616u,         134831422677u },
  {  7171257882533475139u, 17171597563219696538u,         213777026407u },
  { 14477550873015039462u,  2849642930482147564u,         103930874169u },
  {  8109481182495403274u, 14791248423979435173u,          57154479452u },
  { 14565395719337663965u, 13882371364576310127u,          92801835183u },
  {  1860318978161305991u, 11735995808941329540u,         175752564859u },
  { 16268646275151585618u, 11376996674339273181u,         123636209607u },
  { 13759019338835519104u,  9849638057168043481u,         199616748225u },
  { 17003783176010661888u, 18241520229279361964u,         193533949948u },
  { 18357489540307877888u,  1865852368526961444u,         252988874793u },
  {   905481790074912768u, 10601487369276448158u,          41101148059u },
  {  3638882110636294144u, 15999931310312762170u,         155574707781u },
  {  9011702854368362496u,  5773775867713013570u,          69867358014u },
  { 11529215046068469760u, 17726239863982547534u,          62312997016u },
  {                    0u,  9711316695888316992u,         152960941388u },
  {                    0u, 17872002620723724288u,          76526451532u },
  {                    0u,  7429694208660733952u,          76968843203u },
  {                    0u,  1782821038871019520u,         195402764530u },
  {                    0u,  3225250234313474048u,         242096646922u },
  {                    0u, 10009250171830927360u,          10174841165u },
  {                    0u,  1152921504606846976u,          77542602539u },
  {                    0u,                    0u,          43062500000u },
  {                    0u,                    0u,         160000000000u },
  {  7625299565768063067u,                   46u,                    0u },
  { 13889021769065194705u,          46413368317u,                    0u },
  { 14498170692313014398u,  9519880170333822146u,                    2u },
  {  1541631360972245751u,  2285186318012886800u,           2516073738u },
  {  9903958882920799117u,  9706420951402272035u,          10123880198u },
  { 15744148547788062576u,  2369632031840402142u,           6526186134u },
  { 17936061801321712000u, 15599123897979399458u,         150128458009u },
  {  9986394078324430610u, 17579576584023912658u,          25845630200u },
  { 13849561248103430369u,  3480927339588501811u,         248952990756u },
  { 12142378807953854930u,  3547346616671294635u,          36188701449u },
  {  2513847703931031444u,  7705317123868384954u,           9192302045u },
  {  1752183758129038045u,  4969425237478353909u,         221417706078u },
  { 15824833342220556540u, 17043246700132217175u,          94269393081u },
  {  8168747198299470695u, 17053788362783499470u,         185923916254u },
  { 17414799840149357478u, 11102988228454224768u,         222924487719u },
  {    83147520704167789u, 16944305387801685839u,          39601894197u },
  {  2383542703041471269u, 11725142977459199276u,          53918552635u },
  { 15540952725549257799u,  8175984171998533324u,          59635621274u },
  {  6949835416232048690u,  1372352885142856895u,         154443220990u },
  { 15398868937585367540u, 17975093466502888164u,         254074395398u },
  { 14710915985268256079u,  6467823391459085653u,           6974431769u },
  {  9665704836873335737u, 11319386883146885025u,          25350621408u },
  {  2528789298740305993u,  9141999262922068637u,         224613625192u },
  { 10562914675687726264u,  1587330393383478774u,         104495588773u },
  { 17671658300096837111u,   884187548095712303u,         165086049353u },
  {   356471401631698552u,   488841225726377268u,          73047931903u },
  {  7450677157218003204u, 17462624199405856193u,         255026500135u },
  {   317174560787152643u, 13183677579115583554u,          39946650754u },
  {  7251937674440720374u, 11645015818917277779u,         130714688593u },
  {  1252631516699038247u,  8760523002035971977u,          81631277572u },
  { 10818009768860843867u, 10068817678491468042u,           4474908903u },
  { 12330114194950162396u,  1273658177787418284u,         231545831700u },
  { 15826681638261168822u,  3100019384328057661u,          20069045148u },
  { 14240150078499211625u, 10363063568089458738u,         156168052387u },
  { 10725372116242125421u, 13030756371481403666u,         163561782801u },
  {  8434925524647833627u,  6538878900684195299u,          17706398718u },
  { 17133902668520348241u,  8984884716779098868u,         254354473335u },
  { 15093996047981365810u,  8728727397070363908u,         119487071576u },
  {  6187974166976813153u,  6398650562917867005u,          88473185260u },
  { 13946144707720259865u,  1190873176164938879u,         236346871542u },
  {  9138079832881862582u,  4383628525805121795u,         246064557364u },
  {  6600697628576225568u, 10189374699734119852u,          52237636978u },
  {  8137099536646556597u,  5276291920541626391u,         114552367109u },
  { 14169855543453903706u,  2692252373800386521u,           5286028358u },
  {  3706403268650100765u, 11578684995169173920u,          70145947293u },
  { 14736932266877982264u,  5799408022254132587u,         157627681771u },
  { 18004795125138956004u, 15548569837712345290u,         235314386538u },
  {  9068489270661002501u, 15763030464322902955u,         106842889659u },
  {  7758835715193269217u, 13257749746581255500u,         187854515593u },
  { 16943947811135261184u, 16152470009188707678u,         137718704053u },
  {  6745843108403216384u, 13806790848493904003u,         181875627153u },
  { 12338229654069444608u, 11981226523265951191u,         145748467631u },
  { 14358176069683511296u,  5133628726077003713u,         175649503591u },
  {  7083775185760813056u, 16183955741910833164u,         103278294570u },
  {  5350276357316149248u, 13640425554331371454u,          42877333998u },
  {  9223372036854775808u, 18108120906868035862u,         238739448950u },
  {                    0u,  6324011669895037184u,         118981643201u },
  {                    0u, 10444437689515769856u,         193342825359u },
  {                    0u, 12324712543665782784u,         143566194101u },
  {                    0u, 13928941951563857920u,         181668124005u },
  {                    0u,  3975288688270639104u,         101755089456u },
  {                    0u, 11141905478114607104u,          48215500831u },
  {                    0u,  4611686018427387904u,          31604003906u },
  {                    0u,                    0u,          66250000000u },
  {                    0u,                    0u,         128000000000u },
  { 14699116688460625612u,               708211u,                    0u },
  {  6684126021499623499u,      708211796840712u,                    0u },
  { 12614606079692508506u,  4398362855256705725u,                38392u },
  { 15358270276683001489u,  2812083125569302717u,         248238435728u },
  { 18077126190953408995u, 12868509142973100603u,         144152443331u },
  {  7864121581925945659u,  8726243776748165726u,         195697603278u },
  {  3518026639210514839u,   358304413426858117u,         206473050623u },
  {  4698310163811252280u,  3180720351566429470u,         255019423721u },
  {  6101155398200416338u, 14053818240400098784u,         233172427195u },
  { 16049178580360033341u,  7340140541492429288u,         187761859013u },
  {  3167464649127375997u,  1323571167904965058u,         197397909816u },
  { 12778923935480989904u, 14463851737583396026u,          56071750936u },
  { 11875553912612980379u, 15122784818916048486u,          24784086973u },
  { 10628760849351697057u, 13557974621377508955u,         189819807807u },
  {  3408944711673234310u, 17525172074563876264u,          63734979276u },
  {  2102091496050506178u, 15148880683074215967u,         204950041481u },
  {  6254611118630245760u,  6744828147558597936u,         137821222467u },
  {  2647941151989776368u,  9799290779647971692u,          67365637866u },
  {  8855437735410157458u, 11170890203898678105u,         234531220617u },
  { 10184270603132180103u,  7068779781287527905u,         137605575171u },
  { 12079083162535627164u, 14474741922505540911u,           3383199319u },
  {  5952952868716156729u, 17107062680405191514u,          87784677331u },
  { 11958907037815852320u,  2712598571300237005u,         211927375726u },
  { 10101562137321697626u,  3767556054903418641u,         110147050263u },
  { 13633527411279258327u, 18158239681706277628u,          23204239622u },
  { 16555627393501768728u, 10531652712128330681u,           6984360145u },
  {  6359650463500280706u,  9548395326934120567u,         209570922037u },
  {  8093923611102181967u, 15875647850297719390u,          53517619547u },
  {  2848827352928635726u,  8215825295203192574u,          91860620594u },
  {  4686723431961561511u, 12747310908260543144u,          50445380781u },
  {  6245554925867652609u,    77706528053613642u,         173691033109u },
  { 17527406820792516033u,  6024737704056756146u,          21004212479u },
  { 12119966834653692210u,  6819452388570089667u,         255326601685u },
  { 11606502845877928061u, 13695926775373186254u,         213369683254u },
  {   424311496652297090u,  3746531715392682132u,          54742457678u },
  {  5977664048034127173u,  4717376233154528116u,          78203099891u },
  {  6702712461535947028u,   385190957950313369u,         243255729478u },
  { 11384349854055020018u, 12388374310648616082u,          70020881243u },
  {  3782955013294836188u,  1078067332084407770u,          91671575117u },
  {  3531805968821207061u,  3257295319358714850u,          77058442147u },
  {  3867566898657193228u,  1545453099660723457u,         163176578333u },
  { 12688734637425072080u,  7495477664653506341u,          29083779180u },
  { 18435982764454619691u,  7225503732673614354u,         108406330658u },
  {  4728836163964677692u,  3935478326103643956u,          34391695342u },
  {  2120012917348838977u, 10082240682742686210u,         238213342707u },
  {  9856965465824679831u, 10838712705567897138u,         243546559362u },
  { 11217197671061248816u,  2142546572501643680u,         130587567793u },
  {  3840562972677739189u,  7893042119150331392u,         177116147682u },
  { 17104366978925258617u, 12084811642251302615u,         226427882670u },
  { 16177877219841993444u, 15317234482572954775u,         174655118951u },
  {  7338522384267208704u,  2283226355108359361u,         103830348945u },
  { 10935240458612244480u, 13359725152575722127u,         145123773948u },
  {  1732868046462124032u, 13126551011491594557u,         252724232151u },
  {   557965042578882560u,  3598021288691861269u,         215711591756u },
  { 10454684322475540480u, 16462621795896662961u,          76195049124u },
  { 13907115649320091648u, 14682112756964627332u,         164892440515u },
  {                    0u,  7174112100896070218u,         195795918927u },
  {                    0u,  5023109019590616064u,          79388909396u },
  {                    0u, 10765223023086141440u,          84272303285u },
  {                    0u,  8228137177297453056u,         181583583909u },
  {                    0u,  2891199497780592640u,         165446048210u },
  {                    0u, 15294857653247803392u,         210156732238u },
  {                    0u, 14303432416528695296u,          78829135894u },
  {                    0u,                    0u,          22775390625u },
  {                    0u,                    0u,         161000000000u },
  { 14876458284855834550u,                   10u,                    0u },
  { 10450704926982265198u,          10806454419u,                    0u },
  {  5385653213018257806u, 10806454419566533849u,                    0u },
  { 12735569669880147489u, 17118225092618494573u,            585819067u },
  {  3619762560577729456u, 13385738875341807559u,         187927980841u },
  { 11123448126624084269u,  8272682717439277193u,          41725642358u },
  {  4072715118852885633u, 13402436483369350083u,         118448463028u },
  { 18239087231420827283u, 10946328903241612536u,         180726547537u },
  {   423431461216085297u, 16265808923426731252u,          81593401678u },
  {  9360976716520160042u, 11080374459871185177u,          78881771268u },
  { 11655927117263208920u,  1240761893433831916u,           4600668303u },
  {  2646622721938364948u,   367264070493390483u,         143067261837u },
  {  4496462484548171852u,  2863675693461092905u,         141019909425u },
  { 13140258519803350063u,  7511929581752138999u,          49155240170u },
  { 13089764333320627770u, 11154557789993845753u,         234407222518u },
  {  6926286827289840501u,  8325416539745948522u,         246604689789u },
  {  4985580225290866218u, 17745129874679852617u,         125451321734u },
  { 10478790837359789693u,  1074820986392253357u,         134961965418u },
  { 10041191967455692214u,  7820952682162838597u,         106058266162u },
  {  5035461258013813797u,  8215518006273528603u,          50423974694u },
  { 14208759661559249750u,  9680426791089900133u,          38445364123u },
  { 12347272163241758840u, 16128495723604797412u,         155524776987u },
  {  3372534174410277614u,  2264789053583348885u,          27874327505u },
  { 17226704187274712984u, 11175458488686298083u,         209122774460u },
  {  4250480179449852121u, 11026777810412287617u,         188605822818u },
  {  4303723537755414374u, 16199890034895598640u,          98597762822u },
  {  8680503847344854165u,  9094320719494763752u,           6878197798u },
  {  8817608623911079652u,  1250835564687222832u,          38493004114u },
  {  5692030448698539450u, 15362466642459337025u,          82067807931u },
  { 16908836314686769809u,  7831109835595423828u,         187832800985u },
  {  6073762347067727240u, 15426237284335022429u,         217424525314u },
  { 10931066692585106200u, 15636308361455434548u,           2836257998u },
  { 14466591364061539596u, 13967173875944980328u,         206847645974u },
  {  4958077340960173341u, 18245979923595824097u,          22757162012u },
  {  4076890037156765715u, 11335054479675278263u,          28989116553u },
  { 14083973146609179058u, 11165339882630461707u,         137614474534u },
  {  2565183738039805295u, 15944437408299395922u,          38605274287u },
  {  1482420938751351224u, 15806416348777321161u,         175864349683u },
  {  2151089495335413944u,  4201030477408556248u,         243856867547u },
  {  3738604531753220913u,  9485474942554588907u,         219227738318u },
  { 14195686514836005765u, 18238757647663230541u,         206514208626u },
  { 17808833916231796970u,  4642199687824746379u,         114988725033u },
  {  1302384553035657354u,  6134575894869364037u,          41251654149u },
  {  1672033517974833698u, 11524208547121316008u,           5332556025u },
  { 11673925532927662545u,  2734683241527878366u,         249624728597u },
  {  3905334232240480709u, 10629223456178675171u,          21148247475u },
  { 17411087320267472625u,  2788042336985254064u,         179576211358u },
  { 16573305231063706617u, 17285498758066142502u,         158151140077u },
  { 15481103236037148354u,  5525538192421886436u,         237937048765u },
  {   907440704754420880u, 11414325503043801888u,         189299540025u },
  {  3224970785139077759u,  7246608114685173259u,          57618771825u },
  { 10560826509734608144u,  1007884269852184608u,         113392839413u },
  {  4700940027512659968u, 13823717876510029312u,         245054637515u },
  {  9733694683502084096u, 12487410768239429317u,         203749385247u },
  {  1995535635724632064u,  3361062421598631942u,          31676943894u },
  { 10629833226245373952u, 17853337379088328475u,          22182203558u },
  { 15729384648544878592u, 11551561037491869885u,         166967831358u },
  {  7205759403792793600u, 11480877996635204802u,          62626211378u },
  {                    0u,  5527488381934471912u,          50622379643u },
  {                    0u, 11143438404407726080u,         123299645745u },
  {                    0u,  6472279730688098304u,          49604087006u },
  {                    0u,  4561816853579563008u,         222350862987u },
  {                    0u,  2888714464062865408u,         139247296587u },
  {                    0u, 16258276129784201216u,          75156597524u },
  {                    0u,   720575940379279360u,          20881362915u },
  {                    0u,                    0u,         227039062500u },
  {                    0u,                    0u,         228000000000u },
  {  7535526066623007027u,               164893u,                    0u },
  { 11302146918409311588u,      164893408501686u,                    0u },
  {  2480833299122194801u, 16409970870640346804u,                 8938u },
  { 11513226205589330558u,  7721907286269370594u,         234889586303u },
  {  4073957068281936105u, 14300743897882155131u,         127418605432u },
  {  3729887061093812886u,  2068482633821123575u,         120775244880u },
  { 13616911779739451443u,  4922882895416406094u,          80112132668u },
  { 13039053282195777666u,  9317632875623428410u,          60266870016u },
  { 14490756113210417890u,  5693844901999766254u,            505109890u },
  { 17432486112977557585u, 11569484900262102262u,         130308663950u },
  { 14308820825344039837u,  3138170119352085637u,         142627183033u },
  {  4190949538817536349u,   950584692575235243u,         185170120543u },
  { 13616552502810964397u,  8136430299747162645u,          95051531299u },
  {  4898145803694965031u,  6698711700804594470u,          35441076770u },
  {  1399036321001644308u, 17401191571004302008u,          34363137888u },
  { 17170331128243738540u,  4721732028538188150u,          96943320485u },
  { 10641321388205367410u,  2984214103553086219u,         165255965606u },
  {  6648873641312572851u, 13128675202005662068u,         166161774570u },
  {  5988456964560374823u, 14638512997670672834u,         234711706908u },
  {  9972593758348346915u, 12942085665769692438u,          28793555379u },
  { 16709668921872818968u, 14131134357119205086u,         179701591869u },
  {  6094829131503407767u,  8921946894736102919u,          61766050328u },
  {  4892016478899926334u,  5601522560505809989u,          24483659710u },
  { 13150857244079031538u,  8602606493507716808u,         190303659146u },
  { 12983943395318785894u,  8576789731078566487u,         138466348232u },
  { 15341644584614757478u, 17881118138842658549u,         200464948702u },
  {  7507635124856644772u, 11624372674432704923u,         222969337356u },
  { 11619655367084544354u,  6826284072848095635u,          12630158505u },
  { 11553116952478783009u,  1646466632033733563u,         169370053601u },
  { 17392150014233193245u, 17871081657060299180u,         225089255134u },
  {  8877887560294980515u, 15910893124677544709u,         222968793277u },
  { 18404180619915609503u, 11031217459450580944u,         189862531244u },
  { 10079413095288181976u, 13554987390037243094u,         172598003496u },
  { 14102802966539105550u, 15026714590903687870u,          40734817338u },
  { 13333966026135891399u,  4406379654994689200u,          58814599830u },
  { 12344968670173516152u, 13596329092861950242u,         150238870319u },
  { 10577007819804726752u,   284812388227373260u,          47737058477u },
  { 15337041354031088010u,  9285079159392309382u,         173015439710u },
  { 14333607285614673616u, 15046108141952711893u,          94503345149u },
  { 17171597563219696538u, 13795366909944958311u,         253815651156u },
  {  2849642930482147564u, 12909920641180059961u,          84747848338u },
  { 14791248423979435173u,  5333762939889788252u,         146699848200u },
  { 13882371364576310127u,  6411331390005944495u,           8289143868u },
  { 11735995808941329540u,  1447104583224217723u,          60347558971u },
  { 11376996674339273181u, 11940049226167932871u,          59078447696u },
  {  9849638057168043481u,  9772290783590472385u,          80647271365u },
  { 18241520229279361964u, 16351989577831528444u,         197529756944u },
  {  1865852368526961444u,  4376738725895725097u,          16886443131u },
  { 10601487369276448158u, 13851276297739812763u,         123237263481u },
  { 15999931310312762170u, 12641996203470333509u,         121750879192u },
  {  5773775867713013570u,  7707081716407945022u,         216685323987u },
  { 17726239863982547534u,   417638323657040024u,         211417801737u },
  {  9711316695888316992u, 16438047707692449100u,           9022640218u },
  { 17872002620723724288u, 14850108107043306316u,          90891108351u },
  {  7429694208660733952u, 10423290807904720835u,         255805025973u },
  {  1782821038871019520u, 16951162310302339314u,         181565047726u },
  {  3225250234313474048u,  2752437506572397322u,         174918924350u },
  { 10009250171830927360u,  3925815842962784589u,          62149209936u },
  {  1152921504606846976u,  5274166674003605291u,          80212818903u },
  {                    0u,  5538963350863452832u,         215285913148u },
  {                    0u, 16900671634439028736u,          60300267804u },
  {                    0u,  2326997710751662080u,          28916187245u },
  {                    0u, 12327726161625874432u,         109126146798u },
  {                    0u,  5756455743825903616u,         238668287374u },
  {                    0u,  3018537650245074944u,         142312058091u },
  {                    0u, 16717361816799281152u,         235163635253u },
  {                    0u,                    0u,          53906250000u },
  {                    0u,                    0u,          16000000000u },
  {  2285186318012886800u,           2516073738u,                    0u },
  {  9706420951402272035u,  2516073738123880198u,                    0u },
  {  2369632031840402142u, 11997425759292732054u,            136396630u },
  { 15599123897979399458u, 11491152661270395161u,          86650381753u },
  { 17579576584023912658u, 18181063258234881272u,         185622936633u },
  {  3480927339588501811u,  2466921813123869732u,          57985597414u },
  {  3547346616671294635u,  8430880678232179465u,         230133732099u },
  {  7705317123868384954u,  6738034873677997533u,           3457038957u },
  {  4969425237478353909u,  7678250951042929246u,         109365269602u },
  { 17043246700132217175u,  1853560606315563193u,          98416238818u },
  { 17053788362783499470u, 14942676593409905118u,         226100481721u },
  { 11102988228454224768u,  4909892170837638183u,         185810044121u },
  { 16944305387801685839u, 16871149368312132405u,         217266165787u },
  { 11725142977459199276u, 16096130589333770811u,          27914586839u },
  {  8175984171998533324u, 12512479187631824282u,         215872572987u },
  {  1372352885142856895u, 16980304980540557310u,          59678302855u },
  { 17975093466502888164u,  8640919162749295366u,         135920504177u },
  {  6467823391459085653u,  7862382415464063513u,         113468425166u },
  { 11319386883146885025u, 14534157903009925344u,         206426220604u },
  {  9141999262922068637u, 12627464554215107944u,          60787898278u },
  {  1587330393383478774u,  2456849734836299173u,         166684536225u },
  {   884187548095712303u, 18428252197697827913u,         161133186090u },
  {   488841225726377268u,  7244734215936736255u,          42998997553u },
  { 17462624199405856193u, 14756175050504770087u,          49392737828u },
  { 13183677579115583554u,  6764116534566945922u,          36799933852u },
  { 11645015818917277779u,  1588822142405565521u,         156366683492u },
  {  8760523002035971977u, 17053265624843842052u,         100086130220u },
  { 10068817678491468042u, 16996891591759999207u,          44924459381u },
  {  1273658177787418284u,  8565556232370585876u,         117921403339u },
  {  3100019384328057661u, 14464960359145886620u,         203464339733u },
  { 10363063568089458738u,  5813189542048784035u,          21784147072u },
  { 13030756371481403666u,  9739241026882027025u,         128315133636u },
  {  6538878900684195299u, 18175068535675302910u,         196527965313u },
  {  8984884716779098868u, 10562697212061761911u,         129985272439u },
  {  8728727397070363908u,  4264834835660801368u,         119572604963u },
  {  6398650562917867005u, 13019066443690126316u,          35231197159u },
  {  1190873176164938879u,  1828040177823321846u,         231705765006u },
  {  4383628525805121795u, 11240369830376975668u,         142099098256u },
  { 10189374699734119852u,  8886938465302549874u,         144609341669u },
  {  5276291920541626391u,  9985240313589688325u,         229481761899u },
  {  2692252373800386521u,   722909126956573766u,         107541300962u },
  { 11578684995169173920u,  5493363474638452381u,         226039188982u },
  {  5799408022254132587u, 12410535279213120491u,         246297795830u },
  { 15548569837712345290u, 10543108918366869098u,         246672776465u },
  { 15763030464322902955u, 12953909016524823995u,          17571543079u },
  { 13257749746581255500u, 16505942145872588169u,          39702232814u },
  { 16152470009188707678u, 12428594380392015797u,         238894788916u },
  { 13806790848493904003u,  7528259605829768337u,          52673755451u },
  { 11981226523265951191u, 18147447600042811311u,          59408107770u },
  {  5133628726077003713u, 12021069431116183911u,         250983775105u },
  { 16183955741910833164u, 11819985069665662506u,         129651663479u },
  { 13640425554331371454u, 10401877114068152814u,         119640762674u },
  { 18108120906868035862u,  4611631138117837942u,          50563886888u },
  {  6324011669895037184u, 17200813398607252417u,          40249997024u },
  { 10444437689515769856u, 14100466137553658767u,         224932457962u },
  { 12324712543665782784u, 17887776768825509301u,         234764387800u },
  { 13928941951563857920u, 12632656857970087269u,         216969698321u },
  {  3975288688270639104u,  8923681664054686256u,          17684817700u },
  { 11141905478114607104u,  6213926103737837599u,          36483753752u },
  {  4611686018427387904u,  1233118281776157762u,          24336857609u },
  {                    0u,    30716279628678784u,           9066847476u },
  {                    0u, 15775734650898546688u,         244001665132u },
  {                    0u,   976806005729918976u,         108855204289u },
  {                    0u, 12460098853279891456u,         193052952759u },
  {                    0u,  5635665595421687808u,         183675463312u },
  {                    0u,  1805943450575568896u,         144305510044u },
  {                    0u, 11529215046068469760u,         156097900390u },
  {                    0u,                    0u,         102625000000u },
  {                    0u,                    0u,          64000000000u },
  {  4398362855256705725u,                38392u,                    0u },
  {  2812083125569302717u,       38392238435728u,                    0u },
  { 12868509142973100603u,  4564018338575530435u,                 2081u },
  {  8726243776748165726u, 16553437246451512014u,          33247415929u },
  {   358304413426858117u,  4339777136957372927u,         121897363631u },
  {  3180720351566429470u, 18439463366554654697u,         175235259789u },
  { 14053818240400098784u,  1370067356680643003u,         141999605312u },
  {  7340140541492429288u,  4210124040914115013u,          64074271500u },
  {  1323571167904965058u, 10692225626142609720u,          12228231281u },
  { 14463851737583396026u, 11592856673895384344u,         113579626712u },
  { 15122784818916048486u, 10284479231227406269u,         216628450019u },
  { 13557974621377508955u,  4961071383534266431u,         227557522736u },
  { 17525172074563876264u, 10960611551445686988u,          48268940218u },
  { 15148880683074215967u, 14616396723115619209u,         186594175942u },
  {  6744828147558597936u,  1025604265437492803u,         198792356454u },
  {  9799290779647971692u, 11711588454892179178u,         102055598118u },
  { 11170890203898678105u,  5580373263251565705u,          38634886482u },
  {  7068779781287527905u, 14109334653033148931u,          82302512640u },
  { 14474741922505540911u,  2899414033769399895u,            764868564u },
  { 17107062680405191514u, 13233457234892808147u,         212157177549u },
  {  2712598571300237005u,  3287946691509034862u,         205717387154u },
  {  3767556054903418641u,  5488480288717445911u,         146178239947u },
  { 18158239681706277628u, 11687233053874362630u,         203297531112u },
  { 10531652712128330681u,  6783772100089274577u,         232633566173u },
  {  9548395326934120567u,  7898291058728402485u,         221367749022u },
  { 15875647850297719390u,  4423684977486598491u,         158428167216u },
  {  8215825295203192574u,  2750833684599526706u,          48239808443u },
  { 12747310908260543144u, 15669689830489025709u,         187149122992u },
  {    77706528053613642u, 15117307274214954517u,         176849455587u },
  {  6024737704056756146u,  8148639818575698175u,         227819510869u },
  {  6819452388570089667u, 13006484426078994901u,          85441738649u },
  { 13695926775373186254u, 10287496057845513526u,         153705082933u },
  {  3746531715392682132u, 14159876032966532430u,          53557686278u },
  {  4717376233154528116u, 15742212196465548019u,           6767608417u },
  {   385190957950313369u,  2892220461917134150u,          97853387033u },
  { 12388374310648616082u,  7487151560715393883u,          25156787585u },
  {  1078067332084407770u,  7245756744165177933u,         129405879299u },
  {  3257295319358714850u,  3067122860671533987u,           3392793260u },
  {  1545453099660723457u,  8135043905834122525u,         172166269063u },
  {  7495477664653506341u, 14730019368921022572u,         135441001613u },
  {  7225503732673614354u,   495969939682055458u,         141798515950u },
  {  3935478326103643956u,  5617761407265775598u,         238026886584u },
  { 10082240682742686210u,  2087044847072781811u,         184304539456u },
  { 10838712705567897138u, 15929674232061203330u,          64113138927u },
  {  2142546572501643680u,  8658086469608285873u,         239863549370u },
  {  7893042119150331392u, 18369871790780313570u,         186469355807u },
  { 12084811642251302615u,  3545648451947416750u,          31995832745u },
  { 15317234482572954775u, 13347376792767929959u,         169192209987u },
  {  2283226355108359361u, 14482164459838203025u,          67723562745u },
  { 13359725152575722127u,  8899577765623565820u,         249785079708u },
  { 13126551011491594557u,  7095320096604405719u,         156482447077u },
  {  3598021288691861269u,  2968593824439315788u,         229384638073u },
  { 16462621795896662961u, 12621408323612585636u,         121160927793u },
  { 14682112756964627332u,  3954422936414648259u,          49684207916u },
  {  7174112100896070218u, 17143730087577690191u,          44214369696u },
  {  5023109019590616064u,  5033045529399041876u,         160929363470u },
  { 10765223023086141440u, 15857648521994521781u,          14272841944u },
  {  8228137177297453056u, 16655573486499109541u,         216859644848u },
  {  2891199497780592640u, 16652154439190075858u,         176902900447u },
  { 15294857653247803392u, 18016950600164130638u,         223902715100u },
  { 14303432416528695296u,  2086292996072613910u,         220976700849u },
  {                    0u, 17324462585194799521u,         177113098169u },
  {                    0u, 11079151463184927232u,         185939160998u },
  {                    0u,  5239846817488961536u,         166600602004u },
  {                    0u,  2778806963520143360u,         148284052665u },
  {                    0u,  6240890740138835968u,         185150639427u },
  {                    0u, 17250651344549707776u,          67338319364u },
  {                    0u,  4197354852709302272u,           4935159683u },
  {                    0u,  9223372036854775808u,         131227539062u },
  {                    0u,                    0u,         118500000000u },
  { 17118225092618494573u,            585819067u,                    0u },
  { 13385738875341807559u,   585819067927980841u,                    0u },
  {  8272682717439277193u,  5654803392547571318u,             31757315u },
  { 13402436483369350083u,  2931628102185393332u,           3306547506u },
  { 10946328903241612536u, 15964697617980212305u,          50158923877u },
  { 16265808923426731252u,   450380868305846606u,         101865447992u },
  { 11080374459871185177u, 14631133530814566148u,          56024415195u },
  {  1240761893433831916u,    31969822783742095u,         219793155338u },
  {   367264070493390483u, 10437269029385743245u,          10001733087u },
  {  2863675693461092905u, 15196146496377392433u,         223565805487u },
  {  7511929581752138999u,  4409099735137480938u,         175823784752u },
  { 11154557789993845753u, 10644987914903248118u,          48239017775u },
  {  8325416539745948522u,  3154431617534062973u,          47577065951u },
  { 17745129874679852617u, 11702056331247960454u,         223171002080u },
  {  1074820986392253357u, 15575315065965259114u,         224634369744u },
  {  7820952682162838597u, 10759747609480050226u,         208844339521u },
  {  8215518006273528603u, 12538236653960743718u,          65583287086u },
  {  9680426791089900133u, 17857942663978005403u,          46679699170u },
  { 16128495723604797412u, 11443004154750813211u,         226968081011u },
  {  2264789053583348885u,  4004313188770806737u,         115620326498u },
  { 11175458488686298083u, 17134872954824183228u,          98217074252u },
  { 11026777810412287617u,  2659553912986171234u,          76928883324u },
  { 16199890034895598640u,  9501854300969137926u,         124144174706u },
  {  9094320719494763752u, 14528169966301018150u,         114515096553u },
  {  1250835564687222832u, 18172091996515901778u,         233787573671u },
  { 15362466642459337025u,  1133541705604751035u,         167985111081u },
  {  7831109835595423828u, 18280349987988641497u,          41061449418u },
  { 15426237284335022429u,  9936015874712336386u,         202990979758u },
  { 15636308361455434548u, 15876720399740689614u,         174538632499u },
  { 13967173875944980328u,  8618117825152456982u,          51860678737u },
  { 18245979923595824097u,  8085525680745921564u,          81467189103u },
  { 11335054479675278263u,  8072355444669730953u,         111438317225u },
  { 11165339882630461707u,  9395030504766848294u,         169437603265u },
  { 15944437408299395922u,  3537903114058185903u,         193509305624u },
  { 15806416348777321161u,  2126094743961928691u,          24191790112u },
  {  4201030477408556248u,   289185362555601115u,          32115255827u },
  {  9485474942554588907u, 16909937501450129614u,          19015676769u },
  { 18238757647663230541u, 14449642060360499058u,          97916689548u },
  {  4642199687824746379u, 12433818908498244393u,         140783316665u },
  {  6134575894869364037u, 11884444034578008581u,         185674038673u },
  { 11524208547121316008u,   988625838444140793u,         145644257002u },
  {  2734683241527878366u,  1675370907158909973u,         234053593514u },
  { 10629223456178675171u, 15920186275316934067u,         170090822038u },
  {  2788042336985254064u,  5600921198503757726u,         150863035027u },
  { 17285498758066142502u, 10457357161776341741u,         147303626546u },
  {  5525538192421886436u, 12225356765775740093u,          50566894467u },
  { 11414325503043801888u,  4486633318598164537u,         131662737918u },
  {  7246608114685173259u, 10302486602879381361u,         254243220879u },
  {  1007884269852184608u, 15536428611301239541u,         143558498917u },
  { 13823717876510029312u, 12026126645955462603u,         101842231482u },
  { 12487410768239429317u, 14877968141142123551u,         186651937631u },
  {  3361062421598631942u,   734560801645383190u,          95806536269u },
  { 17853337379088328475u, 15648943144911081638u,          77039820620u },
  { 11551561037491869885u, 13664182862003235646u,          76848330907u },
  { 11480877996635204802u,  3895127525902132786u,         155740736837u },
  {  5527488381934471912u,  5249187334214137467u,          69211155286u },
  { 11143438404407726080u, 10642260063359027505u,          86284559015u },
  {  6472279730688098304u,   783598951897779422u,         167576918074u },
  {  4561816853579563008u,  5538576558607624843u,          58042478984u },
  {  2888714464062865408u, 15974581187564609611u,         136300246836u },
  { 16258276129784201216u,  7474269406918257428u,          52865983781u },
  {   720575940379279360u,  8045286838779138019u,          37405180956u },
  {                    0u,  8184246376556341732u,          28436135873u },
  {                    0u,  1493267152679331840u,         193443668885u },
  {                    0u, 10179074811222818816u,         149080950174u },
  {                    0u,  3892499202005008384u,         158551808751u },
  {                    0u, 10341173215925108736u,         239211012804u },
  {                    0u,  6230307872002015232u,         196560596123u },
  {                    0u,  9295429630892703744u,         155337745666u },
  {                    0u,                    0u,           2503906250u },
  {                    0u,                    0u,         202000000000u },
  { 16409970870640346804u,                 8938u,                    0u },
  {  7721907286269370594u,        8938889586303u,                    0u },
  { 14300743897882155131u, 10665454627995623288u,                  484u },
  {  2068482633821123575u, 16803537892767562832u,         228578175453u },
  {  4922882895416406094u,  8099123106849104444u,         221910921614u },
  {  9317632875623428410u,  7077413686679401728u,         142439054343u },
  {  5693844901999766254u, 13536636358372449666u,           7383667364u },
  { 11569484900262102262u,  7280632235418610318u,         164733822527u },
  {  3138170119352085637u,  6187823673116858809u,          63394683864u },
  {   950584692575235243u,  8624343686231740255u,         216335442593u },
  {  8136430299747162645u,   806211610822132771u,         161467526608u },
  {  6698711700804594470u, 18388078233202190882u,         208043704818u },
  { 17401191571004302008u,  7628864426595573600u,         242996819718u },
  {  4721732028538188150u,  4530799784343874981u,           6413561569u },
  {  2984214103553086219u,  8561580552078486438u,         225245615148u },
  { 13128675202005662068u, 13349114951221999594u,          44464124211u },
  { 14638512997670672834u, 10029144738508991772u,          51723656971u },
  { 12942085665769692438u, 12601907197916268979u,          11543681025u },
  { 14131134357119205086u,  1329580921391066941u,           1683150758u },
  {  8921946894736102919u,  3198179786356761112u,         166072076726u },
  {  5601522560505809989u, 11406753413634654142u,         182173373673u },
  {  8602606493507716808u, 11131812960525182090u,         233618361341u },
  {  8576789731078566487u, 14299636753645227208u,         253603456789u },
  { 17881118138842658549u, 12964114684643663326u,          21775184861u },
  { 11624372674432704923u,  5019257593846306316u,         221702786065u },
  {  6826284072848095635u,  6929086798159998121u,          17272094499u },
  {  1646466632033733563u, 18359765766933703649u,          35375626547u },
  { 17871081657060299180u,  9993076234752063198u,          51995284896u },
  { 15910893124677544709u,  3257189215046584509u,         160541725748u },
  { 11031217459450580944u,  2905234736672690348u,          52176572581u },
  { 13554987390037243094u, 12064985302079670056u,         165157493090u },
  { 15026714590903687870u, 14315096064942799930u,          98654044163u },
  {  4406379654994689200u, 11943971043551974038u,           3776022912u },
  { 13596329092861950242u, 12472773152119929647u,         128647483967u },
  {   284812388227373260u,  7791259796982183085u,          63676150387u },
  {  9285079159392309382u, 16866829442051086686u,         115422365039u },
  { 15046108141952711893u,  3702498393844653053u,         111914352656u },
  { 13795366909944958311u,  2057239613841701716u,          16200712840u },
  { 12909920641180059961u, 17201969976738286226u,         136111523182u },
  {  5333762939889788252u, 18271566505443461640u,         110932520660u },
  {  6411331390005944495u, 18368509115417119804u,         212990503604u },
  {  1447104583224217723u,  7613923684154518587u,         180995758874u },
  { 11940049226167932871u, 17984805084714865232u,          26412751629u },
  {  9772290783590472385u,  4220802739051410373u,          13974958237u },
  { 16351989577831528444u, 17812459042810815760u,         157228810174u },
  {  4376738725895725097u, 10629526089664605307u,         190965615339u },
  { 13851276297739812763u, 17437443267816548473u,         235576227763u },
  { 12641996203470333509u, 12506371893701049304u,         179945285693u },
  {  7707081716407945022u, 15737221540003030739u,          61677971778u },
  {   417638323657040024u,  2358380859011605513u,          66853116489u },
  { 16438047707692449100u, 10042972713837039706u,          73127848082u },
  { 14850108107043306316u, 13424397272769642495u,         146544430641u },
  { 10423290807904720835u,  6867102315755663029u,          49727738034u },
  { 16951162310302339314u,  8690748404825506734u,         178372266362u },
  {  2752437506572397322u,   956229930815387710u,         122471126415u },
  {  3925815842962784589u,  7734449506297687888u,         143051837328u },
  {  5274166674003605291u, 16332184961683848151u,         144419285347u },
  {  5538963350863452832u, 15580777817612768828u,          99885369520u },
  { 16900671634439028736u, 17404245271944696092u,         176844635657u },
  {  2326997710751662080u, 13201420160494469229u,           9943486026u },
  { 12327726161625874432u, 16511717657124068078u,          74715650420u },
  {  5756455743825903616u, 14131292492116594062u,         116895102007u },
  {  3018537650245074944u, 18429136031865875691u,          55766058900u },
  { 16717361816799281152u,  2563978348305862197u,         148999045466u },
  {                    0u, 14239974392147482896u,          90138993544u },
  {                    0u, 11164201396098998272u,         136771950558u },
  {                    0u,  7116971104932986880u,         222605212570u },
  {                    0u, 12437629862867369984u,         154385811776u },
  {                    0u, 16501893821638901760u,          64674245265u },
  {                    0u, 10649324268870959104u,         145894569456u },
  {                    0u,  7205759403792793600u,         240577301025u },
  {                    0u,                    0u,          33390625000u },
  {                    0u,                    0u,         232000000000u },
  { 11997425759292732054u,            136396630u,                    0u },
  { 11491152661270395161u,   136396630650381753u,                    0u },
  { 18181063258234881272u,  3016823727048309817u,              7394076u },
  {  2466921813123869732u, 17405973192644624358u,          28163542341u },
  {  8430880678232179465u,  8937219978302591747u,          69943579697u },
  {  6738034873677997533u, 15178463196824222317u,          49484487665u },
  {  7678250951042929246u, 11979404627460330594u,         241822826138u },
  {  1853560606315563193u,  2006448052689740002u,         154649404826u },
  { 14942676593409905118u, 16330465320863239865u,         154108769766u },
  {  4909892170837638183u, 17136208883957646553u,         230885276298u },
  { 16871149368312132405u,   140455118208931867u,         138928955745u },
  { 16096130589333770811u,  3964972929179372247u,          97007614087u },
  { 12512479187631824282u,  3378050330022776379u,         135214941613u },
  { 16980304980540557310u,  6065353437512901255u,         173183124475u },
  {  8640919162749295366u, 12768753059854699889u,         251328803468u },
  {  7862382415464063513u,  6848720690951013326u,         140692195490u },
  { 14534157903009925344u, 10953228058585475132u,         162371269892u },
  { 12627464554215107944u, 15539127852083296166u,           4593775682u },
  {  2456849734836299173u, 14534853647735598497u,          66842377808u },
  { 18428252197697827913u,  1506909603576368170u,          80787935995u },
  {  7244734215936736255u,  5475702579938239025u,         251081689733u },
  { 14756175050504770087u, 12039747373985783332u,         133296838431u },
  {  6764116534566945922u, 17572399137760898460u,          31652676012u },
  {  1588822142405565521u,   869552790852091236u,         172952601666u },
  { 17053265624843842052u,  4549585778048181804u,          66047138551u },
  { 16996891591759999207u,  4121918231767210357u,         247246633539u },
  {  8565556232370585876u,  1558397953312543179u,          67223449635u },
  { 14464960359145886620u,  6067524298738069781u,          35084480922u },
  {  5813189542048784035u,  5811095224555517056u,         154328921151u },
  {  9739241026882027025u,  6440894514158997188u,          63315020103u },
  { 18175068535675302910u,  4612748874388784257u,          71349161591u },
  { 10562697212061761911u,  9908101430749813367u,         119250057617u },
  {  4264834835660801368u, 15150017990912190499u,         145537119254u },
  { 13019066443690126316u, 17470426264690059239u,          22821284120u },
  {  1828040177823321846u,  9615161096851907726u,          24947073705u },
  { 11240369830376975668u,  9227932132124142224u,         169521238927u },
  {  8886938465302549874u,  4794113194321211621u,         143500247203u },
  {  9985240313589688325u,   391512698859146347u,         163259889397u },
  {   722909126956573766u, 17209658878068655842u,         245021223945u },
  {  5493363474638452381u,  3077364726606876150u,           9932937477u },
  { 12410535279213120491u,  1952989567673965814u,           5166824276u },
  { 10543108918366869098u, 11172860676923186449u,          84105871776u },
  { 12953909016524823995u, 17338078544784947239u,         160605681990u },
  { 16505942145872588169u,  4593380466519703278u,          70939899121u },
  { 12428594380392015797u,   786884753602720052u,         241249007654u },
  {  7528259605829768337u, 17848875822468020539u,          38042657107u },
  { 18147447600042811311u,  2899664567187130618u,          83967589497u },
  { 12021069431116183911u,  2973178834961857409u,         121157191131u },
  { 11819985069665662506u, 11117453141176836727u,         219161176347u },
  { 10401877114068152814u,  7535238370146462002u,          27602678342u },
  {  4611631138117837942u, 10246175467290865448u,          70408486090u },
  { 17200813398607252417u,  1203128834127050464u,         202555446285u },
  { 14100466137553658767u, 14518048959078919658u,          13065221744u },
  { 17887776768825509301u,  1553474987376920024u,         112787025011u },
  { 12632656857970087269u, 14956572380830948369u,         115084214047u },
  {  8923681664054686256u,  7594162606042048292u,          31810797413u },
  {  6213926103737837599u, 14461296147288811288u,         101411680379u },
  {  1233118281776157762u, 18305427728131488265u,         123783948434u },
  {    30716279628678784u, 10253208939347909876u,         146992339225u },
  { 15775734650898546688u,  6446028915490812012u,          25555827570u },
  {   976806005729918976u, 12986063676957432257u,         114349439927u },
  { 12460098853279891456u,  9769714697972762807u,         183703975922u },
  {  5635665595421687808u,    97429465146664592u,         242529617295u },
  {  1805943450575568896u, 16395571728207795868u,         143005281661u },
  { 11529215046068469760u,  6331668478323650406u,         125888805724u },
  {                    0u, 18129911846294207040u,          92343240435u },
  {                    0u,  9890094564876124160u,         243982824490u },
  {                    0u, 12290856656987750400u,          42536143100u },
  {                    0u,  8498454992640802816u,         252666288674u },
  {                    0u,  5341660584200896512u,          34460702168u },
  {                    0u,  9288674231451648000u,         216289572000u },
  {                    0u,  1152921504606846976u,         160503540039u },
  {                    0u,                    0u,          71062500000u },
  {                    0u,                    0u,         160000000000u },
  {  4564018338575530435u,                 2081u,                    0u },
  { 16553437246451512014u,        2081247415929u,                    0u },
  {  4339777136957372927u, 15212079674427582639u,                  112u },
  { 18439463366554654697u, 10179808126814248333u,         112824648491u },
  {  1370067356680643003u,  6066766544199222848u,          43551848504u },
  {  4210124040914115013u,  6625308131806923532u,          56328880073u },
  { 10692225626142609720u,  9122786786400665713u,         201359158673u },
  { 11592856673895384344u, 11932880778639151320u,         145494547262u },
  { 10284479231227406269u,  3884040911779255011u,          62646882763u },
  {  4961071383534266431u, 13441817515637357872u,         203210554279u },
  { 10960611551445686988u, 11628577856022352826u,         167728682387u },
  { 14616396723115619209u, 13296656925520243654u,         147630386468u },
  {  1025604265437492803u,  5020720704545399398u,          36720813216u },
  { 11711588454892179178u, 14121973606499014694u,         160272173814u },
  {  5580373263251565705u,  3642481034345420114u,         246765553723u },
  { 14109334653033148931u,  9845536238569696768u,          59197459292u },
  {  2899414033769399895u, 17655403572195686356u,          92533727588u },
  { 13233457234892808147u,  8377495365136654029u,         100957101345u },
  {  3287946691509034862u, 13713682649609025426u,          33454144933u },
  {  5488480288717445911u,  1367709905452854731u,         165743420226u },
  { 11687233053874362630u,  9981467701727208680u,          66074143702u },
  {  6783772100089274577u,  6277920117543306205u,         214541096448u },
  {  7898291058728402485u,  9344111460418701726u,            340326731u },
  {  4423684977486598491u,  4918507011364617264u,          75506545297u },
  {  2750833684599526706u,  6554777203830755259u,         145266632799u },
  { 15669689830489025709u,  4198262173120265648u,          95355335184u },
  { 15117307274214954517u,  8080325935698446819u,          16227588248u },
  {  8148639818575698175u, 12797633874200091733u,         152438035346u },
  { 13006484426078994901u,  8376502502208665497u,         146693761122u },
  { 10287496057845513526u,  9891973386793349173u,          98454091110u },
  { 14159876032966532430u, 14877430279003795462u,         102536244951u },
  { 15742212196465548019u,  8759933935842067041u,         215806507111u },
  {  2892220461917134150u,  3753418510388703513u,         103474876970u },
  {  7487151560715393883u,  2961383332545305985u,          42203473225u },
  {  7245756744165177933u,  2497674184068629507u,          73160536912u },
  {  3067122860671533987u, 15244544070742305452u,          80135399188u },
  {  8135043905834122525u,    45953573565810823u,          20826408390u },
  { 14730019368921022572u,  3960077421351906445u,         198002491148u },
  {   495969939682055458u,  3173330011013883118u,          12214676227u },
  {  5617761407265775598u, 11026266219545759160u,           3172026564u },
  {  2087044847072781811u,  8886757764964685632u,         196597735089u },
  { 15929674232061203330u, 13952322129918090479u,         177481752103u },
  {  8658086469608285873u,  4127250666614902202u,          39756356898u },
  { 18369871790780313570u, 17649958504065306911u,          34223738706u },
  {  3545648451947416750u, 13269305359002216873u,          82956806167u },
  { 13347376792767929959u, 16236593433831947843u,          23719330484u },
  { 14482164459838203025u, 13580930396682424057u,         180880187493u },
  {  8899577765623565820u,   421976357197961116u,         101736223712u },
  {  7095320096604405719u,  2962130818798626533u,         224022875384u },
  {  2968593824439315788u,  8234383947306356345u,         248160577433u },
  { 12621408323612585636u,  4380469931801381425u,         153446386848u },
  {  3954422936414648259u, 15279887469027055916u,         160237465750u },
  { 17143730087577690191u,  8534542821713755552u,         150828324359u },
  {  5033045529399041876u,  7814613482565088782u,           7462658493u },
  { 15857648521994521781u, 13771954404705323224u,         189423631045u },
  { 16655573486499109541u,  4568173274762548144u,         197746579144u },
  { 16652154439190075858u,  8105292616250821343u,         200247641169u },
  { 18016950600164130638u,  2923678426777275612u,          81439388793u },
  {  2086292996072613910u,  1808633176918384049u,         121158492925u },
  { 17324462585194799521u, 18118642609460438969u,         253098046200u },
  { 11079151463184927232u, 18138164175864360870u,         248982213583u },
  {  5239846817488961536u,  4031433690465792404u,         207983271850u },
  {  2778806963520143360u,  5012226396942308537u,         170218544458u },
  {  6240890740138835968u,  7889712298793536835u,          74271713337u },
  { 17250651344549707776u, 13500762396543628804u,          57427702160u },
  {  4197354852709302272u,   501020624068841347u,         144731877796u },
  {  9223372036854775808u,  8370653768288261750u,         164027160382u },
  {                    0u,   647579990023635200u,          62453774050u },
  {                    0u, 11106569307181154304u,         226035105381u },
  {                    0u, 10797461613892861952u,         101602088328u },
  {                    0u, 17627230675448889344u,         136585331566u },
  {                    0u, 12197735707942322176u,         110955574089u },
  {                    0u, 12871287735024877568u,          73661240577u },
  {                    0u,  4611686018427387904u,           1697753906u },
  {                    0u,                    0u,          50250000000u },
  {                    0u,                    0u,         128000000000u },
  {  5654803392547571318u,             31757315u,                    0u },
  {  2931628102185393332u,    31757315306547506u,                    0u },
  { 15964697617980212305u,  9451803574512021605u,              1721567u },
  {   450380868305846606u,  8662766454758138424u,         223512383298u },
  { 14631133530814566148u,  9207992007314947035u,          66469609510u },
  {    31969822783742095u, 17118602861291201802u,          38499166246u },
  { 10437269029385743245u, 11186560605745599967u,          38928001320u },
  { 15196146496377392433u, 10505549821532796847u,          40606424665u },
  {  4409099735137480938u, 18133667530488679216u,          89569506996u },
  { 10644987914903248118u, 10778135771244330799u,         180983028086u },
  {  3154431617534062973u, 17087985777033767391u,         118584283910u },
  { 11702056331247960454u,  2639185991757283040u,           6926341565u },
  { 15575315065965259114u,  5401720287293896400u,         189143070559u },
  { 10759747609480050226u,  9816495392633895233u,          95292827843u },
  { 12538236653960743718u, 10042051500090034990u,         195532153281u },
  { 17857942663978005403u, 11629689537856384738u,         193544380702u },
  { 11443004154750813211u,  2099086731766010483u,          30630446733u },
  {  4004313188770806737u, 13665537898516458594u,         141113791719u },
  { 17134872954824183228u, 16375672064669490764u,         231740810293u },
  {  2659553912986171234u,  7770550512184564348u,          53887726961u },
  {  9501854300969137926u,  6197048880720627314u,         113421242387u },
  { 14528169966301018150u, 17963594118523106281u,          19335942692u },
  { 18172091996515901778u,  8255454642407818663u,          36973808388u },
  {  1133541705604751035u, 16744201957549498409u,           4447529092u },
  { 18280349987988641497u, 17442505417202859722u,         132907705006u },
  {  9936015874712336386u,  6383975767786687150u,         174945560113u },
  { 15876720399740689614u, 15245442964998335795u,          49346076019u },
  {  8618117825152456982u,  2910016124519524433u,         115826457119u },
  {  8085525680745921564u,  3847913871169988463u,          31157752290u },
  {  8072355444669730953u, 17210451512590059177u,         226208595828u },
  {  9395030504766848294u, 17899408909991454145u,         116932980445u },
  {  3537903114058185903u,  5920601932753251608u,         221970328901u },
  {  2126094743961928691u, 16521781895108979744u,          69320956473u },
  {   289185362555601115u,  3697493405554698771u,          57895647591u },
  { 16909937501450129614u,  2816108280295732065u,         103200441519u },
  { 14449642060360499058u, 14251078772056398988u,         175152661535u },
  { 12433818908498244393u,  4543066550096031417u,          31772552528u },
  { 11884444034578008581u,  3099369389734296977u,          80246280131u },
  {   988625838444140793u,  5243484113636490986u,         195168017151u },
  {  1675370907158909973u,  6823370511605197226u,         255284249843u },
  { 15920186275316934067u, 11396290277624641942u,         243369895656u },
  {  5600921198503757726u, 15934361408437566099u,         232617794133u },
  { 10457357161776341741u, 14939272230935131954u,          85863803462u },
  { 12225356765775740093u,  7500666177940329347u,          70809859570u },
  {  4486633318598164537u,  4806714453065462270u,         242406611928u },
  { 10302486602879381361u, 11557851247268441487u,         216260572512u },
  { 15536428611301239541u, 10655523157206817381u,          96626552371u },
  { 12026126645955462603u, 14769600176490881210u,          51577637067u },
  { 14877968141142123551u, 16688495540925795167u,         203800661629u },
  {   734560801645383190u,   909793965395524173u,         125904685156u },
  { 15648943144911081638u, 12724590949761703756u,         100049320029u },
  { 13664182862003235646u, 10810739657314826395u,          93689801457u },
  {  3895127525902132786u,  2431218615388671301u,         241586051371u },
  {  5249187334214137467u,  4235001167959059286u,          43131796625u },
  { 10642260063359027505u,  6253317787396334247u,         145229579873u },
  {   783598951897779422u,  9534525563070371898u,          97338993036u },
  {  5538576558607624843u,  8392783992374030728u,         140516867666u },
  { 15974581187564609611u, 16356257019231647540u,          82454973731u },
  {  7474269406918257428u, 12896334001521091877u,          35886674469u },
  {  8045286838779138019u,  1427636373320877084u,          37699111667u },
  {  8184246376556341732u, 16116755731295043521u,         243077392322u },
  {  1493267152679331840u, 15945633911163986837u,         194873691078u },
  { 10179074811222818816u,  7510154241072743838u,         198864414546u },
  {  3892499202005008384u,  3571560509790395119u,          82407126277u },
  { 10341173215925108736u,  3576991649007035076u,           5193614683u },
  {  6230307872002015232u, 15509961892750732443u,          91193909105u },
  {  9295429630892703744u, 17789791359353349378u,         113840796718u },
  {                    0u, 18331227331079738314u,          46964386521u },
  {                    0u, 15386712883100476416u,         217993737824u },
  {                    0u, 14082462055028752384u,          96834115376u },
  {                    0u, 12919043128765186048u,          48763411797u },
  {                    0u,  6125373368465096704u,          85700342731u },
  {                    0u, 12335992698065387520u,         203332057155u },
  {                    0u,  2774217370460225536u,          67668735504u },
  {                    0u,                    0u,          16150390625u },
  {                    0u,                    0u,          97000000000u },
  { 10665454627995623288u,                  484u,                    0u },
  { 16803537892767562832u,         484578175453u,                    0u },
  {  8099123106849104444u,  4962829537462579598u,                   26u },
  {  7077413686679401728u,  5711259460785241095u,          26269035528u },
  { 13536636358372449666u, 13845894607204897444u,           8309607995u },
  {  7280632235418610318u, 12116633056637003327u,          59750587450u },
  {  6187823673116858809u,  2965791047992089560u,          58656843994u },
  {  8624343686231740255u, 16021997451315962529u,         218160775854u },
  {   806211610822132771u,  3942052271663803856u,         174868554222u },
  { 18388078233202190882u, 15669876414782439922u,         238213699081u },
  {  7628864426595573600u, 10594415915406145286u,           9849465702u },
  {  4530799784343874981u, 10789820553031921377u,         102574324437u },
  {  8561580552078486438u,  3989990218583987244u,         213584917344u },
  { 13349114951221999594u,  2937341169808224563u,          96216297803u },
  { 10029144738508991772u, 16267436558584536843u,          75159233583u },
  { 12601907197916268979u, 16221580362814625793u,          47881859502u },
  {  1329580921391066941u,  9695437602320209830u,         174879373633u },
  {  3198179786356761112u, 10729753156793715126u,          65525590725u },
  { 11406753413634654142u,  2609241432056861929u,         197581661084u },
  { 11131812960525182090u,  8462663743997037565u,         156141447261u },
  { 14299636753645227208u, 14993422143908194069u,          93458761920u },
  { 12964114684643663326u,  1307443894537745373u,         192812795043u },
  {  5019257593846306316u, 10017257439419829265u,         163070876675u },
  {  6929086798159998121u, 16754772009970777891u,           3543036613u },
  { 18359765766933703649u, 11722573031602862387u,         197908278010u },
  {  9993076234752063198u,  7363764277467092384u,         250635481957u },
  {  3257189215046584509u,  6733958494847390772u,         101399190461u },
  {  2905234736672690348u,  8799796600227451045u,         189365048621u },
  { 12064985302079670056u, 10512023194742249826u,          45477037929u },
  { 14315096064942799930u,  4572542132337197059u,         105569857919u },
  { 11943971043551974038u, 12600500455757416832u,         127247878005u },
  { 12472773152119929647u,  7873789864743195199u,         117683074498u },
  {  7791259796982183085u, 15724851676325671539u,         194426839003u },
  { 16866829442051086686u,  8748017220462413167u,         219852445917u },
  {  3702498393844653053u, 14172589522760466448u,         221474230963u },
  {  2057239613841701716u,  9520545591489413768u,         179768297617u },
  { 17201969976738286226u, 12488551088392570222u,         145516109810u },
  { 18271566505443461640u,  1135798823651241684u,         242677005711u },
  { 18368509115417119804u, 11168725610120161972u,         143061571777u },
  {  7613923684154518587u,  9580104948718508826u,         193605457828u },
  { 17984805084714865232u, 16638722716909738765u,         164519338529u },
  {  4220802739051410373u, 15732724012348272797u,          33901986965u },
  { 17812459042810815760u, 12269722190021214142u,         149852872677u },
  { 10629526089664605307u, 13110655916311972587u,         229665142972u },
  { 17437443267816548473u,  6618112997062866867u,         188710730081u },
  { 12506371893701049304u,  8457936459015989309u,          97358768624u },
  { 15737221540003030739u,  3329167139937134914u,         240458505654u },
  {  2358380859011605513u,  5245511557216705097u,         182180474512u },
  { 10042972713837039706u,  5655931353280440466u,         144284359751u },
  { 13424397272769642495u,   604622132328697393u,          71306608653u },
  {  6867102315755663029u,  8673282619234652338u,          13032776631u },
  {  8690748404825506734u, 16929477433058445690u,         183470179592u },
  {   956229930815387710u, 11036952409253549455u,           8917748810u },
  {  7734449506297687888u, 18199392190170386320u,          74598314388u },
  { 16332184961683848151u,  9683116091880335715u,         148986591027u },
  { 15580777817612768828u,  2993913337608915120u,          51524922775u },
  { 17404245271944696092u,  4490779842162392585u,         151162300367u },
  { 13201420160494469229u,   946849923353644618u,         207243445663u },
  { 16511717657124068078u,  3613491058474899828u,         159051328837u },
  { 14131292492116594062u, 14624054199004410935u,          69195887742u },
  { 18429136031865875691u, 12088470271991908244u,         126792771566u },
  {  2563978348305862197u, 10071980927725011290u,         238655317286u },
  { 14239974392147482896u,  2833441711428854664u,          38546003180u },
  { 11164201396098998272u, 17655572411864340446u,         236153601182u },
  {  7116971104932986880u,  4997642792058747802u,         158957110498u },
  { 12437629862867369984u, 11489200787635734848u,         226270922758u },
  { 16501893821638901760u, 12983586226429536913u,           6622830822u },
  { 10649324268870959104u, 12311150768725063152u,         230703841619u },
  {  7205759403792793600u,  8530052476845967905u,          83667388820u },
  {                    0u,  6282736361499820264u,         148462415071u },
  {                    0u, 11337164765929082880u,         223340587820u },
  {                    0u,  8343856200414134272u,          44614588933u },
  {                    0u, 17889330377156198400u,           5452321350u },
  {                    0u, 17730714064155312128u,          70969782542u },
  {                    0u,  7449235258647511040u,          14961183935u },
  {                    0u,  9943947977234055168u,         191403823852u },
  {                    0u,                    0u,         236539062500u },
  {                    0u,                    0u,         228000000000u },
  {  3016823727048309817u,              7394076u,                    0u },
  { 17405973192644624358u,     7394076163542341u,                    0u },
  {  8937219978302591747u, 12396245121240683569u,               400833u },
  { 15178463196824222317u, 10248996648596888561u,         193672001794u },
  { 11979404627460330594u, 11257495103713935002u,           2555599221u },
  {  2006448052689740002u,  7555396579247433114u,         117610270032u },
  { 16330465320863239865u,  4805022328730367462u,          80409578869u },
  { 17136208883957646553u,  7056637817080232586u,         117260480782u },
  {   140455118208931867u, 10811411483818434913u,          14382541102u },
  {  3964972929179372247u, 16962406704495245447u,          46586087790u },
  {  3378050330022776379u, 18074517319117194669u,         110919533909u },
  {  6065353437512901255u,  3702019776117654523u,          85979821547u },
  { 12768753059854699889u,  3551977551381082764u,         235200686894u },
  {  6848720690951013326u, 16442608985936005282u,          46192553088u },
  { 10953228058585475132u,  3580046275479139588u,         128891355619u },
  { 15539127852083296166u,  8737412692712715330u,         227194074697u },
  { 14534853647735598497u,  3082033243045084752u,          73473656091u },
  {  1506909603576368170u, 16401023756841128699u,          27167077356u },
  {  5475702579938239025u,  7520296082779572869u,         236889101279u },
  { 12039747373985783332u,  9854104766152464159u,         223407676067u },
  { 17572399137760898460u, 14169188802648310188u,         163534192089u },
  {   869552790852091236u,  2018609909210367042u,         217768113264u },
  {  4549585778048181804u,  8270271948267674359u,         112109429062u },
  {  4121918231767210357u, 12320338602894572099u,          70448332340u },
  {  1558397953312543179u, 17538536685990080547u,          52667886893u },
  {  6067524298738069781u, 15833914616956760474u,          45950765978u },
  {  5811095224555517056u,  6137696141415969855u,         154858358231u },
  {  6440894514158997188u,  9757490468419438919u,         215332725174u },
  {  4612748874388784257u,  3566639201356598903u,         182528954618u },
  {  9908101430749813367u,  9760900035773954449u,         250193347898u },
  { 15150017990912190499u,  3873778773990716438u,          58529139451u },
  { 17470426264690059239u,  2295668377270167832u,         251209997968u },
  {  9615161096851907726u,  1791721710912807593u,         144124448432u },
  {  9227932132124142224u, 10571009006922683279u,         176097129428u },
  {  4794113194321211621u,  9840791932778184867u,         212573055546u },
  {   391512698859146347u, 11525464956561274613u,          58533470399u },
  { 17209658878068655842u,  4435781488897895433u,         191624796707u },
  {  3077364726606876150u,  6395563367070996741u,          35240464196u },
  {  1952989567673965814u, 15538690795135662932u,          68346704184u },
  { 11172860676923186449u, 16294558813563371936u,          56842354115u },
  { 17338078544784947239u,  4942096228426070342u,         195883329803u },
  {  4593380466519703278u,  6910116424372647153u,          11267911573u },
  {   786884753602720052u, 17923400669760829478u,         149374598161u },
  { 17848875822468020539u,  4134686917293039955u,          17971629497u },
  {  2899664567187130618u, 16857102463116098681u,         185224141826u },
  {  2973178834961857409u, 11364321508775167451u,           2913825355u },
  { 11117453141176836727u,  7966947780972783899u,          75616061103u },
  {  7535238370146462002u, 11261055695926686278u,         175431889104u },
  { 10246175467290865448u,  9227040437353594058u,         208610463052u },
  {  1203128834127050464u,  7185344074282882061u,          76500198864u },
  { 14518048959078919658u, 14197856148610578032u,         208389518282u },
  {  1553474987376920024u,   885688687260429427u,         202769667324u },
  { 14956572380830948369u, 17407816160380305183u,         252048013279u },
  {  7594162606042048292u, 17812728703806357349u,         223943679604u },
  { 14461296147288811288u, 17120198191964319867u,         116965629957u },
  { 18305427728131488265u, 12091952048375408786u,           5928087803u },
  { 10253208939347909876u,   405056939269888281u,         251655506034u },
  {  6446028915490812012u, 12485440679452408690u,         114021958180u },
  { 12986063676957432257u,  8394369900823444407u,          36676837095u },
  {  9769714697972762807u,  2877421667354294258u,         231455059704u },
  {    97429465146664592u,  2676980714750756239u,         248155985341u },
  { 16395571728207795868u,  6119309228579057021u,         189145119415u },
  {  6331668478323650406u, 18203256146533333852u,         183331728417u },
  { 18129911846294207040u,   351919978865493747u,          33986800493u },
  {  9890094564876124160u,  5190010931882390570u,         109019077620u },
  { 12290856656987750400u,  6982466386088036604u,         244281351056u },
  {  8498454992640802816u,  4707293888784996898u,         144378520261u },
  {  5341660584200896512u,   690306801165964760u,         197255182913u },
  {  9288674231451648000u, 12456770961278956704u,          65037421606u },
  {  1152921504606846976u, 16946092489294063943u,          38675282906u },
  {                    0u, 11098404173866185376u,         218918649514u },
  {                    0u, 15152070965853306880u,         170601645695u },
  {                    0u, 17370091362040414208u,         127821395412u },
  {                    0u, 10141938552171134976u,         212941634539u },
  {                    0u, 10586988556645826560u,         235549795590u },
  {                    0u, 12169852093061922816u,           6573921799u },
  {                    0u, 16717361816799281152u,           7659729003u },
  {                    0u,                    0u,         107906250000u },
  {                    0u,                    0u,          16000000000u },
  { 15212079674427582639u,                  112u,                    0u },
  { 10179808126814248333u,         112824648491u,                    0u },
  {  6066766544199222848u,  2144184049294538808u,                    6u },
  {  6625308131806923532u,  4108002197393276873u,           6116236450u },
  {  9122786786400665713u,  6446230217393892753u,         162222695245u },
  { 11932880778639151320u,  5571068025259989822u,          77349450840u },
  {  3884040911779255011u, 14804812668872528331u,          88302008202u },
  { 13441817515637357872u, 17369928488562523047u,         138802570502u },
  { 11628577856022352826u,  2967474173531035027u,           6941625710u },
  { 13296656925520243654u,  5291425437992807716u,         110160867097u },
  {  5020720704545399398u, 14219547193739388064u,          25286848747u },
  { 14121973606499014694u, 17720313647158217462u,         235770843197u },
  {  3642481034345420114u, 12334850628290578491u,          61960620127u },
  {  9845536238569696768u,  7818499847417334620u,          95668673592u },
  { 17655403572195686356u,   136007040922198372u,          56423841726u },
  {  8377495365136654029u,  8523477092112604449u,         190007372956u },
  { 13713682649609025426u,   367934822655966629u,         156462058619u },
  {  1367709905452854731u, 12964987687054730050u,         123019945786u },
  {  9981467701727208680u, 15267036012420885462u,          58702833390u },
  {  6277920117543306205u, 11142900264750765568u,         238827627680u },
  {  9344111460418701726u, 13680181547777718603u,         160604057833u },
  {  4918507011364617264u, 13001922925761426065u,         233741604127u },
  {  6554777203830755259u,  2397730045956515935u,          31704835654u },
  {  4198262173120265648u,  4482395522588406288u,          70129981206u },
  {  8080325935698446819u,  3255525722490493080u,          22242991148u },
  { 12797633874200091733u,   836222287193822098u,          44176482403u },
  {  8376502502208665497u,   420898743993182306u,          99045331701u },
  {  9891973386793349173u, 11652649973356574054u,         245022816966u },
  { 14877430279003795462u, 15058402726661910231u,         198631691420u },
  {  8759933935842067041u,  9600134495208339559u,         156816317647u },
  {  3753418510388703513u, 14626343323989004842u,         207520424333u },
  {  2961383332545305985u,  6813981265331086665u,         141792895660u },
  {  2497674184068629507u, 10281745288790487888u,         172369386664u },
  { 15244544070742305452u, 17569829347075761940u,         168557374528u },
  {    45953573565810823u,  7654580675237889478u,          64952462357u },
  {  3960077421351906445u, 16194838649686212364u,          21414955649u },
  {  3173330011013883118u,  6495102772252453635u,         129877923962u },
  { 11026266219545759160u, 14935159852819761348u,         122352100226u },
  {  8886757764964685632u, 17381879863441579697u,         130809636637u },
  { 13952322129918090479u,  9062335510435372583u,          29942273595u },
  {  4127250666614902202u,  7569219009130126626u,          59491270192u },
  { 17649958504065306911u, 12652124168176193362u,          48410328184u },
  { 13269305359002216873u,  8940200224697247767u,         120685873025u },
  { 16236593433831947843u,  5600570701927432884u,         129484649225u },
  { 13580930396682424057u,  2018432801986093157u,           9303607546u },
  {   421976357197961116u,  8235849749361824736u,         250109419461u },
  {  2962130818798626533u,  9705097287982370040u,         197446466309u },
  {  8234383947306356345u,  3517483139049842585u,           5526114378u },
  {  4380469931801381425u,   958281614186777760u,          74190683143u },
  { 15279887469027055916u,  7336473432636108950u,           7051948550u },
  {  8534542821713755552u, 12955383920176764423u,           6397711021u },
  {  7814613482565088782u, 10735469126281273789u,         173702312769u },
  { 13771954404705323224u,  8637888232514730693u,          65581970947u },
  {  4568173274762548144u,  6806336737533581000u,           3468260859u },
  {  8105292616250821343u, 16142569672872330321u,         251368972253u },
  {  2923678426777275612u,  8141285259947963513u,         221875090455u },
  {  1808633176918384049u,  5220241098754220797u,          23441339958u },
  { 18118642609460438969u,   154438799943119608u,          54282989837u },
  { 18138164175864360870u,  2226876628677628879u,          13008372144u },
  {  4031433690465792404u, 17219557081221357482u,         176120719223u },
  {  5012226396942308537u, 15401507148161015114u,         119933474059u },
  {  7889712298793536835u,  8842629766613985337u,          11834917375u },
  { 13500762396543628804u,  3180100571546071440u,         255479359920u },
  {   501020624068841347u,  7740848704392475044u,         176172393597u },
  {  8370653768288261750u,  2014314126623495998u,         125419632249u },
  {   647579990023635200u, 11209566016506885858u,         121109196187u },
  { 11106569307181154304u,  7117166613733441125u,         155607671791u },
  { 10797461613892861952u,  4197646860931880328u,         239385822375u },
  { 17627230675448889344u,  5487263271238026094u,         167227554892u },
  { 12197735707942322176u, 18148076225293562697u,          76297465137u },
  { 12871287735024877568u,  9127276943027950849u,          49983809183u },
  {  4611686018427387904u,  9691696125379324722u,         159494790674u },
  {                    0u, 13102362262487705216u,          18525387899u },
  {                    0u,  8929385439893192704u,         123710280481u },
  {                    0u, 11891353410743566336u,          33484062954u },
  {                    0u,  1587423090877399040u,         234644631560u },
  {                    0u,  3489137423026225152u,           8086054378u },
  {                    0u, 13046928120492326912u,         234189146518u },
  {                    0u, 11529215046068469760u,         150707275390u },
  {                    0u,                    0u,         126625000000u },
  {                    0u,                    0u,          64000000000u },
  {  9451803574512021605u,              1721567u,                    0u },
  {  8662766454758138424u,     1721567512383298u,                    0u },
  {  9207992007314947035u,  6674960280855494694u,                93326u },
  { 17118602861291201802u, 16378845781483497510u,         142361850321u },
  { 11186560605745599967u, 17606907750956804392u,         209887899008u },
  { 10505549821532796847u, 13225609159240506969u,         128954472381u },
  { 18133667530488679216u,  2668084873338435252u,         189716961709u },
  { 10778135771244330799u, 14802814305275861366u,         173144637170u },
  { 17087985777033767391u,  8005510553372365574u,         242802462171u },
  {  2639185991757283040u, 12748500143273514429u,         219433979596u },
  {  5401720287293896400u, 10393733905569036127u,         204691097577u },
  {  9816495392633895233u,   603389089974790339u,         233563445444u },
  { 10042051500090034990u,  2033494532597735873u,         196032709788u },
  { 11629689537856384738u,  9204796763694620958u,         156110235959u },
  {  2099086731766010483u,  7826260310402107021u,          55498993032u },
  { 13665537898516458594u, 10122690201685169383u,         136424262421u },
  { 16375672064669490764u,  7438455564568110133u,          21548752135u },
  {  7770550512184564348u,  2805412574380520817u,           7403239484u },
  {  6197048880720627314u,  7250965427231182867u,          60152081720u },
  { 17963594118523106281u,  8136242944826085924u,          56393075623u },
  {  8255454642407818663u, 15357191647956011780u,         167441066613u },
  { 16744201957549498409u,  7369614426695395460u,         117832515027u },
  { 17442505417202859722u, 10886957545142526638u,         211399507598u },
  {  6383975767786687150u,  2030047207417538097u,         142590183151u },
  { 15245442964998335795u, 11557093828502314355u,         239110049079u },
  {  2910016124519524433u, 15201062539664128543u,          55626511311u },
  {  3847913871169988463u,  8846936323343880674u,         207824051251u },
  { 17210451512590059177u,  1485291750116245364u,          51479593379u },
  { 17899408909991454145u,  2076024439668322013u,         163080517827u },
  {  5920601932753251608u,  7029497773682748741u,         195112541510u },
  { 16521781895108979744u, 16333533921668749881u,          70381069837u },
  {  3697493405554698771u,  2065057316131928423u,          13885442648u },
  {  2816108280295732065u,  7800502648925570223u,          88111946981u },
  { 14251078772056398988u, 17011619967093802015u,         229422866095u },
  {  4543066550096031417u,  5368819344429198672u,         175922201766u },
  {  3099369389734296977u, 15598879366754275267u,         166291044279u },
  {  5243484113636490986u, 16393893486035835647u,         183845616944u },
  {  6823370511605197226u, 12042046205096920307u,          48888714746u },
  { 11396290277624641942u, 15437070428008474344u,         250652800632u },
  { 15934361408437566099u, 13704569163204647509u,         120836845264u },
  { 14939272230935131954u, 18192483750856993350u,         208742926182u },
  {  7500666177940329347u,  5152535865317963250u,         102986216520u },
  {  4806714453065462270u, 17512614083933854680u,          72279319528u },
  { 11557851247268441487u, 14481918350603613536u,         232949360711u },
  { 10655523157206817381u, 16124419709964004915u,          71785066366u },
  { 14769600176490881210u, 18088011566435813579u,         126874106543u },
  { 16688495540925795167u, 15008862380698848893u,         175980553071u },
  {   909793965395524173u, 18160498644611827812u,         111813632059u },
  { 12724590949761703756u,  3604680497457231965u,          59984482604u },
  { 10810739657314826395u,  5957615565551495921u,          44195410121u },
  {  2431218615388671301u, 17528455034961565995u,         201322962986u },
  {  4235001167959059286u,  8503772325120113809u,          42950219451u },
  {  6253317787396334247u,  8501492578048509537u,         187460990421u },
  {  9534525563070371898u,  2296237701094386060u,         213460866836u },
  {  8392783992374030728u,  3753593040591076946u,          20124479295u },
  { 16356257019231647540u,  8518075399775653155u,          63203482686u },
  { 12896334001521091877u, 12757855675959554597u,          62461765792u },
  {  1427636373320877084u,   121631169379748595u,         160691604742u },
  { 16116755731295043521u, 16679062494579173314u,           6006593638u },
  { 15945633911163986837u, 10739912744743898054u,         102904173789u },
  {  7510154241072743838u,  9367340677776287570u,         221582211836u },
  {  3571560509790395119u, 12227321512794715397u,         252507804555u },
  {  3576991649007035076u,  7241061891859170651u,         139662844427u },
  { 15509961892750732443u, 13148571323079237489u,          11392538751u },
  { 17789791359353349378u, 12509763434355012654u,         127712785479u },
  { 18331227331079738314u, 11812768946960181977u,          71678155634u },
  { 15386712883100476416u, 14170358803552564832u,         114640371487u },
  { 14082462055028752384u, 18179989524780635952u,          31768176689u },
  { 12919043128765186048u, 17091718978514754901u,          49985539206u },
  {  6125373368465096704u,  7394768384359232459u,         134926543942u },
  { 12335992698065387520u,  6778628272692852803u,          70400871197u },
  {  2774217370460225536u, 18193335045875234320u,          29367470174u },
  {                    0u,  1378519212560967521u,          94986262669u },
  {                    0u,  4677732610631043584u,         141074729676u },
  {                    0u, 17296098591070486528u,         204253580392u },
  {                    0u,  7343735382392963072u,         104937623383u },
  {                    0u, 14525996728454217728u,          87398104692u },
  {                    0u,  9691359370008330240u,         116787455860u },
  {                    0u,  3044433348102455296u,         116525369644u },
  {                    0u,  9223372036854775808u,          44165039062u },
  {                    0u,                    0u,         214500000000u },
  {  4962829537462579598u,                   26u,                    0u },
  {  5711259460785241095u,          26269035528u,                    0u },
  { 13845894607204897444u,  7822291454600056379u,                    1u },
  { 12116633056637003327u,  8201586317771250746u,           1424047269u },
  {  2965791047992089560u,  3278889188817135834u,         165444608885u },
  { 16021997451315962529u,  1710725240251040430u,         117177748939u },
  {  3942052271663803856u,  1850175733663425006u,         203092738601u },
  { 15669876414782439922u,  9147599666163914249u,          41100298227u },
  { 10594415915406145286u, 10221885933644344166u,         243495892371u },
  { 10789820553031921377u, 14901479793736678101u,         147554129546u },
  {  3989990218583987244u,  5181831442059703136u,         138807810838u },
  {  2937341169808224563u,  6396246577759793483u,          22280907645u },
  { 16267436558584536843u, 14167229556464870447u,         125346741221u },
  { 16221580362814625793u,  2969982933326311854u,         229768007053u },
  {  9695437602320209830u,  7892677766222018881u,         141161003097u },
  { 10729753156793715126u,   798698968922663621u,          89427862919u },
  {  2609241432056861929u, 15926812109043458972u,         135043297557u },
  {  8462663743997037565u,  8663842590352697437u,          21863394214u },
  { 14993422143908194069u, 17093523026636671168u,         166469667847u },
  {  1307443894537745373u,   839764004742743203u,           7926641740u },
  { 10017257439419829265u, 16894643909298232323u,          76045523697u },
  { 16754772009970777891u,  9066702926218949317u,         241915860481u },
  { 11722573031602862387u,  9119392417260546810u,           1491506950u },
  {  7363764277467092384u,  9723021096578315109u,           6494363253u },
  {  6733958494847390772u, 14787464248751217597u,         117527086029u },
  {  8799796600227451045u,  3733434565920249133u,         205801630043u },
  { 10512023194742249826u,  6643788868836820841u,          91202389893u },
  {  4572542132337197059u,  4729646697422664063u,         133360160516u },
  { 12600500455757416832u,  4090144564201555829u,           4256394661u },
  {  7873789864743195199u,  2109480737093400002u,         165221727181u },
  { 15724851676325671539u, 16577155033369419739u,         205114355179u },
  {  8748017220462413167u,   745377248603805917u,         235898649375u },
  { 14172589522760466448u, 11305561465807999667u,          31040406981u },
  {  9520545591489413768u,  2211245518782892177u,         197612875715u },
  { 12488551088392570222u, 14170095199249735666u,         195119871859u },
  {  1135798823651241684u, 17849973668116118927u,         115768162399u },
  { 11168725610120161972u,  9020960204585720001u,          95967649011u },
  {  9580104948718508826u, 10807134002871850916u,         243489027232u },
  { 16638722716909738765u,  3925122626254791201u,         160585855908u },
  { 15732724012348272797u, 17208463291312718997u,         164212781323u },
  { 12269722190021214142u,  5145077219589447653u,          11932872664u },
  { 13110655916311972587u, 17602397765035489468u,         216278915194u },
  {  6618112997062866867u, 16422643262490753377u,         122954227894u },
  {  8457936459015989309u,  2902509461400906224u,         182890273275u },
  {  3329167139937134914u,  3422418805967265206u,         251157345353u },
  {  5245511557216705097u,  4228874576277237392u,          73185529695u },
  {  5655931353280440466u,  2553488530807495751u,          95229247750u },
  {   604622132328697393u, 11546099176912486413u,           6138424890u },
  {  8673282619234652338u, 10460791037534167991u,          58625915290u },
  { 16929477433058445690u,  8127117908566000904u,         154567080618u },
  { 11036952409253549455u, 11541304458088287306u,         170440571944u },
  { 18199392190170386320u,  6249718665174839700u,          40625655368u },
  {  9683116091880335715u, 13102508413386290995u,          72338797927u },
  {  2993913337608915120u,  6274675218640661911u,         103710288404u },
  {  4490779842162392585u,  3404497118599817167u,          20340150825u },
  {   946849923353644618u, 11258566093988562335u,          41184558158u },
  {  3613491058474899828u, 16762592482501635397u,          78610328090u },
  { 14624054199004410935u,  5550125446725071998u,          26908701959u },
  { 12088470271991908244u,  6370033225258510318u,           7300872903u },
  { 10071980927725011290u,  1503521728674735398u,         199345320193u },
  {  2833441711428854664u,  4250415082606384364u,           1081506076u },
  { 17655572411864340446u,  6020091901030562974u,          28230415463u },
  {  4997642792058747802u, 16288222967151527138u,         103326349835u },
  { 11489200787635734848u,  6377016228656203782u,          11882986336u },
  { 12983586226429536913u,  8378856515587563750u,          96345698742u },
  { 12311150768725063152u, 15812881490200838483u,         182454218721u },
  {  8530052476845967905u,  4548570371183413652u,         225857218023u },
  {  6282736361499820264u, 16731431495283420383u,         231246578493u },
  { 11337164765929082880u, 14737727629551135532u,          61907012718u },
  {  8343856200414134272u, 12413722258104293893u,         110798933815u },
  { 17889330377156198400u,   800899742400762438u,          55672949232u },
  { 17730714064155312128u,   603197008376033550u,         240043416862u },
  {  7449235258647511040u,  6380777281587743935u,          30032699375u },
  {  9943947977234055168u, 10001440249018225388u,         239345902629u },
  {                    0u,  5505914461980436708u,          37542179162u },
  {                    0u,  1105464290051876864u,          90298476221u },
  {                    0u,  4500443576769970176u,         189059927339u },
  {                    0u,  2843045143185981440u,          43243969535u },
  {                    0u,   660949699682893824u,         255154121786u },
  {                    0u,   276549164618219520u,          58035830155u },
  {                    0u,  4683743612465315840u,         139014991760u },
  {                    0u,                    0u,         144253906250u },
  {                    0u,                    0u,          74000000000u },
  { 12396245121240683569u,               400833u,                    0u },
  { 10248996648596888561u,      400833672001794u,                    0u },
  { 11257495103713935002u,  4370024159708535157u,                21729u },
  {  7555396579247433114u,  7166684413908503888u,         225236899484u },
  {  4805022328730367462u, 10217286283215687029u,         156388506740u },
  {  7056637817080232586u,  4767369911989629198u,         116553880199u },
  { 10811411483818434913u, 14407999214182082862u,         135258439640u },
  { 16962406704495245447u,  8472271297615317358u,         216781059202u },
  { 18074517319117194669u,  6236024012584764757u,         130459282747u },
  {  3702019776117654523u,  1951826556984620523u,          59338055539u },
  {  3551977551381082764u, 12357130551551830830u,         115105808729u },
  { 16442608985936005282u,  8927758011099278464u,          89669881389u },
  {  3580046275479139588u, 10199854049407140323u,          45483974731u },
  {  8737412692712715330u, 17895455027038549577u,          75552935195u },
  {  3082033243045084752u, 16539200343720527131u,          27970114560u },
  { 16401023756841128699u,  3536976106235802604u,            896591847u },
  {  7520296082779572869u, 16980391644793590751u,         231191739858u },
  {  9854104766152464159u, 10090294316609084067u,         210920508875u },
  { 14169188802648310188u, 17603457857266236889u,         203546995950u },
  {  2018609909210367042u, 11164962743035868272u,         238954285362u },
  {  8270271948267674359u,  1585686890718568774u,          50605253843u },
  { 12320338602894572099u, 10882524700472655412u,         211085960258u },
  { 17538536685990080547u,  2194808754940947757u,          66589942846u },
  { 15833914616956760474u,   274100791137209242u,          62118980821u },
  {  6137696141415969855u, 12203404582981010903u,         213014859033u },
  {  9757490468419438919u,   541940706340938166u,          25661547888u },
  {  3566639201356598903u, 10305434016011833594u,         112029378664u },
  {  9760900035773954449u,  7900783531944543546u,         104558658697u },
  {  3873778773990716438u,  8920818625012419323u,         137428302333u },
  {  2295668377270167832u, 12532363335400447632u,         253483598546u },
  {  1791721710912807593u, 13483507182924762800u,         210679380777u },
  { 10571009006922683279u,   415911049779278804u,          41730942389u },
  {  9840791932778184867u,  3441628281170127418u,         181022546583u },
  { 11525464956561274613u, 17830811568183566527u,         151186571042u },
  {  4435781488897895433u, 17897295813176613411u,          34966610231u },
  {  6395563367070996741u,  2086148701331574596u,          55970214350u },
  { 15538690795135662932u, 13015567826878853432u,         206113090347u },
  { 16294558813563371936u, 12944531121587846595u,          43705575345u },
  {  4942096228426070342u,  3534180912913737995u,         177701724438u },
  {  6910116424372647153u,  3447584022400118677u,          22191588331u },
  { 17923400669760829478u,  6375676813770849297u,         235186893904u },
  {  4134686917293039955u, 11580694081479200185u,          80345626132u },
  { 16857102463116098681u,  1872134358882196482u,          20627790684u },
  { 11364321508775167451u, 17602652840520938059u,          92101488606u },
  {  7966947780972783899u, 10331040597716338351u,         222954241722u },
  { 11261055695926686278u,    73785407041056976u,         186560046833u },
  {  9227040437353594058u, 17166209109167902028u,         241003999914u },
  {  7185344074282882061u,  8762475644006589904u,         170930582060u },
  { 14197856148610578032u,  8839001228645872586u,          44475014756u },
  {   885688687260429427u, 13558262784529110268u,         100479163216u },
  { 17407816160380305183u,  5640853896420358111u,          80734994898u },
  { 17812728703806357349u,  8459930353450835572u,         210305791302u },
  { 17120198191964319867u,  7643830211500171269u,          70458613743u },
  { 12091952048375408786u,  1308629115231236347u,         239414372866u },
  {   405056939269888281u,  8957268500971669618u,           2070940926u },
  { 12485440679452408690u,  7645679094277669412u,         254485574498u },
  {  8394369900823444407u,  3821107497040617191u,          98414473094u },
  {  2877421667354294258u,  8847137191985934072u,         134207142652u },
  {  2676980714750756239u,  3531126524756088253u,         252479604268u },
  {  6119309228579057021u,  8726915034124352183u,          44191422752u },
  { 18203256146533333852u, 17611136727168068641u,          32473087011u },
  {   351919978865493747u, 18017743272784259949u,          35954701634u },
  {  5190010931882390570u, 18113575006829616116u,          66976743819u },
  {  6982466386088036604u, 12805550441678740368u,         139981938868u },
  {  4707293888784996898u,  8061966093393027781u,         180694190280u },
  {   690306801165964760u, 11954593141554100801u,         200437040057u },
  { 12456770961278956704u, 14068656112359197734u,         185648059792u },
  { 16946092489294063943u,   895878255770467290u,         144762663376u },
  { 11098404173866185376u, 10319906489512197802u,         208048565657u },
  { 15152070965853306880u, 14551142616794302079u,         153559443251u },
  { 17370091362040414208u, 15933181735739307476u,          51788819021u },
  { 10141938552171134976u, 11524527334398983147u,          77863739512u },
  { 10586988556645826560u, 11828012606225556742u,         120624745878u },
  { 12169852093061922816u,  3556238869349799431u,         150641197848u },
  { 16717361816799281152u,  7403090230513381483u,          24192784095u },
  {                    0u, 10172292854665622800u,         223401322325u },
  {                    0u, 11240746576366182400u,          85551441100u },
  {                    0u, 17021927826892259328u,         204609362092u },
  {                    0u,  9046328496309141504u,         172922760556u },
  {                    0u,  8038996803112140800u,         108490402450u },
  {                    0u, 17098478935265509376u,         146435794889u },
  {                    0u,  7205759403792793600u,         201926910400u },
  {                    0u,                    0u,         192390625000u },
  {                    0u,                    0u,         232000000000u },
  {  2144184049294538808u,                    6u,                    0u },
  {  4108002197393276873u,           6116236450u,                    0u },
  {  6446230217393892753u,  6116236450222695245u,                    0u },
  {  5571068025259989822u,  6240972538554414168u,            331561842u },
  { 14804812668872528331u,  4356262642990299018u,         114338323799u },
  { 17369928488562523047u,  1335108558830511366u,          87236153471u },
  {  2967474173531035027u, 18435704923261947246u,         127072376379u },
  {  5291425437992807716u,  8395401931972636441u,          59999401566u },
  { 14219547193739388064u, 12482665946362458347u,          94455115650u },
  { 17720313647158217462u, 16101242875289374781u,         130676686676u },
  { 12334850628290578491u,  4708983440241068127u,          84872850125u },
  {  7818499847417334620u, 14856666972541426744u,         205255274503u },
  {   136007040922198372u,  6938795288315789246u,           7805381530u },
  {  8523477092112604449u,  5556307628265073820u,         154376152846u },
  {   367934822655966629u,  1441404248927865979u,          14301208040u },
  { 12964987687054730050u, 16710378912353838906u,         232078138680u },
  { 15267036012420885462u, 18289940136919312110u,          56905871455u },
  { 11142900264750765568u, 10217414145292657824u,          95991499641u },
  { 13680181547777718603u, 12461165826430955753u,         121553887130u },
  { 13001922925761426065u,   662762458988270879u,         154675521153u },
  {  2397730045956515935u, 16488546856395302470u,         129035928424u },
  {  4482395522588406288u,  2612816787977180950u,         104893845916u },
  {  3255525722490493080u, 16446616379327454252u,         156141641081u },
  {   836222287193822098u,  7842178508581740643u,         121891572860u },
  {   420898743993182306u, 14779029861369369333u,         124425125348u },
  { 11652649973356574054u,  2697664446153849542u,         228801172814u },
  { 15058402726661910231u, 12135106444393649308u,          78146240682u },
  {  9600134495208339559u,  9550285041205189839u,         170657845438u },
  { 14626343323989004842u,  8790318168586740109u,         190517721989u },
  {  6813981265331086665u, 14038474217155846828u,         133476524102u },
  { 10281745288790487888u,  4263144264274812072u,          70761027212u },
  { 17569829347075761940u, 11940456333341715520u,         140231105513u },
  {  7654580675237889478u, 15751110736831573013u,         233647293434u },
  { 16194838649686212364u, 18384528705472318081u,         250853869423u },
  {  6495102772252453635u,  2393654818032310394u,         111996627298u },
  { 14935159852819761348u, 12812209822018626434u,          98129760287u },
  { 17381879863441579697u,  3110778569433458461u,          31694551286u },
  {  9062335510435372583u,  2860264756226872891u,         246168635644u },
  {  7569219009130126626u,  2384146980060315184u,         252155055263u },
  { 12652124168176193362u, 14117430062880324728u,         159129244866u },
  {  8940200224697247767u,  3769610173216737153u,         194765307417u },
  {  5600570701927432884u, 17731974340232672009u,          25204350976u },
  {  2018432801986093157u,  1971479303384713466u,            961252255u },
  {  8235849749361824736u,  3449462959779012549u,         159106874107u },
  {  9705097287982370040u, 13743454852043766533u,         251186995761u },
  {  3517483139049842585u,  7417711187131879498u,          49745034180u },
  {   958281614186777760u,  3650992383501007879u,         196402114929u },
  {  7336473432636108950u, 12838770342493958662u,         113197920693u },
  { 12955383920176764423u, 16025068246546338477u,         181695991134u },
  { 10735469126281273789u,  6579965938260177729u,          94868720690u },
  {  8637888232514730693u,  4742939430174291459u,          50356700668u },
  {  6806336737533581000u, 13062256857527449083u,         252257115261u },
  { 16142569672872330321u,  2301174570202439645u,         125708106363u },
  {  8141285259947963513u,  7638687886069412887u,         123124746923u },
  {  5220241098754220797u,   936322449610274358u,         171414094100u },
  {   154438799943119608u, 12926010544311283981u,          20050758141u },
  {  2226876628677628879u, 12647854908989899184u,         253700720435u },
  { 17219557081221357482u,  8862093163358513015u,          51685641588u },
  { 15401507148161015114u,   444784343917630731u,         116480415033u },
  {  8842629766613985337u, 11033952249213387263u,          57024111807u },
  {  3180100571546071440u, 18168634046363183536u,         191598151749u },
  {  7740848704392475044u,  3837904761417065597u,          69984923625u },
  {  2014314126623495998u,   111459007020906105u,         233208053234u },
  { 11209566016506885858u, 16191761957496794523u,         242006042204u },
  {  7117166613733441125u,  9856250800340378607u,          92877757174u },
  {  4197646860931880328u,  9491800102275105959u,         246534308426u },
  {  5487263271238026094u, 10777328578953608268u,          74514551514u },
  { 18148076225293562697u, 17424440628313779505u,         218584240152u },
  {  9127276943027950849u,  3285814872419755679u,          24944580819u },
  {  9691696125379324722u,  2824823424107240978u,         211178124381u },
  { 13102362262487705216u, 12271707680713669755u,          93153133984u },
  {  8929385439893192704u,  6951481875178001185u,         160665250606u },
  { 11891353410743566336u, 10202522487003824362u,          46376840587u },
  {  1587423090877399040u,  4834668463880990728u,         139553079852u },
  {  3489137423026225152u, 10871520987687904746u,          44262087902u },
  { 13046928120492326912u, 12057698794225322390u,         222589346333u },
  { 11529215046068469760u,  7263351819222681214u,          29653649161u },
  {                    0u,  1778055686910650944u,           9393747091u },
  {                    0u, 17108187120491986944u,         147096388591u },
  {                    0u,  3067636961549221888u,         239927436682u },
  {                    0u, 16702141595163557888u,         138166296932u },
  {                    0u,  2432053749942845440u,         100905424910u },
  {                    0u, 17791470327927144448u,          14131841897u },
  {                    0u,  1152921504606846976u,         105964477539u },
  {                    0u,                    0u,          99062500000u },
  {                    0u,                    0u,         160000000000u },
  {  6674960280855494694u,                93326u,                    0u },
  { 16378845781483497510u,       93326361850321u,                    0u },
  { 17606907750956804392u,  4283581425266273664u,                 5059u },
  { 13225609159240506969u,  6725911039793895357u,         195232213414u },
  {  2668084873338435252u,  1188689198788975021u,         166364612368u },
  { 14802814305275861366u, 10825527435847761650u,          16064438970u },
  {  8005510553372365574u,  3917696829526085083u,         186586853018u },
  { 12748500143273514429u, 12646861173976387276u,         154212378770u },
  { 10393733905569036127u, 18398576063183996905u,         146685587717u },
  {   603389089974790339u, 16919251228485834948u,           5997388806u },
  {  2033494532597735873u, 17296019588687185052u,           6917194446u },
  {  9204796763694620958u, 12365301604512770359u,         206937619100u },
  {  7826260310402107021u,  2814271599679204744u,         156670324343u },
  { 10122690201685169383u,  2154994415780170517u,         119152561969u },
  {  7438455564568110133u,  6717373824370072839u,          49116822481u },
  {  2805412574380520817u, 12709155755801344060u,         209364149564u },
  {  7250965427231182867u,   826847911966403896u,          60688964714u },
  {  8136242944826085924u,  2277322703890025383u,         106044823515u },
  { 15357191647956011780u,  2774508958389496437u,         219123453911u },
  {  7369614426695395460u,   245697774950120915u,         215150406432u },
  { 10886957545142526638u,  1268929063431863950u,          32013319303u },
  {  2030047207417538097u,  6735665673159411439u,         135068788782u },
  { 11557093828502314355u, 14734771742997073207u,          46365141167u },
  { 15201062539664128543u, 13683287077957612495u,         175798773576u },
  {  8846936323343880674u, 15370263741354826803u,          72741772478u },
  {  1485291750116245364u,    48035913070297507u,         190833223667u },
  {  2076024439668322013u,  1206547475966802115u,         243002604032u },
  {  7029497773682748741u, 13512340386605768006u,             65407069u },
  { 16333533921668749881u,  2325760467700278797u,          93732505440u },
  {  2065057316131928423u, 10848110652847753816u,          96126079727u },
  {  7800502648925570223u, 15846378960784301285u,         239588077256u },
  { 17011619967093802015u, 14121839924449844911u,         200859033924u },
  {  5368819344429198672u,  5147613424753296550u,          68765546476u },
  { 15598879366754275267u, 16817040482828810167u,         236279052682u },
  { 16393893486035835647u,  5773528746119363888u,         138911653591u },
  { 12042046205096920307u,  8716201595536184826u,         215312983620u },
  { 15437070428008474344u,  5259122109038474872u,          68472506235u },
  { 13704569163204647509u, 14744540084230155984u,         123285097580u },
  { 18192483750856993350u, 10719345477982635878u,         108799303119u },
  {  5152535865317963250u, 13698037261310555208u,         207581096882u },
  { 17512614083933854680u, 16141171632951976936u,         178742572087u },
  { 14481918350603613536u, 10060790174955808839u,          55875014667u },
  { 16124419709964004915u,  4250043307981877118u,          11545396528u },
  { 18088011566435813579u,  7075646198054337199u,          48230395309u },
  { 15008862380698848893u, 18141738384245531503u,         173383571548u },
  { 18160498644611827812u,  8174370508376809531u,          92983465608u },
  {  3604680497457231965u,  3581964982731575596u,         136443133513u },
  {  5957615565551495921u, 14798509948722114761u,          73194178710u },
  { 17528455034961565995u, 14713923334885122090u,         150802228831u },
  {  8503772325120113809u,  5042978054260414139u,          95797643382u },
  {  8501492578048509537u,  2052996319372883413u,         118273380388u },
  {  2296237701094386060u,  8825683007899981588u,          36111293153u },
  {  3753593040591076946u,  9992196755378745151u,         225478441234u },
  {  8518075399775653155u,  9301073417573669950u,          18541678071u },
  { 12757855675959554597u,  5331614769144850592u,         247504212200u },
  {   121631169379748595u, 14354009428310052102u,         232289027415u },
  { 16679062494579173314u,  5581221063029119078u,          87778132410u },
  { 10739912744743898054u,  1529260335339476189u,         186302558600u },
  {  9367340677776287570u, 16483061525949201148u,         136082901368u },
  { 12227321512794715397u, 14431217812333089675u,         120893548555u },
  {  7241061891859170651u,  3452349151135392267u,          11782317885u },
  { 13148571323079237489u,  9075317899834447999u,          61187152222u },
  { 12509763434355012654u,  2764331337978901575u,          94491973969u },
  { 11812768946960181977u,  1942890683708857202u,          81149854702u },
  { 14170358803552564832u,   165089169728028447u,         238105324315u },
  { 18179989524780635952u, 15193620741871233073u,          27008949501u },
  { 17091718978514754901u, 14995000835194145926u,         253823647830u },
  {  7394768384359232459u,  1788823614552255558u,          86812880624u },
  {  6778628272692852803u,  8384901184618498845u,         240096972322u },
  { 18193335045875234320u,   405511217862281310u,          34454546404u },
  {  1378519212560967521u,  3111530463755196557u,         228021982807u },
  {  4677732610631043584u,  7893558450035460812u,          87168676404u },
  { 17296098591070486528u,   156573858237402216u,          52427910661u },
  {  7343735382392963072u, 15915324019419451223u,           5008487885u },
  { 14525996728454217728u, 16293363012778802804u,         205862771443u },
  {  9691359370008330240u, 14342105318291351412u,         243883264978u },
  {  3044433348102455296u,  3788398842525387052u,         210777487087u },
  {  9223372036854775808u, 14118764407048307670u,         239205369512u },
  {                    0u,  2705021334614720768u,         168765379752u },
  {                    0u,  7017988973805568000u,         168146639500u },
  {                    0u, 10956732053634154496u,         140380445944u },
  {                    0u, 14657517938546835456u,         248593965634u },
  {                    0u, 11268868284797157376u,          66794585639u },
  {                    0u, 14600669991935148032u,          39610886573u },
  {                    0u,  4611686018427387904u,         173791503906u },
  {                    0u,                    0u,          34250000000u },
  {                    0u,                    0u,         128000000000u },
  {  8201586317771250746u,           1424047269u,                    0u },
  {  3278889188817135834u,  1424047269444608885u,                    0u },
  {  1710725240251040430u,  3001188830946823627u,             77197757u },
  {  1850175733663425006u,  9732296932705387049u,         189162694772u },
  {  9147599666163914249u, 16337535782679529459u,         116527588873u },
  { 10221885933644344166u,  7969742269895046547u,           9885659589u },
  { 14901479793736678101u,  2923592083903829642u,         197432040594u },
  {  5181831442059703136u,  8144196241160608534u,         146158488244u },
  {  6396246577759793483u, 16431078457793424253u,         180441497762u },
  { 14167229556464870447u,   202362949592775653u,         162890730548u },
  {  2969982933326311854u,  8835125248522947981u,          52010970117u },
  {  7892677766222018881u,  7959873808777345113u,           5478953099u },
  {   798698968922663621u, 14929747122315126151u,         139431505623u },
  { 15926812109043458972u,  4310328817360515349u,         215809343213u },
  {  8663842590352697437u,  7294899422760201126u,         237233663393u },
  { 17093523026636671168u,  2047461597291187207u,         161395457290u },
  {   839764004742743203u, 10942374468813517900u,          10110993115u },
  { 16894643909298232323u, 10364795403063433969u,         219593187308u },
  {  9066702926218949317u, 12330859528790939137u,         236561876684u },
  {  9119392417260546810u,  8973160144879916806u,         204668457234u },
  {  9723021096578315109u,  2895354388547509877u,          18486435986u },
  { 14787464248751217597u, 16766844772497556429u,         146156957475u },
  {  3733434565920249133u,  7442407174620948827u,          35908932476u },
  {  6643788868836820841u,  6683013428676659077u,         124403453701u },
  {  4729646697422664063u, 16713703375071907588u,           5362286883u },
  {  4090144564201555829u,  8791044883080637861u,          35906051675u },
  {  2109480737093400002u,   602844107089214413u,          91476563498u },
  { 16577155033369419739u,  9754832281172880875u,          42032680244u },
  {   745377248603805917u, 10587846778003503903u,          52528810517u },
  { 11305561465807999667u, 17206244172922947013u,          21573968323u },
  {  2211245518782892177u, 11620628420699303875u,         195932752365u },
  { 14170095199249735666u, 17864732368219338611u,         237629955528u },
  { 17849973668116118927u,  4146383014621345887u,         200968449082u },
  {  9020960204585720001u, 11445705075042688243u,          58224775873u },
  { 10807134002871850916u,  7369147888966546592u,         193620472915u },
  {  3925122626254791201u,  9762476865090597796u,          83399482307u },
  { 17208463291312718997u,  5507001428194242827u,         195529224931u },
  {  5145077219589447653u, 11371471148365328344u,         227298535145u },
  { 17602397765035489468u,  3148788104946538618u,         233616448686u },
  { 16422643262490753377u,  3762722308424507574u,         174170696145u },
  {  2902509461400906224u,  1156171244825745915u,         209203977585u },
  {  3422418805967265206u, 14208921674868257865u,         113062676168u },
  {  4228874576277237392u,  7903080886897905503u,         200770267187u },
  {  2553488530807495751u,  6367240794154270982u,          51428426873u },
  { 11546099176912486413u,  1623672396662369850u,         121345168815u },
  { 10460791037534167991u, 18323231215381674394u,         175088019456u },
  {  8127117908566000904u,  9842279843006544554u,            993304354u },
  { 11541304458088287306u,  7376839231308610600u,          34533551059u },
  {  6249718665174839700u,   609751749293657672u,         211399899256u },
  { 13102508413386290995u, 10386457966860989799u,         120033054708u },
  {  6274675218640661911u, 11160336020836149780u,         244563051014u },
  {  3404497118599817167u, 17947559933847409193u,           6605003027u },
  { 11258566093988562335u, 10229787001712704590u,          19972939173u },
  { 16762592482501635397u, 10441677090043619866u,         165554557864u },
  {  5550125446725071998u,  4996681336392922375u,         168566044449u },
  {  6370033225258510318u,   124497102381021895u,          33270870638u },
  {  1503521728674735398u,  8180812057779384577u,         110006749001u },
  {  4250415082606384364u,  5294232873532946716u,          73443482710u },
  {  6020091901030562974u,  2885620189169448039u,          86287000939u },
  { 16288222967151527138u, 16662526875008170507u,         107156429783u },
  {  6377016228656203782u, 15663095032402672480u,         215903277391u },
  {  8378856515587563750u,  1824281504410546614u,          79849098083u },
  { 15812881490200838483u,  9506565509584809953u,          99098894498u },
  {  4548570371183413652u, 16941136942345070055u,         162515351948u },
  { 16731431495283420383u, 15924115693705937725u,         140918380873u },
  { 14737727629551135532u,  9247807690406628462u,          73863248041u },
  { 12413722258104293893u,  7993916633864834871u,         169501324659u },
  {   800899742400762438u,  1018504409177639408u,         115433351089u },
  {   603197008376033550u, 12097800686634130718u,         177055213234u },
  {  6380777281587743935u,  6221488888422637551u,         178655823089u },
  { 10001440249018225388u,  8229322865256080421u,         241337267588u },
  {  5505914461980436708u,  7927745108183101786u,         132446112486u },
  {  1105464290051876864u,  8488683721235326653u,         230429763923u },
  {  4500443576769970176u, 11165516518170922283u,          83460172466u },
  {  2843045143185981440u,  5463648141113596927u,         178605283863u },
  {   660949699682893824u,  3958440403860778042u,          23296184959u },
  {   276549164618219520u,  5091534813990256011u,         127214587484u },
  {  4683743612465315840u,  6100166970623291280u,          92276012655u },
  {                    0u,  1913011027739012426u,         111330690714u },
  {                    0u, 11310957650604221440u,         154103704535u },
  {                    0u, 16303817257009020928u,         215613168242u },
  {                    0u,  9090406322154766336u,         114883831704u },
  {                    0u,  3003279315069566976u,         152492791914u },
  {                    0u, 16582887146675765248u,         106162808097u },
  {                    0u,  9691746398101307392u,          33898960113u },
  {                    0u,                    0u,         241525390625u },
  {                    0u,                    0u,          33000000000u },
};

 
 
}



 
  
 
  

 
  
 
  
 
  
 
  





extern "C" {
       __declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void* _First, void* _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void* _First, void* _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void* _First, void* _Last) noexcept;
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void* _First, void* _Last) noexcept;
__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(
    void* _First1, void* _Last1, void* _First2) noexcept;
}

namespace std {

 template <class _To, class _From,
    enable_if_t<conjunction_v<bool_constant<sizeof(_To) == sizeof(_From)>, is_trivially_copyable<_To>,
                    is_trivially_copyable<_From>>,
        int> = 0>
 constexpr _To _Bit_cast(const _From& _Val) noexcept {
    return __builtin_bit_cast(_To, _Val);
}

 template <class _Ty>
struct _Get_first_parameter;

template <template <class, class...> class _Ty, class _First, class... _Rest>
struct _Get_first_parameter<_Ty<_First, _Rest...>> {      using type = _First;
};

 template <class _Newfirst, class _Ty>
struct _Replace_first_parameter;

template <class _Newfirst, template <class, class...> class _Ty, class _First, class... _Rest>
struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...>> {      using type = _Ty<_Newfirst, _Rest...>;
};

 template <class _Ty, class = void>
struct _Get_element_type {
    using type = typename _Get_first_parameter<_Ty>::type;
};

template <class _Ty>
struct _Get_element_type<_Ty, void_t<typename _Ty::element_type>> {
    using type = typename _Ty::element_type;
};

 template <class _Ty, class = void>
struct _Get_ptr_difference_type {
    using type = ptrdiff_t;
};

template <class _Ty>
struct _Get_ptr_difference_type<_Ty, void_t<typename _Ty::difference_type>> {
    using type = typename _Ty::difference_type;
};

 template <class _Ty, class _Other, class = void>
struct _Get_rebind_alias {
    using type = typename _Replace_first_parameter<_Other, _Ty>::type;
};

template <class _Ty, class _Other>
struct _Get_rebind_alias<_Ty, _Other, void_t<typename _Ty::template rebind<_Other>>> {
    using type = typename _Ty::template rebind<_Other>;
};

 template <class _Iter>
 constexpr void* _Voidify_iter(_Iter _It) noexcept {
    if constexpr (is_pointer_v<_Iter>) {
        return const_cast<void*>(static_cast<const volatile void*>(_It));
    } else {
        return const_cast<void*>(static_cast<const volatile void*>(::std:: addressof(*_It)));
    }
}

 template <class _Ty, class... _Types,
    class = void_t<decltype(::new (::std:: declval<void*>()) _Ty(::std:: declval<_Types>()...))>>
constexpr _Ty* construct_at(_Ty* const _Location, _Types&&... _Args) noexcept(
    noexcept(::new (_Voidify_iter(_Location)) _Ty(::std:: forward<_Types>(_Args)...)))   {
    return ::new (_Voidify_iter(_Location)) _Ty(::std:: forward<_Types>(_Args)...);
}

 template <class _Ty, class... _Types>
constexpr void _Construct_in_place(_Ty& _Obj, _Types&&... _Args) noexcept(
    is_nothrow_constructible_v<_Ty, _Types...>) {
    if (::std:: is_constant_evaluated()) {
        ::std:: construct_at(::std:: addressof(_Obj), ::std:: forward<_Types>(_Args)...);
    } else
    {
        ::new (_Voidify_iter(::std:: addressof(_Obj))) _Ty(::std:: forward<_Types>(_Args)...);
    }
}

 template <class _Ty>
void _Default_construct_in_place(_Ty& _Obj) noexcept(is_nothrow_default_constructible_v<_Ty>) {
    ::new (_Voidify_iter(::std:: addressof(_Obj))) _Ty;
}

 template <class _Ty>
struct pointer_traits {
    using pointer         = _Ty;
    using element_type    = typename _Get_element_type<_Ty>::type;
    using difference_type = typename _Get_ptr_difference_type<_Ty>::type;

    template <class _Other>
    using rebind = typename _Get_rebind_alias<_Ty, _Other>::type;

    using _Reftype = conditional_t<is_void_v<element_type>, char, element_type>&;

     static pointer pointer_to(_Reftype _Val) noexcept(noexcept(_Ty::pointer_to(_Val)))   {
        return _Ty::pointer_to(_Val);
    }
};

template <class _Ty>
struct pointer_traits<_Ty*> {
    using pointer         = _Ty*;
    using element_type    = _Ty;
    using difference_type = ptrdiff_t;

    template <class _Other>
    using rebind = _Other*;

    using _Reftype = conditional_t<is_void_v<_Ty>, char, _Ty>&;

     static constexpr pointer pointer_to(_Reftype _Val) noexcept {
        return ::std:: addressof(_Val);
    }
};

 template <class _Ty, class = void>
inline constexpr bool _Has_to_address_v = false;  
template <class _Ty>
inline constexpr bool
    _Has_to_address_v<_Ty, void_t<decltype(pointer_traits<_Ty>::to_address(::std:: declval<const _Ty&>()))>> = true;

template <class _Ty>
 constexpr _Ty* to_address(_Ty* const _Val) noexcept {
    static_assert(!is_function_v<_Ty>,
        "N4810 20.10.4 [pointer.conversion]/2: The program is ill-formed if T is a function type.");
    return _Val;
}

template <class _Ptr>
 constexpr auto to_address(const _Ptr& _Val) noexcept {
    if constexpr (_Has_to_address_v<_Ptr>) {
        return pointer_traits<_Ptr>::to_address(_Val);
    } else {
        return ::std:: to_address(_Val.operator->());      }
}

 struct identity {
    template <class _Ty>
     constexpr _Ty&& operator()(_Ty&& _Left) const noexcept {
        return ::std:: forward<_Ty>(_Left);
    }

    using is_transparent = int;
};

  template <class _Fx>
struct _Ref_fn {      template <class... _Args>
    constexpr decltype(auto) operator()(_Args&&... _Vals) {          if constexpr (is_member_pointer_v<_Fx>) {
            return ::std:: invoke(_Fn, ::std:: forward<_Args>(_Vals)...);
        } else {
            return _Fn(::std:: forward<_Args>(_Vals)...);
        }
    }

    _Fx& _Fn;
};

template <class _Fn>
inline constexpr bool _Pass_functor_by_value_v = conjunction_v<bool_constant<sizeof(_Fn) <= sizeof(void*)>,
    is_trivially_copy_constructible<_Fn>, is_trivially_destructible<_Fn>>;

template <class _Fn, enable_if_t<_Pass_functor_by_value_v<_Fn>, int> = 0>  constexpr _Fn _Pass_fn(_Fn _Val) {      return _Val;
}

template <class _Fn, enable_if_t<!_Pass_functor_by_value_v<_Fn>, int> = 0>
constexpr _Ref_fn<_Fn> _Pass_fn(_Fn& _Val) {      return {_Val};
}

 struct _Unused_parameter {      constexpr _Unused_parameter() noexcept = default;
    template <class _Ty>
    constexpr _Unused_parameter(_Ty&&) noexcept {}
};

 using _Any_tag = _Unused_parameter;  
 template <class _Ty>
using _Algorithm_int_t = conditional_t<is_integral_v<_Ty>, _Ty, ptrdiff_t>;

  struct input_iterator_tag {};

struct output_iterator_tag {};

struct forward_iterator_tag : input_iterator_tag {};

struct bidirectional_iterator_tag : forward_iterator_tag {};

struct random_access_iterator_tag : bidirectional_iterator_tag {};

struct contiguous_iterator_tag : random_access_iterator_tag {};

 template <class _Ty>
using _With_reference = _Ty&;

  template <class _Ty>
concept _Can_reference = requires { typename _With_reference<_Ty>; };

 template <class _Ty>
concept _Dereferenceable = requires(_Ty& __t) {
    { *__t } -> _Can_reference;
};
 
 template <class _Ty>
concept _Has_member_iterator_concept = requires {
    typename _Ty::iterator_concept;
};

 template <class _Ty>
concept _Has_member_iterator_category = requires {
    typename _Ty::iterator_category;
};

 template <class _Ty>
concept _Has_member_value_type = requires {
    typename _Ty::value_type;
};

 template <class _Ty>
concept _Has_member_element_type = requires {
    typename _Ty::element_type;
};

 template <class _Ty>
concept _Has_member_difference_type = requires {
    typename _Ty::difference_type;
};

 template <class _Ty>
concept _Has_member_pointer = requires {
    typename _Ty::pointer;
};

 template <class _Ty>
concept _Has_member_reference = requires {
    typename _Ty::reference;
};

 template <class>
struct incrementable_traits {};

 template <class _Ty>
    requires is_object_v<_Ty>
struct incrementable_traits<_Ty*> {
    using difference_type = ptrdiff_t;
};
 
template <class _Ty>
struct incrementable_traits<const _Ty> : incrementable_traits<_Ty> {};

template <_Has_member_difference_type _Ty>
struct incrementable_traits<_Ty> {
    using difference_type = typename _Ty::difference_type;
};

 template <class _Ty>
concept _Can_difference = requires(const _Ty& __a, const _Ty& __b) {
    { __a - __b } -> integral;
};

template <class _Ty>
    requires (!_Has_member_difference_type<_Ty> && _Can_difference<_Ty>)
struct incrementable_traits<_Ty> {
    using difference_type = make_signed_t<decltype(::std:: declval<_Ty>() - ::std:: declval<_Ty>())>;
};
 
 template <class _Ty>
concept _Is_from_primary = _Same_impl<typename _Ty::_From_primary, _Ty>;

template <class>
struct iterator_traits;

template <class _Ty>
using iter_difference_t = typename conditional_t<_Is_from_primary<iterator_traits<remove_cvref_t<_Ty>>>,
    incrementable_traits<remove_cvref_t<_Ty>>, iterator_traits<remove_cvref_t<_Ty>>>::difference_type;

 template <class>
struct _Cond_value_type {};

 template <class _Ty>
    requires is_object_v<_Ty>
struct _Cond_value_type<_Ty> {
    using value_type = remove_cv_t<_Ty>;
};
 
template <class>
struct indirectly_readable_traits {};

template <class _Ty>
struct indirectly_readable_traits<_Ty*> : _Cond_value_type<_Ty> {};

 template <class _Ty>
    requires is_array_v<_Ty>
struct indirectly_readable_traits<_Ty> {
    using value_type = remove_cv_t<remove_extent_t<_Ty>>;
};
 
template <class _Ty>
struct indirectly_readable_traits<const _Ty> : indirectly_readable_traits<_Ty> {};

template <_Has_member_value_type _Ty>
struct indirectly_readable_traits<_Ty> : _Cond_value_type<typename _Ty::value_type> {};

template <_Has_member_element_type _Ty>
struct indirectly_readable_traits<_Ty> : _Cond_value_type<typename _Ty::element_type> {};

 template <_Has_member_value_type _Ty>
    requires _Has_member_element_type<_Ty>
        && same_as<remove_cv_t<typename _Ty::value_type>, remove_cv_t<typename _Ty::element_type>>
struct indirectly_readable_traits<_Ty> : _Cond_value_type<typename _Ty::value_type> {};
 
 template <class _Ty>
using iter_value_t = typename conditional_t<_Is_from_primary<iterator_traits<remove_cvref_t<_Ty>>>,
    indirectly_readable_traits<remove_cvref_t<_Ty>>, iterator_traits<remove_cvref_t<_Ty>>>::value_type;

 template <_Dereferenceable _Ty>
using iter_reference_t = decltype(*::std:: declval<_Ty&>());

 template <class>
struct _Iterator_traits_base {};

 template <class _It>
concept _Has_iter_types = _Has_member_difference_type<_It> && _Has_member_value_type<_It> && _Has_member_reference<_It>
    && _Has_member_iterator_category<_It>;
 
template <bool _Has_member_typedef>
struct _Old_iter_traits_pointer {
    template <class _It>
    using _Apply = typename _It::pointer;
};

template <>
struct _Old_iter_traits_pointer<false> {
    template <class>
    using _Apply = void;
};

template <_Has_iter_types _It>
struct _Iterator_traits_base<_It> {
    using iterator_category = typename _It::iterator_category;
    using difference_type   = typename _It::difference_type;
    using value_type        = typename _It::value_type;
    using pointer           = typename _Old_iter_traits_pointer<_Has_member_pointer<_It>>::template _Apply<_It>;
    using reference         = typename _It::reference;
};

template <bool _Has_member_typedef>
struct _Iter_traits_difference {
    template <class _It>
    using _Apply = typename incrementable_traits<_It>::difference_type;
};

template <>
struct _Iter_traits_difference<false> {
    template <class>
    using _Apply = void;
};

 template <class _It>
concept _Cpp17_iterator =
    requires(_It __i) {
        { *__i } -> _Can_reference;
        { ++__i } -> same_as<_It&>;
        { *__i++ } -> _Can_reference;
    }
    && copyable<_It>;

template <class _It>
concept _Cpp17_input_iterator = _Cpp17_iterator<_It>
    && equality_comparable<_It>
    && _Has_member_difference_type<incrementable_traits<_It>>
    && _Has_member_value_type<indirectly_readable_traits<_It>>
    && requires(_It __i) {
        typename common_reference_t<iter_reference_t<_It>&&, typename indirectly_readable_traits<_It>::value_type&>;
        typename common_reference_t<decltype(*__i++)&&, typename indirectly_readable_traits<_It>::value_type&>;
        requires signed_integral<typename incrementable_traits<_It>::difference_type>;
    };

template <class _It>
    requires (!_Has_iter_types<_It> && _Cpp17_iterator<_It> && !_Cpp17_input_iterator<_It>
                 && (!requires { typename _It::iterator_category; }
            || derived_from<typename _It::iterator_category, output_iterator_tag>))
struct _Iterator_traits_base<_It> {
    using iterator_category = output_iterator_tag;
    using difference_type =
        typename _Iter_traits_difference<_Has_member_difference_type<incrementable_traits<_It>>>::template _Apply<_It>;
    using value_type = void;
    using pointer    = void;
    using reference  = void;
};
 
enum class _Itraits_pointer_strategy { _Use_void, _Use_member, _Use_decltype };

template <_Itraits_pointer_strategy>
struct _Iter_traits_pointer;

template <>
struct _Iter_traits_pointer<_Itraits_pointer_strategy::_Use_void> {
    template <class>
    using _Apply = void;
};

template <>
struct _Iter_traits_pointer<_Itraits_pointer_strategy::_Use_member> {
    template <class _It>
    using _Apply = typename _It::pointer;
};

template <>
struct _Iter_traits_pointer<_Itraits_pointer_strategy::_Use_decltype> {
    template <class _It>
    using _Apply = decltype(::std:: declval<_It&>().operator->());
};

template <class _Ty>
concept _Has_member_arrow = requires(_Ty&& __t) {
    static_cast<_Ty&&>(__t).operator->();
};

template <bool _Has_member_typedef>
struct _Iter_traits_reference {
    template <class _It>
    using _Apply = typename _It::reference;
};

template <>
struct _Iter_traits_reference<false> {
    template <class _It>
    using _Apply = iter_reference_t<_It>;
};

template <bool _Is_random>
struct _Iter_traits_category4 {
    using type = random_access_iterator_tag;
};

template <>
struct _Iter_traits_category4<false> {
    using type = bidirectional_iterator_tag;
};

 template <class _It>
concept _Cpp17_random_delta = totally_ordered<_It>
    && requires(_It __i, typename incrementable_traits<_It>::difference_type __n) {
        { __i += __n } -> same_as<_It&>;
        { __i -= __n } -> same_as<_It&>;
        { __i +  __n } -> same_as<_It>;
        { __n +  __i } -> same_as<_It>;
        { __i -  __n } -> same_as<_It>;
        { __i -  __i } -> same_as<decltype(__n)>;
        {  __i[__n]  } -> convertible_to<iter_reference_t<_It>>;
    };
 
template <bool _Is_bidi>
struct _Iter_traits_category3 {
    template <class _It>
    using _Apply = typename _Iter_traits_category4<_Cpp17_random_delta<_It>>::type;
};

template <>
struct _Iter_traits_category3<false> {
    template <class>
    using _Apply = forward_iterator_tag;
};

 template <class _It>
concept _Cpp17_bidi_delta = requires(_It __i) {
    { --__i } -> same_as<_It&>;
    { __i-- } -> convertible_to<const _It&>;
    requires same_as<decltype(*__i--), iter_reference_t<_It>>;
};
 
template <bool _Is_forward>
struct _Iter_traits_category2 {
    template <class _It>
    using _Apply = typename _Iter_traits_category3<_Cpp17_bidi_delta<_It>>::template _Apply<_It>;
};

template <>
struct _Iter_traits_category2<false> {
    template <class>
    using _Apply = input_iterator_tag;
};

 template <class _It>
concept _Cpp17_forward_delta = constructible_from<_It> && is_lvalue_reference_v<iter_reference_t<_It>>
    && same_as<remove_cvref_t<iter_reference_t<_It>>, typename indirectly_readable_traits<_It>::value_type>
    && requires(_It __i) {
        { __i++ } -> convertible_to<const _It&>;
        requires same_as<decltype(*__i++), iter_reference_t<_It>>;
    };
 
template <bool _Has_member_typedef>
struct _Iter_traits_category {
    template <class _It>
    using _Apply = typename _It::iterator_category;
};

template <>
struct _Iter_traits_category<false> {
    template <class _It>
    using _Apply = typename _Iter_traits_category2<_Cpp17_forward_delta<_It>>::template _Apply<_It>;
};

 template <class _It>
    requires (!_Has_iter_types<_It> && _Cpp17_input_iterator<_It>)
struct _Iterator_traits_base<_It> {
    using iterator_category = typename _Iter_traits_category<_Has_member_iterator_category<_It>>::template _Apply<_It>;
    using difference_type   = typename incrementable_traits<_It>::difference_type;
    using value_type        = typename indirectly_readable_traits<_It>::value_type;
    using pointer           = typename _Iter_traits_pointer<(
        _Has_member_pointer<_It> ? _Itraits_pointer_strategy::_Use_member
                                 : _Has_member_arrow<_It&> ? _Itraits_pointer_strategy::_Use_decltype
                                                       : _Itraits_pointer_strategy::_Use_void)>::template _Apply<_It>;
    using reference         = typename _Iter_traits_reference<_Has_member_reference<_It>>::template _Apply<_It>;
};
 
 template <class _Ty>
struct iterator_traits : _Iterator_traits_base<_Ty> {
    using _From_primary = iterator_traits;
};

 template <class _Ty>
    requires is_object_v<_Ty>
struct iterator_traits<_Ty*> {
    using iterator_concept  = contiguous_iterator_tag;
    using iterator_category = random_access_iterator_tag;
    using value_type        = remove_cv_t<_Ty>;
    using difference_type   = ptrdiff_t;
    using pointer           = _Ty*;
    using reference         = _Ty&;
};
 
 namespace ranges {
    namespace _Iter_move {
        void iter_move();  
                 template <class _Ty>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && requires(_Ty&& __t) {
            iter_move(static_cast<_Ty&&>(__t));
        };

        template <class _Ty>
        concept _Can_deref = requires(_Ty&& __t) {
            *static_cast<_Ty&&>(__t);
        };

        class _Cpo {
        private:
            enum class _St { _None, _Custom, _Fallback };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                if constexpr (_Has_ADL<_Ty>) {
                    return {_St::_Custom, noexcept(iter_move(::std:: declval<_Ty>()))};
                } else if constexpr (_Can_deref<_Ty>) {
                    return {_St::_Fallback, noexcept(*::std:: declval<_Ty>())};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
            template <class _Ty>
                requires (_Choice<_Ty>._Strategy != _St::_None)
             constexpr decltype(auto) operator()(_Ty&& _Val) const noexcept(_Choice<_Ty>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty>._Strategy;

                if constexpr (_Strat == _St::_Custom) {
                    return iter_move(static_cast<_Ty&&>(_Val));
                } else if constexpr (_Strat == _St::_Fallback) {
                    using _Ref = decltype(*static_cast<_Ty&&>(_Val));
                    if constexpr (is_lvalue_reference_v<_Ref>) {
                        return ::std:: move(*static_cast<_Ty&&>(_Val));
                    } else {
                        return *static_cast<_Ty&&>(_Val);
                    }
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
        };
             }  
    inline namespace _Cpos {
        inline constexpr _Iter_move::_Cpo iter_move;
    }
}  
 
  template <class _Ty>
    requires _Dereferenceable<_Ty> && requires(_Ty& __t) {
        { ::std::ranges:: iter_move(__t) } -> _Can_reference;
    }
using iter_rvalue_reference_t = decltype(::std::ranges:: iter_move(::std:: declval<_Ty&>()));

 template <class _It>
concept _Indirectly_readable_impl = requires(const _It __i) {
    typename iter_value_t<_It>;
    typename iter_reference_t<_It>;
    typename iter_rvalue_reference_t<_It>;
    { *__i } -> same_as<iter_reference_t<_It>>;
    { ::std::ranges:: iter_move(__i) } -> same_as<iter_rvalue_reference_t<_It>>;
} && common_reference_with<iter_reference_t<_It>&&, iter_value_t<_It>&>
  && common_reference_with<iter_reference_t<_It>&&, iter_rvalue_reference_t<_It>&&>
  && common_reference_with<iter_rvalue_reference_t<_It>&&, const iter_value_t<_It>&>;

template <class _It>
concept indirectly_readable = _Indirectly_readable_impl<remove_cvref_t<_It>>;
 
 template <indirectly_readable _Ty>
using iter_common_reference_t = common_reference_t<iter_reference_t<_Ty>, iter_value_t<_Ty>&>;

 template <class _It, class _Ty>
concept indirectly_writable = requires(_It&& __i, _Ty&& __t) {
    *__i                                                                = static_cast<_Ty&&>(__t);
    *static_cast<_It&&>(__i)                                            = static_cast<_Ty&&>(__t);
    const_cast<const iter_reference_t<_It>&&>(*__i)                     = static_cast<_Ty&&>(__t);
    const_cast<const iter_reference_t<_It>&&>(*static_cast<_It&&>(__i)) = static_cast<_Ty&&>(__t);
};

 template <class _Ty>
concept _Integer_like = _Is_nonbool_integral<remove_cv_t<_Ty>>;

  template <class _Ty>
concept _Signed_integer_like = _Integer_like<_Ty> && static_cast<_Ty>(-1) < static_cast<_Ty>(0);
 
 template <class _Ty>
using _Make_unsigned_like_t = make_unsigned_t<_Ty>;

template <_Integer_like _Ty>
 constexpr auto _To_unsigned_like(const _Ty _Value) noexcept {
    return static_cast<_Make_unsigned_like_t<_Ty>>(_Value);
}

 template <class _Ty>
using _Make_signed_like_t = make_signed_t<_Ty>;

template <_Integer_like _Ty>
 constexpr auto _To_signed_like(const _Ty _Value) noexcept {
    return static_cast<_Make_signed_like_t<_Ty>>(_Value);
}

  template <class _Ty>
concept weakly_incrementable = default_initializable<_Ty> && movable<_Ty> && requires(_Ty __i) {
    typename iter_difference_t<_Ty>;
    requires _Signed_integer_like<iter_difference_t<_Ty>>;
    { ++__i } -> same_as<_Ty&>;
    __i++;
};

 template <class _Ty>
concept incrementable = regular<_Ty> && weakly_incrementable<_Ty> && requires(_Ty __t) {
    { __t++ } -> same_as<_Ty>;
};

 template <class _It>
concept input_or_output_iterator = requires(_It __i) {
    { *__i } -> _Can_reference;
    requires weakly_incrementable<_It>;
};

 template <class _Se, class _It>
concept sentinel_for = semiregular<_Se>
    && input_or_output_iterator<_It>
    && _Weakly_equality_comparable_with<_Se, _It>;
 
 template <class _Se, class _It>
inline constexpr bool disable_sized_sentinel_for = false;

  template <class _Se, class _It>
concept sized_sentinel_for = sentinel_for<_Se, _It>
    && !disable_sized_sentinel_for<remove_cv_t<_Se>, remove_cv_t<_It>>
    && requires(const _It& __i, const _Se& __s) {
        { __s - __i } -> same_as<iter_difference_t<_It>>;
        { __i - __s } -> same_as<iter_difference_t<_It>>;
    };
 
 template <bool _Iterator_category_present>
struct _Iter_concept_impl2 {
    template <class _It, class _Traits>
    using _Apply = typename _Traits::iterator_category;
};
template <>
struct _Iter_concept_impl2<false> {
         template <class _It, class _Traits>
        requires _Is_from_primary<iterator_traits<_It>>
    using _Apply = random_access_iterator_tag;
     };

template <bool _Iterator_concept_present>
struct _Iter_concept_impl1 {
    template <class _It, class _Traits>
    using _Apply = typename _Traits::iterator_concept;
};
template <>
struct _Iter_concept_impl1<false> {
    template <class _It, class _Traits>
    using _Apply = typename _Iter_concept_impl2<_Has_member_iterator_category<_Traits>>::template _Apply<_It, _Traits>;
};

template <class _It, class _Traits = conditional_t<_Is_from_primary<iterator_traits<_It>>, _It, iterator_traits<_It>>>
using _Iter_concept =
    typename _Iter_concept_impl1<_Has_member_iterator_concept<_Traits>>::template _Apply<_It, _Traits>;

  template <class _It>
concept input_iterator = input_or_output_iterator<_It> && indirectly_readable<_It>
    && requires { typename _Iter_concept<_It>; }
    && derived_from<_Iter_concept<_It>, input_iterator_tag>;

 template <class _It, class _Ty>
concept output_iterator = input_or_output_iterator<_It> && indirectly_writable<_It, _Ty>
    && requires(_It __i, _Ty&& __t) {
        *__i++ = static_cast<_Ty&&>(__t);
    };

 template <class _It>
concept forward_iterator = input_iterator<_It> && derived_from<_Iter_concept<_It>, forward_iterator_tag>
    && incrementable<_It> && sentinel_for<_It, _It>;

 template <class _It>
concept bidirectional_iterator = forward_iterator<_It> && derived_from<_Iter_concept<_It>, bidirectional_iterator_tag>
    && requires(_It __i) {
        { --__i } -> same_as<_It&>;
        { __i-- } -> same_as<_It>;
    };

 template <class _It>
concept random_access_iterator = bidirectional_iterator<_It>
    && derived_from<_Iter_concept<_It>, random_access_iterator_tag> && totally_ordered<_It>
    && sized_sentinel_for<_It, _It> && requires(_It __i, const _It __j, const iter_difference_t<_It> __n) {
        { __i += __n } -> same_as<_It&>;
        { __j + __n } -> same_as<_It>;
        { __n + __j } -> same_as<_It>;
        { __i -= __n } -> same_as<_It&>;
        { __j - __n } -> same_as<_It>;
        { __j[__n] } -> same_as<iter_reference_t<_It>>;
    };

 template <class _It>
concept contiguous_iterator = random_access_iterator<_It>
    && derived_from<_Iter_concept<_It>, contiguous_iterator_tag>
    && is_lvalue_reference_v<iter_reference_t<_It>>
    && same_as<iter_value_t<_It>, remove_cvref_t<iter_reference_t<_It>>>
    && requires(const _It& __i) {
        { ::std:: to_address(__i) } -> same_as<add_pointer_t<iter_reference_t<_It>>>;
    };

 template <class _Fn, class _It>
concept indirectly_unary_invocable = indirectly_readable<_It>
    && copy_constructible<_Fn>
    && invocable<_Fn&, iter_value_t<_It>&>
    && invocable<_Fn&, iter_reference_t<_It>>
    && invocable<_Fn&, iter_common_reference_t<_It>>
    && common_reference_with<
        invoke_result_t<_Fn&, iter_value_t<_It>&>,
        invoke_result_t<_Fn&, iter_reference_t<_It>>>;

 template <class _Fn, class _It>
concept indirectly_regular_unary_invocable = indirectly_readable<_It>
    && copy_constructible<_Fn>
    && regular_invocable<_Fn&, iter_value_t<_It>&>
    && regular_invocable<_Fn&, iter_reference_t<_It>>
    && regular_invocable<_Fn&, iter_common_reference_t<_It>>
    && common_reference_with<
        invoke_result_t<_Fn&, iter_value_t<_It>&>,
        invoke_result_t<_Fn&, iter_reference_t<_It>>>;

 template <class _Fn, class _It>
concept indirect_unary_predicate = indirectly_readable<_It>
    && copy_constructible<_Fn>
    && predicate<_Fn&, iter_value_t<_It>&>
    && predicate<_Fn&, iter_reference_t<_It>>
    && predicate<_Fn&, iter_common_reference_t<_It>>;

 template <class _Fn, class _It1, class _It2>
concept indirect_binary_predicate = indirectly_readable<_It1>
    && indirectly_readable<_It2>
    && copy_constructible<_Fn>
    && predicate<_Fn&, iter_value_t<_It1>&, iter_value_t<_It2>&>
    && predicate<_Fn&, iter_value_t<_It1>&, iter_reference_t<_It2>>
    && predicate<_Fn&, iter_reference_t<_It1>, iter_value_t<_It2>&>
    && predicate<_Fn&, iter_reference_t<_It1>, iter_reference_t<_It2>>
    && predicate<_Fn&, iter_common_reference_t<_It1>, iter_common_reference_t<_It2>>;

 template <class _Fn, class _It1, class _It2 = _It1>
concept indirect_equivalence_relation = indirectly_readable<_It1>
    && indirectly_readable<_It2>
    && copy_constructible<_Fn>
    && equivalence_relation<_Fn&, iter_value_t<_It1>&, iter_value_t<_It2>&>
    && equivalence_relation<_Fn&, iter_value_t<_It1>&, iter_reference_t<_It2>>
    && equivalence_relation<_Fn&, iter_reference_t<_It1>, iter_value_t<_It2>&>
    && equivalence_relation<_Fn&, iter_reference_t<_It1>, iter_reference_t<_It2>>
    && equivalence_relation<_Fn&, iter_common_reference_t<_It1>, iter_common_reference_t<_It2>>;

 template <class _Fn, class _It1, class _It2 = _It1>
concept indirect_strict_weak_order = indirectly_readable<_It1>
    && indirectly_readable<_It2>
    && copy_constructible<_Fn>
    && strict_weak_order<_Fn&, iter_value_t<_It1>&, iter_value_t<_It2>&>
    && strict_weak_order<_Fn&, iter_value_t<_It1>&, iter_reference_t<_It2>>
    && strict_weak_order<_Fn&, iter_reference_t<_It1>, iter_value_t<_It2>&>
    && strict_weak_order<_Fn&, iter_reference_t<_It1>, iter_reference_t<_It2>>
    && strict_weak_order<_Fn&, iter_common_reference_t<_It1>, iter_common_reference_t<_It2>>;

 template <class _Fn, class... _Its>
    requires (indirectly_readable<_Its> && ...)
        && invocable<_Fn, iter_reference_t<_Its>...>
using indirect_result_t = invoke_result_t<_Fn, iter_reference_t<_Its>...>;
 
 
template <indirectly_readable _It, indirectly_regular_unary_invocable<_It> _Proj>
struct projected {
    using value_type = remove_cvref_t<indirect_result_t<_Proj&, _It>>;
    indirect_result_t<_Proj&, _It> operator*() const {
        :: abort();      }
};


template <weakly_incrementable _It, class _Proj>
struct incrementable_traits<projected<_It, _Proj>> {
    using difference_type = iter_difference_t<_It>;
};

  template <class _In, class _Out>
concept indirectly_movable = indirectly_readable<_In> && indirectly_writable<_Out, iter_rvalue_reference_t<_In>>;

 template <class _In, class _Out>
concept indirectly_movable_storable = indirectly_movable<_In, _Out>
    && indirectly_writable<_Out, iter_value_t<_In>>
    && movable<iter_value_t<_In>>
    && constructible_from<iter_value_t<_In>, iter_rvalue_reference_t<_In>>
    && assignable_from<iter_value_t<_In>&, iter_rvalue_reference_t<_In>>;

 template <class _In, class _Out>
concept indirectly_copyable = indirectly_readable<_In> && indirectly_writable<_Out, iter_reference_t<_In>>;

 template <class _In, class _Out>
concept indirectly_copyable_storable = indirectly_copyable<_In, _Out>
    && indirectly_writable<_Out, iter_value_t<_In>&>
    && indirectly_writable<_Out, const iter_value_t<_In>&>
    && indirectly_writable<_Out, iter_value_t<_In>&&>
    && indirectly_writable<_Out, const iter_value_t<_In>&&>
    && copyable<iter_value_t<_In>>
    && constructible_from<iter_value_t<_In>, iter_reference_t<_In>>
    && assignable_from<iter_value_t<_In>&, iter_reference_t<_In>>;
 
 namespace ranges {
    namespace _Iter_swap {
        template <class _Ty1, class _Ty2>
        void iter_swap(_Ty1, _Ty2) = delete;

                 template <class _Ty1, class _Ty2>
        concept _Has_ADL = (_Has_class_or_enum_type<_Ty1> || _Has_class_or_enum_type<_Ty2>)
            && requires(_Ty1&& __t1, _Ty2&& __t2) {
                iter_swap(static_cast<_Ty1&&>(__t1), static_cast<_Ty2&&>(__t2));
            };

        template <class _Ty1, class _Ty2>
        concept _Can_swap_references = indirectly_readable<remove_reference_t<_Ty1>>
            && indirectly_readable<remove_reference_t<_Ty2>>
            && swappable_with<iter_reference_t<_Ty1>, iter_reference_t<_Ty2>>;

        template <class _Ty1, class _Ty2>
        concept _Symmetric_indirectly_movable_storable =
               indirectly_movable_storable<remove_reference_t<_Ty1>, remove_reference_t<_Ty2>>
            && indirectly_movable_storable<remove_reference_t<_Ty2>, remove_reference_t<_Ty1>>;
         
        template <class _Xty, class _Yty>
         constexpr iter_value_t<remove_reference_t<_Xty>> _Iter_exchange_move(_Xty&& _XVal,
            _Yty&& _YVal) noexcept(noexcept(iter_value_t<remove_reference_t<_Xty>>(::std::ranges:: iter_move(_XVal)))) {
            iter_value_t<remove_reference_t<_Xty>> _Tmp(::std::ranges:: iter_move(_XVal));
            *_XVal = ::std::ranges:: iter_move(_YVal);
            return _Tmp;
        }

        class _Cpo {
        private:
            enum class _St { _None, _Custom, _Swap, _Exchange };

            template <class _Ty1, class _Ty2>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                if constexpr (_Has_ADL<_Ty1, _Ty2>) {
                    return {_St::_Custom, noexcept(iter_swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))};
                } else if constexpr (_Can_swap_references<_Ty1, _Ty2>) {
                    return {_St::_Swap, noexcept(::std::ranges:: swap(*::std:: declval<_Ty1>(), *::std:: declval<_Ty2>()))};
                } else if constexpr (_Symmetric_indirectly_movable_storable<_Ty1, _Ty2>) {
                    constexpr auto _Nothrow = noexcept(
                        *::std:: declval<_Ty1>() = _Iter_exchange_move(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));
                    return {_St::_Exchange, _Nothrow};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty1, class _Ty2>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty1, _Ty2>();

        public:
                         template <class _Ty1, class _Ty2>
                requires (_Choice<_Ty1, _Ty2>._Strategy != _St::_None)
            constexpr void operator()(_Ty1&& _Val1, _Ty2&& _Val2) const noexcept(_Choice<_Ty1, _Ty2>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty1, _Ty2>._Strategy;

                if constexpr (_Strat == _St::_Custom) {
                    iter_swap(static_cast<_Ty1&&>(_Val1), static_cast<_Ty2&&>(_Val2));
                } else if constexpr (_Strat == _St::_Swap) {
                    ::std::ranges:: swap(*static_cast<_Ty1&&>(_Val1), *static_cast<_Ty2&&>(_Val2));
                } else if constexpr (_Strat == _St::_Exchange) {
                    *static_cast<_Ty1&&>(_Val1) =
                        _Iter_exchange_move(static_cast<_Ty2&&>(_Val2), static_cast<_Ty1&&>(_Val1));
                } else {
                    static_assert(_Always_false<_Ty1>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Iter_swap::_Cpo iter_swap;
    }
}  
  template <class _It1, class _It2 = _It1>
concept indirectly_swappable = indirectly_readable<_It1> && indirectly_readable<_It2>
    && requires(const _It1 __i1, const _It2 __i2) {
        ::std::ranges:: iter_swap(__i1, __i1);
        ::std::ranges:: iter_swap(__i2, __i2);
        ::std::ranges:: iter_swap(__i1, __i2);
        ::std::ranges:: iter_swap(__i2, __i1);
    };

 template <class _It1, class _It2, class _Rel, class _Proj1 = identity, class _Proj2 = identity>
concept indirectly_comparable =
    indirect_binary_predicate<_Rel,
        projected<_It1, _Proj1>,
        projected<_It2, _Proj2>>;

 template <class _It>
concept permutable = forward_iterator<_It>
    && indirectly_movable_storable<_It, _It>
    && indirectly_swappable<_It, _It>;

 namespace ranges { struct less; }
template <class _It1, class _It2, class _Out, class _Pr = ranges::less, class _Pj1 = identity, class _Pj2 = identity>
concept mergeable = input_iterator<_It1> && input_iterator<_It2>
    && weakly_incrementable<_Out>
    && indirectly_copyable<_It1, _Out>
    && indirectly_copyable<_It2, _Out>
    && indirect_strict_weak_order<_Pr, projected<_It1, _Pj1>, projected<_It2, _Pj2>>;

 template <class _It, class _Pr = ranges::less, class _Proj = identity>
concept sortable = permutable<_It> && indirect_strict_weak_order<_Pr, projected<_It, _Proj>>;
 
 template <class _Iter>
using _Iter_ref_t = iter_reference_t<_Iter>;

 template <class _Iter>
using _Iter_value_t = iter_value_t<_Iter>;

 template <class _Iter>
using _Iter_diff_t = iter_difference_t<_Iter>;


 template <class... _Iters>
using _Common_diff_t = common_type_t<_Iter_diff_t<_Iters>...>;

 template <class _Iter>
using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

 template <class _Ty, class = void>
inline constexpr bool _Is_iterator_v = false;

template <class _Ty>
inline constexpr bool _Is_iterator_v<_Ty, void_t<_Iter_cat_t<_Ty>>> = true;

 template <class _Ty>
struct _Is_iterator : bool_constant<_Is_iterator_v<_Ty>> {};

 template <class _Iter>
inline constexpr bool _Is_input_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, input_iterator_tag>;

 template <class _Iter>
inline constexpr bool _Is_fwd_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, forward_iterator_tag>;

 template <class _Iter>
inline constexpr bool _Is_bidi_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, bidirectional_iterator_tag>;

 template <class _Iter>
inline constexpr bool _Is_random_iter_v = is_convertible_v<_Iter_cat_t<_Iter>, random_access_iterator_tag>;

 template <class, class = void>
struct _Is_checked_helper {};  
 
template <class _Iter, class = void>
inline constexpr bool _Allow_inheriting_unwrap_v = true;

template <class _Iter>
inline constexpr bool _Allow_inheriting_unwrap_v<_Iter, void_t<typename _Iter::_Prevent_inheriting_unwrap>> =
    is_same_v<_Iter, typename _Iter::_Prevent_inheriting_unwrap>;

template <class _Iter, class _Sentinel = _Iter, class = void>
inline constexpr bool _Range_verifiable_v = false;

template <class _Iter, class _Sentinel>
inline constexpr bool _Range_verifiable_v<_Iter, _Sentinel,
    void_t<decltype(_Verify_range(::std:: declval<const _Iter&>(), ::std:: declval<const _Sentinel&>()))>> =
    _Allow_inheriting_unwrap_v<_Iter>;

template <class _Iter, class _Sentinel>
constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {
         if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
        _Verify_range(_First, _Last);
    }
}

 template <class _Iter, class = void>
inline constexpr bool _Unwrappable_v = false;

template <class _Iter>
inline constexpr bool _Unwrappable_v<_Iter,
    void_t<decltype(::std:: declval<_Remove_cvref_t<_Iter>&>()._Seek_to(::std:: declval<_Iter>()._Unwrapped()))>> =
    _Allow_inheriting_unwrap_v<_Remove_cvref_t<_Iter>>;

template <class _Iter>
 constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {
         if constexpr (is_pointer_v<decay_t<_Iter>>) {          return _It + 0;
    } else if constexpr (_Unwrappable_v<_Iter>) {
        return static_cast<_Iter&&>(_It)._Unwrapped();
    } else {
        return static_cast<_Iter&&>(_It);
    }
}

template <class _Iter>
using _Unwrapped_t = _Remove_cvref_t<decltype(_Get_unwrapped(::std:: declval<_Iter>()))>;

 template <class _Iter, class = bool>
inline constexpr bool _Do_unwrap_when_unverified_v = false;

template <class _Iter>
inline constexpr bool
    _Do_unwrap_when_unverified_v<_Iter, decltype(static_cast<bool>(_Iter::_Unwrap_when_unverified))> =
        static_cast<bool>(_Iter::_Unwrap_when_unverified);

template <class _Iter>
inline constexpr bool _Unwrappable_for_unverified_v =
    _Unwrappable_v<_Iter>&& _Do_unwrap_when_unverified_v<_Remove_cvref_t<_Iter>>;

template <class _Iter>
 constexpr decltype(auto) _Get_unwrapped_unverified(_Iter&& _It) {
         if constexpr (is_pointer_v<decay_t<_Iter>>) {          return _It + 0;
    } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
        return static_cast<_Iter&&>(_It)._Unwrapped();
    } else {
        return static_cast<_Iter&&>(_It);
    }
}

template <class _Iter>
using _Unwrapped_unverified_t = _Remove_cvref_t<decltype(_Get_unwrapped_unverified(::std:: declval<_Iter>()))>;

 struct _Distance_unknown {
    constexpr _Distance_unknown operator-() const noexcept {
        return {};
    }
};

template <class _Diff>
inline constexpr auto _Max_possible_v = _Diff{static_cast<make_unsigned_t<_Diff>>(-1) >> 1};

template <class _Diff>
inline constexpr auto _Min_possible_v = _Diff{-_Max_possible_v<_Diff> - 1};

template <class _Iter, class = void>
inline constexpr bool _Offset_verifiable_v = false;

template <class _Iter>
inline constexpr bool
    _Offset_verifiable_v<_Iter, void_t<decltype(::std:: declval<const _Iter&>()._Verify_offset(_Iter_diff_t<_Iter>{}))>> =
        true;

template <class _Iter>
inline constexpr bool _Unwrappable_for_offset_v =
    _Unwrappable_v<_Iter>&& _Offset_verifiable_v<_Remove_cvref_t<_Iter>>;

template <class _Iter, class _Diff>
 constexpr decltype(auto) _Get_unwrapped_n(_Iter&& _It, const _Diff _Off) {
    if constexpr (is_pointer_v<decay_t<_Iter>>) {
        return _It + 0;
    } else if constexpr (_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>) {
                 using _IDiff     = _Iter_diff_t<_Remove_cvref_t<_Iter>>;
        using _CDiff     = common_type_t<_Diff, _IDiff>;
        const auto _COff = static_cast<_CDiff>(_Off);

        ;
        (void) _COff;

        _It._Verify_offset(static_cast<_IDiff>(_Off));
        return static_cast<_Iter&&>(_It)._Unwrapped();
    } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
                 return static_cast<_Iter&&>(_It)._Unwrapped();
    } else {
                 return static_cast<_Iter&&>(_It);
    }
}

 template <class _Iter, class _UIter, class = void>
inline constexpr bool _Wrapped_seekable_v = false;

template <class _Iter, class _UIter>
inline constexpr bool
    _Wrapped_seekable_v<_Iter, _UIter, void_t<decltype(::std:: declval<_Iter&>()._Seek_to(::std:: declval<_UIter>()))>> =
        true;

template <class _Iter, class _UIter>
constexpr void _Seek_wrapped(_Iter& _It, _UIter&& _UIt) {
    if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
        _It._Seek_to(::std:: forward<_UIter>(_UIt));
    } else {
        _It = ::std:: forward<_UIter>(_UIt);
    }
}

 template <class _Ty, class = void>
struct _Is_allocator : false_type {};  
template <class _Ty>
struct _Is_allocator<_Ty, void_t<typename _Ty::value_type, decltype(::std:: declval<_Ty&>().deallocate(
                                                               ::std:: declval<_Ty&>().allocate(size_t{1}), size_t{1}))>>
    : true_type {};  
 template <class _Iter>
using _Guide_key_t = remove_const_t<typename iterator_traits<_Iter>::value_type::first_type>;

template <class _Iter>
using _Guide_val_t = typename iterator_traits<_Iter>::value_type::second_type;

template <class _Iter>
using _Guide_pair_t = pair<add_const_t<typename iterator_traits<_Iter>::value_type::first_type>,
    typename iterator_traits<_Iter>::value_type::second_type>;

 template <class _Ty>
struct is_execution_policy : false_type {};

template <class _Ty>
inline constexpr bool is_execution_policy_v = is_execution_policy<_Ty>::value;

   template <class _ExPo>
using _Enable_if_execution_policy_t = typename remove_reference_t<_ExPo>::_Standard_execution_policy;



 template <class _Checked, class _Iter>
 constexpr auto _Idl_distance(const _Iter& _First, const _Iter& _Last) {
         if constexpr (_Is_random_iter_v<_Iter>) {
        return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);
    } else {
        return _Distance_unknown{};
    }
}

 template <class _Elem, bool _Is_enum = is_enum_v<_Elem>>
struct _Unwrap_enum {      using type = underlying_type_t<_Elem>;
};

template <class _Elem>
struct _Unwrap_enum<_Elem, false> {      using type = _Elem;
};

template <class _Elem>
using _Unwrap_enum_t = typename _Unwrap_enum<_Elem>::type;

 


  template <class _InIt, class _Diff>
constexpr void advance(_InIt& _Where, _Diff _Off) {      if constexpr (_Is_random_iter_v<_InIt>) {
        _Where += _Off;
    } else {
        if constexpr (is_signed_v<_Diff> && !_Is_bidi_iter_v<_InIt>) {
            ;
        }

        decltype(auto) _UWhere      = _Get_unwrapped_n(::std:: move(_Where), _Off);
        constexpr bool _Need_rewrap = !is_reference_v<decltype(_Get_unwrapped_n(::std:: move(_Where), _Off))>;

        if constexpr (is_signed_v<_Diff> && _Is_bidi_iter_v<_InIt>) {
            for (; _Off < 0; ++_Off) {
                --_UWhere;
            }
        }

        for (; 0 < _Off; --_Off) {
            ++_UWhere;
        }

        if constexpr (_Need_rewrap) {
            _Seek_wrapped(_Where, ::std:: move(_UWhere));
        }
    }
}

 template <class _InIt>
 constexpr _Iter_diff_t<_InIt> distance(_InIt _First, _InIt _Last) {
    if constexpr (_Is_random_iter_v<_InIt>) {
        return _Last - _First;      } else {
        _Adl_verify_range(_First, _Last);
        auto _UFirst             = _Get_unwrapped(_First);
        const auto _ULast        = _Get_unwrapped(_Last);
        _Iter_diff_t<_InIt> _Off = 0;
        for (; _UFirst != _ULast; ++_UFirst) {
            ++_Off;
        }

        return _Off;
    }
}

 template <class _InIt>
constexpr _InIt _Next_iter(_InIt _First) {      return ++_First;
}

 template <class _InIt>
 constexpr _InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1) {      static_assert(_Is_input_iter_v<_InIt>, "next requires input iterator");

    ::std:: advance(_First, _Off);
    return _First;
}

 template <class _BidIt>
constexpr _BidIt _Prev_iter(_BidIt _First) {      return --_First;
}

 template <class _BidIt>
 constexpr _BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1) {      static_assert(_Is_bidi_iter_v<_BidIt>, "prev requires bidirectional iterator");

    ::std:: advance(_First, -_Off);
    return _First;
}

 template <class _BidIt>
class reverse_iterator {
public:
    using iterator_type = _BidIt;

    using iterator_concept =
        conditional_t<random_access_iterator<_BidIt>, random_access_iterator_tag, bidirectional_iterator_tag>;
    using iterator_category = conditional_t<derived_from<_Iter_cat_t<_BidIt>, random_access_iterator_tag>,
        random_access_iterator_tag, _Iter_cat_t<_BidIt>>;
    using value_type      = _Iter_value_t<_BidIt>;
    using difference_type = _Iter_diff_t<_BidIt>;
    using pointer         = typename iterator_traits<_BidIt>::pointer;
    using reference       = _Iter_ref_t<_BidIt>;

    template <class>
    friend class reverse_iterator;

    constexpr reverse_iterator() = default;

    constexpr explicit reverse_iterator(_BidIt _Right) noexcept(
        is_nothrow_move_constructible_v<_BidIt>)          : current(::std:: move(_Right)) {}

         template <class _Other>
        requires (!is_same_v<_Other, _BidIt>) && convertible_to<const _Other&, _BidIt>
    constexpr reverse_iterator(const reverse_iterator<_Other>& _Right) noexcept(
        is_nothrow_constructible_v<_BidIt, const _Other&>)          : current(_Right.current) {}

    template <class _Other>
        requires (!is_same_v<_Other, _BidIt>) && convertible_to<const _Other&, _BidIt>
            && assignable_from<_BidIt&, const _Other&>
    constexpr reverse_iterator& operator=(const reverse_iterator<_Other>& _Right) {
        current = _Right.current;
        return *this;
    }
     
     constexpr _BidIt base() const {
        return current;
    }

     constexpr reference operator*() const {
        _BidIt _Tmp = current;
        return *--_Tmp;
    }

          constexpr pointer operator->() const
        requires (is_pointer_v<_BidIt> || requires(const _BidIt __i) { __i.operator->(); }) {
        _BidIt _Tmp = current;
        --_Tmp;
        if constexpr (is_pointer_v<_BidIt>) {
            return _Tmp;
        } else {
            return _Tmp.operator->();
        }
    }
     
    constexpr reverse_iterator& operator++() {
        --current;
        return *this;
    }

    constexpr reverse_iterator operator++(int) {
        reverse_iterator _Tmp = *this;
        --current;
        return _Tmp;
    }

    constexpr reverse_iterator& operator--() {
        ++current;
        return *this;
    }

    constexpr reverse_iterator operator--(int) {
        reverse_iterator _Tmp = *this;
        ++current;
        return _Tmp;
    }

     constexpr reverse_iterator operator+(const difference_type _Off) const {
        return reverse_iterator(current - _Off);
    }

    constexpr reverse_iterator& operator+=(const difference_type _Off) {
        current -= _Off;
        return *this;
    }

     constexpr reverse_iterator operator-(const difference_type _Off) const {
        return reverse_iterator(current + _Off);
    }

    constexpr reverse_iterator& operator-=(const difference_type _Off) {
        current += _Off;
        return *this;
    }

     constexpr reference operator[](const difference_type _Off) const {
        return current[static_cast<difference_type>(-_Off - 1)];
    }

     friend constexpr iter_rvalue_reference_t<_BidIt> iter_move(const reverse_iterator& _It) noexcept(
        is_nothrow_copy_constructible_v<_BidIt>&& noexcept(::std::ranges:: iter_move(--::std:: declval<_BidIt&>()))) {
        auto _Tmp = _It.current;
        --_Tmp;
        return ::std::ranges:: iter_move(_Tmp);
    }

    template <indirectly_swappable<_BidIt> _BidIt2>
    friend constexpr void iter_swap(const reverse_iterator& _Left, const reverse_iterator<_BidIt2>& _Right) noexcept(
        is_nothrow_copy_constructible_v<_BidIt>&& is_nothrow_copy_constructible_v<_BidIt2>&& noexcept(
            ::std::ranges:: iter_swap(--::std:: declval<_BidIt&>(), --::std:: declval<_BidIt2&>()))) {
        auto _LTmp = _Left.current;
        auto _RTmp = _Right.base();
        --_LTmp;
        --_RTmp;
        ::std::ranges:: iter_swap(_LTmp, _RTmp);
    }

    using _Prevent_inheriting_unwrap = reverse_iterator;

    template <class _BidIt2, enable_if_t<_Range_verifiable_v<_BidIt, _BidIt2>, int> = 0>
    friend constexpr void _Verify_range(const reverse_iterator& _First, const reverse_iterator<_BidIt2>& _Last) {
        _Verify_range(_Last._Get_current(), _First.current);      }

    template <class _BidIt2 = _BidIt, enable_if_t<_Offset_verifiable_v<_BidIt2>, int> = 0>
    constexpr void _Verify_offset(const difference_type _Off) const {
        do {                                                                    if (_Off != _Min_possible_v<difference_type>) {           } else {                                                                do {                                             ;                   ::_invalid_parameter_noinfo_noreturn();     } while (false);                                        }                                                                                                                                       ;                                        } while (false);
        current._Verify_offset(-_Off);
    }

    template <class _BidIt2 = _BidIt, enable_if_t<_Unwrappable_v<const _BidIt2&>, int> = 0>
     constexpr reverse_iterator<_Unwrapped_t<const _BidIt2&>> _Unwrapped() const {
        return static_cast<reverse_iterator<_Unwrapped_t<const _BidIt2&>>>(current._Unwrapped());
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<_BidIt>;

    template <class _Src, enable_if_t<_Wrapped_seekable_v<_BidIt, const _Src&>, int> = 0>
    constexpr void _Seek_to(const reverse_iterator<_Src>& _It) {
        current._Seek_to(_It.current);
    }

     constexpr const _BidIt& _Get_current() const noexcept {
        return current;
    }

protected:
    _BidIt current{};
};

template <class _BidIt1, class _BidIt2>
 constexpr bool operator==(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() == _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() == _Right._Get_current(); }

template <class _BidIt1, class _BidIt2>
 constexpr bool operator!=(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() != _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() != _Right._Get_current(); }

template <class _BidIt1, class _BidIt2>
 constexpr bool operator<(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() > _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() > _Right._Get_current(); }

template <class _BidIt1, class _BidIt2>
 constexpr bool operator>(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() < _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() < _Right._Get_current(); }

template <class _BidIt1, class _BidIt2>
 constexpr bool operator<=(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() >= _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() >= _Right._Get_current(); }

template <class _BidIt1, class _BidIt2>
 constexpr bool operator>=(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
         requires requires {
        { _Left._Get_current() <= _Right._Get_current() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left._Get_current() <= _Right._Get_current(); }

template <class _BidIt1, three_way_comparable_with<_BidIt1> _BidIt2>
 constexpr compare_three_way_result_t<_BidIt1, _BidIt2> operator<=>(
    const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right) {
    return _Right._Get_current() <=> _Left._Get_current();
}

template <class _BidIt1, class _BidIt2>
 constexpr auto operator-(const reverse_iterator<_BidIt1>& _Left, const reverse_iterator<_BidIt2>& _Right)
    -> decltype(_Right._Get_current() - _Left._Get_current()) {
    return _Right._Get_current() - _Left._Get_current();
}

template <class _BidIt>
 constexpr reverse_iterator<_BidIt> operator+(
    typename reverse_iterator<_BidIt>::difference_type _Off, const reverse_iterator<_BidIt>& _Right) {
    return _Right + _Off;
}

 template <class _BidIt>
 constexpr reverse_iterator<_BidIt> make_reverse_iterator(_BidIt _Iter) noexcept(
    is_nothrow_move_constructible_v<_BidIt>)   {
    return reverse_iterator<_BidIt>(::std:: move(_Iter));
}

 template <class _BidIt1, class _BidIt2>
    requires (!sized_sentinel_for<_BidIt1, _BidIt2>)
inline constexpr bool disable_sized_sentinel_for<reverse_iterator<_BidIt1>, reverse_iterator<_BidIt2>> = true;
 
 template <class _Container>
 constexpr auto begin(_Container& _Cont) -> decltype(_Cont.begin()) {
    return _Cont.begin();
}

template <class _Container>
 constexpr auto begin(const _Container& _Cont) -> decltype(_Cont.begin()) {
    return _Cont.begin();
}

template <class _Container>
 constexpr auto end(_Container& _Cont) -> decltype(_Cont.end()) {
    return _Cont.end();
}

template <class _Container>
 constexpr auto end(const _Container& _Cont) -> decltype(_Cont.end()) {
    return _Cont.end();
}

template <class _Ty, size_t _Size>
 constexpr _Ty* begin(_Ty (&_Array)[_Size]) noexcept {
    return _Array;
}

template <class _Ty, size_t _Size>
 constexpr _Ty* end(_Ty (&_Array)[_Size]) noexcept {
    return _Array + _Size;
}

 template <class _Container>
 constexpr auto cbegin(const _Container& _Cont) noexcept(noexcept(::std:: begin(_Cont)))
    -> decltype(::std:: begin(_Cont)) {
    return ::std:: begin(_Cont);
}

template <class _Container>
 constexpr auto cend(const _Container& _Cont) noexcept(noexcept(::std:: end(_Cont)))
    -> decltype(::std:: end(_Cont)) {
    return ::std:: end(_Cont);
}

 template <class _Container>
 constexpr auto rbegin(_Container& _Cont) -> decltype(_Cont.rbegin()) {
    return _Cont.rbegin();
}

template <class _Container>
 constexpr auto rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin()) {
    return _Cont.rbegin();
}

template <class _Container>
 constexpr auto rend(_Container& _Cont) -> decltype(_Cont.rend()) {
    return _Cont.rend();
}

template <class _Container>
 constexpr auto rend(const _Container& _Cont) -> decltype(_Cont.rend()) {
    return _Cont.rend();
}

template <class _Ty, size_t _Size>
 constexpr reverse_iterator<_Ty*> rbegin(_Ty (&_Array)[_Size]) {
    return reverse_iterator<_Ty*>(_Array + _Size);
}

template <class _Ty, size_t _Size>
 constexpr reverse_iterator<_Ty*> rend(_Ty (&_Array)[_Size]) {
    return reverse_iterator<_Ty*>(_Array);
}

template <class _Elem>
 constexpr reverse_iterator<const _Elem*> rbegin(initializer_list<_Elem> _Ilist) {
    return reverse_iterator<const _Elem*>(_Ilist.end());
}

template <class _Elem>
 constexpr reverse_iterator<const _Elem*> rend(initializer_list<_Elem> _Ilist) {
    return reverse_iterator<const _Elem*>(_Ilist.begin());
}

 template <class _Container>
 constexpr auto crbegin(const _Container& _Cont) -> decltype(::std:: rbegin(_Cont)) {
    return ::std:: rbegin(_Cont);
}

template <class _Container>
 constexpr auto crend(const _Container& _Cont) -> decltype(::std:: rend(_Cont)) {
    return ::std:: rend(_Cont);
}

template <class _Container>
 constexpr auto size(const _Container& _Cont) -> decltype(_Cont.size()) {
    return _Cont.size();
}

template <class _Ty, size_t _Size>
 constexpr size_t size(const _Ty (&)[_Size]) noexcept {
    return _Size;
}

 template <class _Container>
 constexpr auto ssize(const _Container& _Cont)
    -> common_type_t<ptrdiff_t, make_signed_t<decltype(_Cont.size())>> {
    using _Common = common_type_t<ptrdiff_t, make_signed_t<decltype(_Cont.size())>>;
    return static_cast<_Common>(_Cont.size());
}

template <class _Ty, ptrdiff_t _Size>
 constexpr ptrdiff_t ssize(const _Ty (&)[_Size]) noexcept {
    return _Size;
}

template <class _Container>
 constexpr auto empty(const _Container& _Cont) -> decltype(_Cont.empty()) {
    return _Cont.empty();
}

template <class _Ty, size_t _Size>
 constexpr bool empty(const _Ty (&)[_Size]) noexcept {
    return false;
}

template <class _Elem>
 constexpr bool empty(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.size() == 0;
}

template <class _Container>
 constexpr auto data(_Container& _Cont) -> decltype(_Cont.data()) {
    return _Cont.data();
}

template <class _Container>
 constexpr auto data(const _Container& _Cont) -> decltype(_Cont.data()) {
    return _Cont.data();
}

template <class _Ty, size_t _Size>
 constexpr _Ty* data(_Ty (&_Array)[_Size]) noexcept {
    return _Array;
}

template <class _Elem>
 constexpr const _Elem* data(initializer_list<_Elem> _Ilist) noexcept {
    return _Ilist.begin();
}

 template <class _Ty>
 _Ty _Fake_decay_copy(_Ty) noexcept;
    
 template <class _Ty1, class _Ty2>
concept _Not_same_as = !same_as<remove_cvref_t<_Ty1>, remove_cvref_t<_Ty2>>;

namespace ranges {
         template <class>
    inline constexpr bool _Has_complete_elements = false;

         template <class _Ty>
        requires requires(_Ty& __t) { sizeof(__t[0]); }
    inline constexpr bool _Has_complete_elements<_Ty> = true;
     
         template <class>
    inline constexpr bool enable_borrowed_range = false;

    template <class _Rng>
    concept _Should_range_access = is_lvalue_reference_v<_Rng> || enable_borrowed_range<remove_cvref_t<_Rng>>;

         namespace _Begin {
        template <class _Ty>
        void begin(_Ty&) = delete;
        template <class _Ty>
        void begin(const _Ty&) = delete;

                 template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            { _Fake_decay_copy(__t.begin()) } -> input_or_output_iterator;
        };

        template <class _Ty>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && requires(_Ty __t) {
            { _Fake_decay_copy(begin(__t)) } -> input_or_output_iterator;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Array, _Member, _Non_member };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (is_array_v<remove_reference_t<_Ty>>) {
                    static_assert(_Has_complete_elements<_Ty>,
                        "The range access customization point objects std::ranges::begin, std::ranges::end, std::ranges::rbegin, std::ranges::rend, and std::ranges::data do not accept arrays with incomplete element types.");
                    return {_St::_Array, true};
                } else if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(_Fake_decay_copy(::std:: declval<_Ty>().begin()))};
                } else if constexpr (_Has_ADL<_Ty>) {
                    return {_St::_Non_member, noexcept(_Fake_decay_copy(begin(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Array) {
                    return _Val;
                } else if constexpr (_Strat == _St::_Member) {
                    return _Val.begin();
                } else if constexpr (_Strat == _St::_Non_member) {
                    return begin(_Val);
                } else {
                    static_assert(_Always_false<_Ty>, "Should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Begin::_Cpo begin;
    }

         template <class _Ty>
    using iterator_t = decltype(::std::ranges:: begin(::std:: declval<_Ty&>()));

         namespace _Unchecked_begin {
                 template <class _Ty>
        concept _Has_member = requires(_Ty& __t) {
            { __t._Unchecked_begin() } -> input_or_output_iterator;
        };

        template <class _Ty>
        concept _Can_begin = requires(_Ty& __t) {
            _Get_unwrapped(::std::ranges:: begin(__t));
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Unwrap };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (_Has_member<_Ty>) {
                    ;
                    return {_St::_Member, noexcept(::std:: declval<_Ty>()._Unchecked_begin())};
                } else if constexpr (_Can_begin<_Ty>) {
                    return {_St::_Unwrap, noexcept(_Get_unwrapped(::std::ranges:: begin(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return _Val._Unchecked_begin();
                } else if constexpr (_Strat == _St::_Unwrap) {
                    return _Get_unwrapped(::std::ranges:: begin(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "Should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Unchecked_begin::_Cpo _Ubegin;
    }

         namespace _End {
        template <class _Ty>
        void end(_Ty&) = delete;
        template <class _Ty>
        void end(const _Ty&) = delete;

                 template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            { _Fake_decay_copy(__t.end()) } -> sentinel_for<iterator_t<_Ty>>;
        };

        template <class _Ty>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && requires(_Ty __t) {
            { _Fake_decay_copy(end(__t)) } -> sentinel_for<iterator_t<_Ty>>;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Array, _Member, _Non_member };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                using _UnRef = remove_reference_t<_Ty>;

                if constexpr (is_array_v<_UnRef>) {
                    static_assert(_Has_complete_elements<_UnRef>,
                        "The range access customization point objects std::ranges::begin, std::ranges::end, std::ranges::rbegin, std::ranges::rend, and std::ranges::data do not accept arrays with incomplete element types.");
                    if constexpr (extent_v<_UnRef> != 0) {
                        return {_St::_Array, true};
                    } else {
                        return {_St::_None};
                    }
                } else if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(_Fake_decay_copy(::std:: declval<_Ty>().end()))};
                } else if constexpr (_Has_ADL<_Ty>) {
                    return {_St::_Non_member, noexcept(_Fake_decay_copy(end(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Array) {
                                         return _Val + extent_v<remove_reference_t<_Ty&>>;
                } else if constexpr (_Strat == _St::_Member) {
                    return _Val.end();
                } else if constexpr (_Strat == _St::_Non_member) {
                    return end(_Val);
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _End::_Cpo end;
    }

         namespace _Unchecked_end {
                 template <class _Ty>
        concept _Has_member = _Unchecked_begin::_Has_member<_Ty> && requires(_Ty& __t) {
            __t._Unchecked_begin();              { __t._Unchecked_end() } -> sentinel_for<decltype(__t._Unchecked_begin())>;
        };

        template <class _Ty>
        concept _Can_end = requires(_Ty& __t) {
            _Get_unwrapped(::std::ranges:: end(__t));
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Unwrap };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (_Has_member<_Ty>) {
                    ;
                    return {_St::_Member, noexcept(::std:: declval<_Ty>()._Unchecked_end())};
                } else if constexpr (_Can_end<_Ty>) {
                    return {_St::_Unwrap, noexcept(_Get_unwrapped(::std::ranges:: end(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return _Val._Unchecked_end();
                } else if constexpr (_Strat == _St::_Unwrap) {
                    return _Get_unwrapped(::std::ranges:: end(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "Should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Unchecked_end::_Cpo _Uend;
    }

         template <class _Rng>
    concept range = requires(_Rng& __r) {
        ::std::ranges:: begin(__r);
        ::std::ranges:: end(__r);
    };

              template <class _Rng>
    concept borrowed_range = range<_Rng> && _Should_range_access<_Rng>;
     
         template <range _Rng>
    using sentinel_t = decltype(::std::ranges:: end(::std:: declval<_Rng&>()));

         template <range _Rng>
    using range_difference_t = iter_difference_t<iterator_t<_Rng>>;

         template <range _Rng>
    using range_value_t = iter_value_t<iterator_t<_Rng>>;

         template <range _Rng>
    using range_reference_t = iter_reference_t<iterator_t<_Rng>>;

         template <range _Rng>
    using range_rvalue_reference_t = iter_rvalue_reference_t<iterator_t<_Rng>>;

         struct _Cbegin_fn {
                 template <class _Ty, class _CTy = _Const_thru_ref<_Ty>>
         constexpr auto operator()(_Ty&& _Val) const
            noexcept(noexcept(::std::ranges:: begin(static_cast<_CTy&&>(_Val))))
            requires requires { ::std::ranges:: begin(static_cast<_CTy&&>(_Val)); } {
            return ::std::ranges:: begin(static_cast<_CTy&&>(_Val));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Cbegin_fn cbegin;
    }

         struct _Cend_fn {
                 template <class _Ty, class _CTy = _Const_thru_ref<_Ty>>
         constexpr auto operator()(_Ty&& _Val) const
            noexcept(noexcept(::std::ranges:: end(static_cast<_CTy&&>(_Val))))
            requires requires { ::std::ranges:: end(static_cast<_CTy&&>(_Val)); } {
            return ::std::ranges:: end(static_cast<_CTy&&>(_Val));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Cend_fn cend;
    }

         namespace _Rbegin {
        template <class _Ty>
        void rbegin(_Ty&) = delete;
        template <class _Ty>
        void rbegin(const _Ty&) = delete;

                 template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            { _Fake_decay_copy(__t.rbegin()) } -> input_or_output_iterator;
        };

        template <class _Ty>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && requires(_Ty __t) {
            { _Fake_decay_copy(rbegin(__t)) } -> input_or_output_iterator;
        };

        template <class _Ty>
        concept _Can_make_reverse = requires(_Ty __t) {
            { ::std::ranges:: begin(__t) } -> bidirectional_iterator;
            { ::std::ranges:: end(__t) } -> same_as<decltype(::std::ranges:: begin(__t))>;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Non_member, _Make_reverse };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(_Fake_decay_copy(::std:: declval<_Ty>().rbegin()))};
                } else if constexpr (_Has_ADL<_Ty>) {
                    return {_St::_Non_member, noexcept(_Fake_decay_copy(rbegin(::std:: declval<_Ty>())))};
                } else if constexpr (_Can_make_reverse<_Ty>) {
                    return {_St::_Make_reverse, noexcept(::std:: make_reverse_iterator(::std::ranges:: end(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return _Val.rbegin();
                } else if constexpr (_Strat == _St::_Non_member) {
                    return rbegin(_Val);
                } else if constexpr (_Strat == _St::_Make_reverse) {
                    return ::std:: make_reverse_iterator(::std::ranges:: end(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Rbegin::_Cpo rbegin;
    }

         namespace _Rend {
        template <class _Ty>
        void rend(_Ty&) = delete;
        template <class _Ty>
        void rend(const _Ty&) = delete;

                 template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            { _Fake_decay_copy(__t.rend()) } -> sentinel_for<decltype(::std::ranges:: rbegin(__t))>;
        };

        template <class _Ty>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && requires(_Ty __t) {
            { _Fake_decay_copy(rend(__t)) } -> sentinel_for<decltype(::std::ranges:: rbegin(__t))>;
        };

        template <class _Ty>
        concept _Can_make_reverse = requires(_Ty __t) {
            { ::std::ranges:: begin(__t) } -> bidirectional_iterator;
            { ::std::ranges:: end(__t) } -> same_as<decltype(::std::ranges:: begin(__t))>;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Non_member, _Make_reverse };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(_Fake_decay_copy(::std:: declval<_Ty>().rend()))};
                } else if constexpr (_Has_ADL<_Ty>) {
                    return {_St::_Non_member, noexcept(_Fake_decay_copy(rend(::std:: declval<_Ty>())))};
                } else if constexpr (_Can_make_reverse<_Ty>) {
                    return {
                        _St::_Make_reverse, noexcept(::std:: make_reverse_iterator(::std::ranges:: begin(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return _Val.rend();
                } else if constexpr (_Strat == _St::_Non_member) {
                    return rend(_Val);
                } else if constexpr (_Strat == _St::_Make_reverse) {
                    return ::std:: make_reverse_iterator(::std::ranges:: begin(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Rend::_Cpo rend;
    }

         struct _Crbegin_fn {
                 template <class _Ty, class _CTy = _Const_thru_ref<_Ty>>
         constexpr auto operator()(_Ty&& _Val) const
            noexcept(noexcept(::std::ranges:: rbegin(static_cast<_CTy&&>(_Val))))
            requires requires { ::std::ranges:: rbegin(static_cast<_CTy&&>(_Val)); } {
            return ::std::ranges:: rbegin(static_cast<_CTy&&>(_Val));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Crbegin_fn crbegin;
    }

         struct _Crend_fn {
                 template <class _Ty, class _CTy = _Const_thru_ref<_Ty>>
         constexpr auto operator()(_Ty&& _Val) const
            noexcept(noexcept(::std::ranges:: rend(static_cast<_CTy&&>(_Val))))
            requires requires { ::std::ranges:: rend(static_cast<_CTy&&>(_Val)); } {
            return ::std::ranges:: rend(static_cast<_CTy&&>(_Val));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Crend_fn crend;
    }

         template <class>
    inline constexpr bool disable_sized_range = false;

         namespace _Size {
        template <class _Ty>
        void size(_Ty&) = delete;
        template <class _Ty>
        void size(const _Ty&) = delete;

                 template <class _Ty, class _UnCV>
        concept _Has_member = !disable_sized_range<_UnCV> && requires(_Ty __t) {
            { _Fake_decay_copy(__t.size()) } -> _Integer_like;
        };

        template <class _Ty, class _UnCV>
        concept _Has_ADL = _Has_class_or_enum_type<_Ty> && !disable_sized_range<_UnCV> && requires(_Ty __t) {
            { _Fake_decay_copy(size(__t)) } -> _Integer_like;
        };

        template <class _Ty>
        concept _Can_difference = requires(_Ty __t) {
            { ::std::ranges:: begin(__t) } -> forward_iterator;
            { ::std::ranges:: end(__t) } -> sized_sentinel_for<decltype(::std::ranges:: begin(__t))>;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Array, _Member, _Non_member, _Subtract };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                using _UnCV = remove_cvref_t<_Ty>;

                if constexpr (is_array_v<_UnCV>) {
                    if constexpr (extent_v<_UnCV> != 0) {
                        return {_St::_Array, true};
                    } else {
                        return {_St::_None};
                    }
                } else if constexpr (_Has_member<_Ty, _UnCV>) {
                    return {_St::_Member, noexcept(_Fake_decay_copy(::std:: declval<_Ty>().size()))};
                } else if constexpr (_Has_ADL<_Ty, _UnCV>) {
                    return {_St::_Non_member, noexcept(_Fake_decay_copy(size(::std:: declval<_Ty>())))};
                } else if constexpr (_Can_difference<_Ty>) {
                    return {_St::_Subtract,
                        noexcept(::std::ranges:: end(::std:: declval<_Ty>()) - ::std::ranges:: begin(::std:: declval<_Ty>()))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <class _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Array) {
                                         return extent_v<remove_cvref_t<_Ty&>>;
                } else if constexpr (_Strat == _St::_Member) {
                    return _Val.size();
                } else if constexpr (_Strat == _St::_Non_member) {
                    return size(_Val);
                } else if constexpr (_Strat == _St::_Subtract) {
                    const auto _Delta = ::std::ranges:: end(_Val) - ::std::ranges:: begin(_Val);
                    return static_cast<_Make_unsigned_like_t<remove_cv_t<decltype(_Delta)>>>(_Delta);
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Size::_Cpo size;
    }

         namespace _Empty {
                 template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            static_cast<bool>(__t.empty());
        };

        template <class _Ty>
        concept _Has_size = requires(_Ty __t) {
            ::std::ranges:: size(__t);
        };

        template <class _Ty>
        concept _Can_begin_end = requires(_Ty __t) {
            { ::std::ranges:: begin(__t) } -> forward_iterator;
            ::std::ranges:: end(__t);
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Size, _Compare };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (is_unbounded_array_v<remove_reference_t<_Ty>>) {
                    return {_St::_None};
                } else if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(static_cast<bool>(::std:: declval<_Ty>().empty()))};
                } else if constexpr (_Has_size<_Ty>) {
                    return {_St::_Size, noexcept(::std::ranges:: size(::std:: declval<_Ty>()))};
                } else if constexpr (_Can_begin_end<_Ty>) {
                    constexpr auto _Nothrow = noexcept(
                        static_cast<bool>(::std::ranges:: begin(::std:: declval<_Ty>()) == ::std::ranges:: end(::std:: declval<_Ty>())));
                    return {_St::_Compare, _Nothrow};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <class _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr bool operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return static_cast<bool>(_Val.empty());
                } else if constexpr (_Strat == _St::_Size) {
                    return ::std::ranges:: size(_Val) == 0;
                } else if constexpr (_Strat == _St::_Compare) {
                    return static_cast<bool>(::std::ranges:: begin(_Val) == ::std::ranges:: end(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Empty::_Cpo empty;
    }

         namespace _Data {
                 template <class _Ty>
        concept _Points_to_object = is_pointer_v<_Ty> && is_object_v<remove_pointer_t<_Ty>>;

        template <class _Ty>
        concept _Has_member = requires(_Ty __t) {
            { _Fake_decay_copy(__t.data()) } -> _Points_to_object;
        };

        template <class _Ty>
        concept _Has_contiguous_iterator = requires(_Ty __t) {
            { ::std::ranges:: begin(__t) } -> contiguous_iterator;
        };
         
        class _Cpo {
        private:
            enum class _St { _None, _Member, _Address };

            template <class _Ty>
             static constexpr _Choice_t<_St> _Choose() noexcept {
                ;
                if constexpr (_Has_member<_Ty>) {
                    return {_St::_Member, noexcept(::std:: declval<_Ty>().data())};
                } else if constexpr (_Has_contiguous_iterator<_Ty>) {
                    return {_St::_Address, noexcept(::std:: to_address(::std::ranges:: begin(::std:: declval<_Ty>())))};
                } else {
                    return {_St::_None};
                }
            }

            template <class _Ty>
            static constexpr _Choice_t<_St> _Choice = _Choose<_Ty>();

        public:
                         template <_Should_range_access _Ty>
                requires (_Choice<_Ty&>._Strategy != _St::_None)
             constexpr auto operator()(_Ty&& _Val) const noexcept(_Choice<_Ty&>._No_throw) {
                constexpr _St _Strat = _Choice<_Ty&>._Strategy;

                if constexpr (_Strat == _St::_Member) {
                    return _Val.data();
                } else if constexpr (_Strat == _St::_Address) {
                    return ::std:: to_address(::std::ranges:: begin(_Val));
                } else {
                    static_assert(_Always_false<_Ty>, "should be unreachable");
                }
            }
                     };
    }  
    inline namespace _Cpos {
        inline constexpr _Data::_Cpo data;
    }

         struct _Cdata_fn {
                 template <class _Ty, class _CTy = _Const_thru_ref<_Ty>>
         constexpr auto operator()(_Ty&& _Val) const
            noexcept(noexcept(::std::ranges:: data(static_cast<_CTy&&>(_Val))))
            requires requires { ::std::ranges:: data(static_cast<_CTy&&>(_Val)); } {
            return ::std::ranges:: data(static_cast<_CTy&&>(_Val));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Cdata_fn cdata;
    }

              template <class _Rng>
    concept sized_range = range<_Rng> && requires(_Rng& __r) {
        ::std::ranges:: size(__r);
    };
     
         template <sized_range _Rng>
    using range_size_t = decltype(::std::ranges:: size(::std:: declval<_Rng&>()));

         struct view_base {};

         template <class _Ty>
    inline constexpr bool enable_view = derived_from<_Ty, view_base>;

              template <class _Ty>
    concept view = range<_Ty> && movable<_Ty> && default_initializable<_Ty> && enable_view<_Ty>;

         template <class _Rng, class _Ty>
    concept output_range = range<_Rng> && output_iterator<iterator_t<_Rng>, _Ty>;

         template <class _Rng>
    concept input_range = range<_Rng> && input_iterator<iterator_t<_Rng>>;

         template <class _Rng>
    concept forward_range = range<_Rng> && forward_iterator<iterator_t<_Rng>>;

         template <class _Rng>
    concept bidirectional_range = range<_Rng> && bidirectional_iterator<iterator_t<_Rng>>;

         template <class _Rng>
    concept random_access_range = range<_Rng> && random_access_iterator<iterator_t<_Rng>>;

         template <class _Rng>
    concept contiguous_range = range<_Rng> && contiguous_iterator<iterator_t<_Rng>> && requires(_Rng& __r) {
        { ::std::ranges:: data(__r) } -> same_as<add_pointer_t<range_reference_t<_Rng>>>;
    };
     
         class _Not_quite_object {
    public:
                                             
        struct _Construct_tag {
            explicit _Construct_tag() = default;
        };

        _Not_quite_object() = delete;

        constexpr explicit _Not_quite_object(_Construct_tag) noexcept {}

        _Not_quite_object(const _Not_quite_object&) = delete;
        _Not_quite_object& operator=(const _Not_quite_object&) = delete;

        void operator&() const = delete;

    protected:
        ~_Not_quite_object() = default;
    };

         class _Advance_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <input_or_output_iterator _It>
        constexpr void operator()(_It& _Where, iter_difference_t<_It> _Off) const {
            if constexpr (random_access_iterator<_It>) {
                _Where += _Off;
            } else {
                if constexpr (!bidirectional_iterator<_It>) {
                    ;
                }

                decltype(auto) _UWhere      = _Get_unwrapped_n(::std:: move(_Where), _Off);
                constexpr bool _Need_rewrap = !is_reference_v<decltype(_Get_unwrapped_n(::std:: move(_Where), _Off))>;

                if constexpr (bidirectional_iterator<_It>) {
                    for (; _Off < 0; ++_Off) {
                        --_UWhere;
                    }
                }

                for (; _Off > 0; --_Off) {
                    ++_UWhere;
                }

                if constexpr (_Need_rewrap) {
                    _Seek_wrapped(_Where, ::std:: move(_UWhere));
                }
            }
        }

        template <input_or_output_iterator _It, sentinel_for<_It> _Se>
        constexpr void operator()(_It& _Where, _Se _Last) const {
            if constexpr (assignable_from<_It&, _Se>) {
                _Where = static_cast<_Se&&>(_Last);
            } else if constexpr (sized_sentinel_for<_Se, _It>) {
                (*this)(_Where, _Last - _Where);
            } else {
                _Adl_verify_range(_Where, _Last);

                decltype(auto) _UWhere      = _Get_unwrapped(static_cast<_It&&>(_Where));
                constexpr bool _Need_rewrap = !is_reference_v<decltype(_Get_unwrapped(static_cast<_It&&>(_Where)))>;
                decltype(auto) _ULast       = _Get_unwrapped(static_cast<_Se&&>(_Last));

                while (_UWhere != _ULast) {
                    ++_UWhere;
                }

                if constexpr (_Need_rewrap) {
                    _Seek_wrapped(_Where, ::std:: move(_UWhere));
                }
            }
        }

        template <input_or_output_iterator _It, sentinel_for<_It> _Se>
        constexpr iter_difference_t<_It> operator()(_It& _Where, iter_difference_t<_It> _Off, _Se _Last) const {
            if constexpr (sized_sentinel_for<_Se, _It>) {
                const iter_difference_t<_It> _Delta = _Last - _Where;
                if ((_Off < 0 && _Off <= _Delta) || (_Off > 0 && _Off >= _Delta)) {
                    if constexpr (assignable_from<_It&, _Se>) {
                        _Where = static_cast<_Se&&>(_Last);
                    } else {
                        (*this)(_Where, _Delta);
                    }
                    return _Off - _Delta;
                }

                (*this)(_Where, _Off);
                return 0;
            } else {
                                 if constexpr (bidirectional_iterator<_It>) {
                    for (; _Off < 0 && _Where != _Last; ++_Off) {
                        --_Where;
                    }
                } else {
                    ;
                }

                for (; _Off > 0 && _Where != _Last; --_Off) {
                    ++_Where;
                }

                return _Off;
            }
        }
    };

    inline constexpr _Advance_fn advance{_Not_quite_object::_Construct_tag{}};

         class _Distance_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <input_or_output_iterator _It, sentinel_for<_It> _Se>
         constexpr iter_difference_t<_It> operator()(_It _First, _Se _Last) const
            noexcept(_Nothrow_distance<_It, _Se>)   {
            if constexpr (sized_sentinel_for<_Se, _It>) {
                return _Last - _First;
            } else {
                _Adl_verify_range(_First, _Last);
                return _Distance_unchecked(_Get_unwrapped(::std:: move(_First)), _Get_unwrapped(::std:: move(_Last)));
            }
        }

        template <range _Rng>
         constexpr range_difference_t<_Rng> operator()(_Rng&& _Range) const
            noexcept(_Nothrow_size<_Rng>)   {
            if constexpr (sized_range<_Rng>) {
                return static_cast<range_difference_t<_Rng>>(::std::ranges:: size(_Range));
            } else {
                return _Distance_unchecked(_Ubegin(_Range), _Uend(_Range));
            }
        }

    private:
        template <class _It, class _Se>
         static constexpr iter_difference_t<_It> _Distance_unchecked(_It _First, const _Se _Last) noexcept(
            _Nothrow_distance<_It, _Se>) {
            ;
            ;

            iter_difference_t<_It> _Count = 0;
            for (; _First != _Last; ++_First) {
                ++_Count;
            }

            return _Count;
        }

        template <class _It, class _Se>
        static constexpr bool _Nothrow_distance = noexcept(
            noexcept(++::std:: declval<_Unwrapped_t<_It>&>() != ::std:: declval<const _Unwrapped_t<_Se>&>()));
        template <class _It, sized_sentinel_for<_It> _Se>
        static constexpr bool _Nothrow_distance<_It, _Se> = noexcept(
            noexcept(::std:: declval<_Se&>() - ::std:: declval<_It&>()));

        template <class _Rng>
        static constexpr bool _Nothrow_size = _Nothrow_distance<iterator_t<_Rng>, sentinel_t<_Rng>>;
        template <sized_range _Rng>
        static constexpr bool _Nothrow_size<_Rng> = noexcept(::std::ranges:: size(::std:: declval<_Rng&>()));
    };

    inline constexpr _Distance_fn distance{_Not_quite_object::_Construct_tag{}};

         class _Ssize_fn {
    public:
                 template <class _Rng>
         constexpr auto operator()(_Rng&& _Range) const requires requires { ::std::ranges:: size(_Range); } {
            using _Sty = _Make_signed_like_t<decltype(::std::ranges:: size(_Range))>;
            using _Ty  = common_type_t<conditional_t<is_integral_v<_Sty>, ptrdiff_t, _Sty>, _Sty>;
            return static_cast<_Ty>(::std::ranges:: size(_Range));
        }
             };

    inline namespace _Cpos {
        inline constexpr _Ssize_fn ssize;
    }

         class _Next_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <input_or_output_iterator _It>
         constexpr _It operator()(_It _Where) const {
            ++_Where;
            return _Where;
        }

        template <input_or_output_iterator _It>
         constexpr _It operator()(_It _Where, const iter_difference_t<_It> _Off) const {
            ::std::ranges:: advance(_Where, _Off);
            return _Where;
        }

        template <input_or_output_iterator _It, sentinel_for<_It> _Se>
         constexpr _It operator()(_It _Where, _Se _Last) const {
            ::std::ranges:: advance(_Where, static_cast<_Se&&>(_Last));
            return _Where;
        }

        template <input_or_output_iterator _It, sentinel_for<_It> _Se>
         constexpr _It operator()(_It _Where, const iter_difference_t<_It> _Off, _Se _Last) const {
            ::std::ranges:: advance(_Where, _Off, static_cast<_Se&&>(_Last));
            return _Where;
        }
    };

    inline constexpr _Next_fn next{_Not_quite_object::_Construct_tag{}};

         class _Prev_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <bidirectional_iterator _It>
         constexpr _It operator()(_It _Where) const {
            --_Where;
            return _Where;
        }

        template <bidirectional_iterator _It>
         constexpr _It operator()(_It _Where, const iter_difference_t<_It> _Off) const {
            ;
            ::std::ranges:: advance(_Where, -_Off);
            return _Where;
        }

        template <bidirectional_iterator _It>
         constexpr _It operator()(_It _Where, const iter_difference_t<_It> _Off, _It _Last) const {
            ;
            ::std::ranges:: advance(_Where, -_Off, static_cast<_It&&>(_Last));
            return _Where;
        }
    };

    inline constexpr _Prev_fn prev{_Not_quite_object::_Construct_tag{}};

         template <forward_iterator _It, sentinel_for<_It> _Se>
     constexpr _It _Find_last_iterator(
        const _It& _First, const _Se& _Last, const iter_difference_t<_It> _Count) {
                 ;
        if constexpr (is_same_v<_It, _Se>) {
            return _Last;
        } else {
            return ::std::ranges:: next(_First, _Count);
        }
    }

         struct equal_to {
                 template <class _Ty1, class _Ty2>
            requires equality_comparable_with<_Ty1, _Ty2>           constexpr bool operator()(_Ty1&& _Left, _Ty2&& _Right) const noexcept(noexcept(
            static_cast<bool>(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right))))   {
            return static_cast<bool>(static_cast<_Ty1&&>(_Left) == static_cast<_Ty2&&>(_Right));
        }
         
        using is_transparent = int;
    };

         struct less {
                 template <class _Ty1, class _Ty2>
            requires totally_ordered_with<_Ty1, _Ty2>           constexpr bool operator()(_Ty1&& _Left, _Ty2&& _Right) const noexcept(noexcept(
            static_cast<bool>(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right))))   {
            return static_cast<bool>(static_cast<_Ty1&&>(_Left) < static_cast<_Ty2&&>(_Right));
        }
         
        using is_transparent = int;
    };

         struct greater {
                 template <class _Ty1, class _Ty2>
            requires totally_ordered_with<_Ty1, _Ty2>           constexpr bool operator()(_Ty1&& _Left, _Ty2&& _Right) const noexcept(noexcept(
            static_cast<bool>(static_cast<_Ty2&&>(_Right) < static_cast<_Ty1&&>(_Left))))   {
            return static_cast<bool>(static_cast<_Ty2&&>(_Right) < static_cast<_Ty1&&>(_Left));
        }
         
        using is_transparent = int;
    };

              template <class _Rng>
    concept common_range = range<_Rng>
        && same_as<iterator_t<_Rng>, sentinel_t<_Rng>>;

         template <class _Ty>
    concept _Can_empty = requires(_Ty __t) { ::std::ranges:: empty(__t); };

    template <class _Derived>
        requires is_class_v<_Derived> && same_as<_Derived, remove_cv_t<_Derived>>
    class view_interface : public view_base {
    private:
         constexpr _Derived& _Cast() noexcept {
            static_assert(derived_from<_Derived, view_interface>,
                "view_interface's template argument D must derive from view_interface<D> (N4849 [view.interface]/2).");
            static_assert(view<_Derived>,
                "view_interface's template argument must model the view concept (N4849 [view.interface]/2).");
            return static_cast<_Derived&>(*this);
        }

         constexpr const _Derived& _Cast() const noexcept {
            static_assert(derived_from<_Derived, view_interface>,
                "view_interface's template argument D must derive from view_interface<D> (N4849 [view.interface]/2).");
            static_assert(view<_Derived>,
                "view_interface's template argument must model the view concept (N4849 [view.interface]/2).");
            return static_cast<const _Derived&>(*this);
        }

    public:
         constexpr bool empty() requires forward_range<_Derived>
        {
            auto& _Self = _Cast();
            return ::std::ranges:: begin(_Self) == ::std::ranges:: end(_Self);
        }

         constexpr bool empty() const requires forward_range<const _Derived>
        {
            auto& _Self = _Cast();
            return ::std::ranges:: begin(_Self) == ::std::ranges:: end(_Self);
        }

        constexpr explicit operator bool() requires _Can_empty<_Derived>
        {
            return !::std::ranges:: empty(_Cast());
        }

        constexpr explicit operator bool() const requires _Can_empty<const _Derived>
        {
            return !::std::ranges:: empty(_Cast());
        }

         constexpr auto data() requires contiguous_iterator<iterator_t<_Derived>>
        {
            return ::std:: to_address(::std::ranges:: begin(_Cast()));
        }

         constexpr auto data() const
            requires range<const _Derived> && contiguous_iterator<iterator_t<const _Derived>>
        {
            return ::std:: to_address(::std::ranges:: begin(_Cast()));
        }

         constexpr auto size()
            requires forward_range<_Derived> && sized_sentinel_for<sentinel_t<_Derived>, iterator_t<_Derived>>
        {
            auto& _Self = _Cast();
            return ::std::ranges:: end(_Self) - ::std::ranges:: begin(_Self);
        }

         constexpr auto size() const requires forward_range<const _Derived>
            && sized_sentinel_for<sentinel_t<const _Derived>, iterator_t<const _Derived>>
        {
            auto& _Self = _Cast();
            return ::std::ranges:: end(_Self) - ::std::ranges:: begin(_Self);
        }

         constexpr decltype(auto) front() requires forward_range<_Derived>
        {
            auto& _Self = _Cast();
            return *::std::ranges:: begin(_Self);
        }

         constexpr decltype(auto) front() const requires forward_range<const _Derived>
        {
            auto& _Self = _Cast();
            return *::std::ranges:: begin(_Self);
        }

         constexpr decltype(auto) back() requires bidirectional_range<_Derived> && common_range<_Derived>
        {
            auto& _Self = _Cast();
            auto _Last = ::std::ranges:: end(_Self);
            return *--_Last;
        }

         constexpr decltype(auto) back() const
            requires bidirectional_range<const _Derived> && common_range<const _Derived>
        {
            auto& _Self = _Cast();
            auto _Last = ::std::ranges:: end(_Self);
            return *--_Last;
        }

        template <random_access_range _Rng = _Derived>
         constexpr decltype(auto) operator[](const range_difference_t<_Rng> _Idx) {
            auto& _Self = _Cast();
            return ::std::ranges:: begin(_Self)[_Idx];
        }

        template <random_access_range _Rng = const _Derived>
         constexpr decltype(auto) operator[](const range_difference_t<_Rng> _Idx) const {
            auto& _Self = _Cast();
            return ::std::ranges:: begin(_Self)[_Idx];
        }
    };

         enum class subrange_kind : bool { unsized, sized };
     }  
  template <size_t _Index, class... _Types>
 constexpr tuple_element_t<_Index, tuple<_Types...>>& get(tuple<_Types...>& _Tuple) noexcept;
template <size_t _Index, class... _Types>
 constexpr const tuple_element_t<_Index, tuple<_Types...>>& get(const tuple<_Types...>& _Tuple) noexcept;
template <size_t _Index, class... _Types>
 constexpr tuple_element_t<_Index, tuple<_Types...>>&& get(tuple<_Types...>&& _Tuple) noexcept;
template <size_t _Index, class... _Types>
 constexpr const tuple_element_t<_Index, tuple<_Types...>>&& get(const tuple<_Types...>&& _Tuple) noexcept;

namespace ranges {
              template <class _From, class _To>
    concept _Convertible_to_non_slicing = convertible_to<_From, _To>
        && !(is_pointer_v<decay_t<_From>>
            && is_pointer_v<decay_t<_To>>
            && _Not_same_as<remove_pointer_t<decay_t<_From>>, remove_pointer_t<decay_t<_To>>>);

    template <class _Ty>
    concept _Pair_like = !is_reference_v<_Ty> && requires(_Ty __t) {
        typename tuple_size<_Ty>::type;
        requires derived_from<tuple_size<_Ty>, integral_constant<size_t, 2>>;
        typename tuple_element_t<0, remove_const_t<_Ty>>;
        typename tuple_element_t<1, remove_const_t<_Ty>>;
        { ::std:: get<0>(__t) } -> convertible_to<const tuple_element_t<0, _Ty>&>;
        { ::std:: get<1>(__t) } -> convertible_to<const tuple_element_t<1, _Ty>&>;
    };

    template <class _Ty, class _First, class _Second>
    concept _Pair_like_convertible_from = !range<_Ty> && _Pair_like<_Ty>
        && constructible_from<_Ty, _First, _Second>
        && _Convertible_to_non_slicing<_First, tuple_element_t<0, _Ty>>
        && convertible_to<_Second, tuple_element_t<1, _Ty>>;

    template <input_or_output_iterator _It, sentinel_for<_It> _Se = _It,
        subrange_kind _Ki = sized_sentinel_for<_Se, _It> ? subrange_kind::sized : subrange_kind::unsized>
        requires (_Ki == subrange_kind::sized || !sized_sentinel_for<_Se, _It>)
    class subrange;
     
    template <class _It, class _Se, subrange_kind _Ki,
        bool _Store = _Ki == subrange_kind::sized && !sized_sentinel_for<_Se, _It>>
    class _Subrange_base : public view_interface<subrange<_It, _Se, _Ki>> {      protected:
        using _Size_type                  = _Make_unsigned_like_t<iter_difference_t<_It>>;
        static constexpr bool _Store_size = true;

        _Size_type _Size = 0;

    public:
        _Subrange_base() = default;
        constexpr explicit _Subrange_base(const _Size_type& _Size_) noexcept : _Size(_Size_) {}
    };

    template <class _It, class _Se, subrange_kind _Ki>
    class _Subrange_base<_It, _Se, _Ki, false> : public view_interface<subrange<_It, _Se, _Ki>> {
    protected:
        using _Size_type                  = _Make_unsigned_like_t<iter_difference_t<_It>>;
        static constexpr bool _Store_size = false;

    public:
        _Subrange_base() = default;
        constexpr explicit _Subrange_base(const _Size_type&) noexcept {}
    };

         template <input_or_output_iterator _It, sentinel_for<_It> _Se, subrange_kind _Ki>
        requires (_Ki == subrange_kind::sized || !sized_sentinel_for<_Se, _It>)
    class subrange : public _Subrange_base<_It, _Se, _Ki> {
    private:
        using _Mybase = _Subrange_base<_It, _Se, _Ki>;
        using typename _Mybase::_Size_type;
        using _Mybase::_Store_size;

                   _It _First{};
          _Se _Last{};
         
        template <class _Rng>
        constexpr subrange(true_type, _Rng&& _Val) : subrange{::std:: forward<_Rng>(_Val), ::std::ranges:: size(_Val)} {
                         ;
        }

        template <class _Rng>
        constexpr subrange(false_type, _Rng&& _Val) : subrange{::std::ranges:: begin(_Val), ::std::ranges:: end(_Val)} {
                         ;
        }

    public:
        subrange() = default;

        template <_Convertible_to_non_slicing<_It> _It2>
        constexpr subrange(_It2 _First_, _Se _Last_) requires (!_Store_size)
            : _First(::std:: move(_First_)), _Last(::std:: move(_Last_)) {}

        template <_Convertible_to_non_slicing<_It> _It2>
        constexpr subrange(_It2 _First_, _Se _Last_, const _Size_type _Size_) requires (_Ki == subrange_kind::sized)
            : _Mybase(_Size_), _First(::std:: move(_First_)), _Last(::std:: move(_Last_)) {
            if constexpr (sized_sentinel_for<_Se, _It>) {
                ;
            }
        }

        template <_Not_same_as<subrange> _Rng>
            requires borrowed_range<_Rng>
                && _Convertible_to_non_slicing<iterator_t<_Rng>, _It>
                && convertible_to<sentinel_t<_Rng>, _Se>
        constexpr subrange(_Rng&& _Val) requires (!_Store_size || sized_range<_Rng>)
            : subrange{bool_constant<_Store_size>{}, ::std:: forward<_Rng>(_Val)} {}

        template <borrowed_range _Rng>
            requires _Convertible_to_non_slicing<iterator_t<_Rng>, _It> && convertible_to<sentinel_t<_Rng>, _Se>
        constexpr subrange(_Rng&& _Val, const _Size_type _Count) requires (_Ki == subrange_kind::sized)
            : subrange{::std::ranges:: begin(_Val), ::std::ranges:: end(_Val), _Count} {}

        template <_Not_same_as<subrange> _Pair_like>
            requires _Pair_like_convertible_from<_Pair_like, const _It&, const _Se&>
        constexpr operator _Pair_like() const {
            return _Pair_like(_First, _Last);
        }

         constexpr _It begin() const requires copyable<_It> {
            return _First;
        }
         constexpr _It begin() requires (!copyable<_It>) {
            return ::std:: move(_First);
        }

         constexpr _Se end() const {
            return _Last;
        }

         constexpr bool empty() const {
            return _First == _Last;
        }

         constexpr _Size_type size() const requires (_Ki == subrange_kind::sized) {
            if constexpr (_Store_size) {
                return this->_Size;
            } else {
                return static_cast<_Size_type>(_Last - _First);
            }
        }

         constexpr subrange next() const & requires forward_iterator<_It> {
            auto _Tmp = *this;
            if (_Tmp._First != _Tmp._Last) {
                ++_Tmp._First;
                if constexpr (_Store_size) {
                    --_Tmp._Size;
                }
            }
            return _Tmp;
        }
         constexpr subrange next(const iter_difference_t<_It> _Count) const & requires forward_iterator<_It> {
            auto _Tmp = *this;
            _Tmp.advance(_Count);
            return _Tmp;
        }

         constexpr subrange next() && {
            if (_First != _Last) {
                ++_First;
                if constexpr (_Store_size) {
                    --this->_Size;
                }
            }
            return ::std:: move(*this);
        }
         constexpr subrange next(const iter_difference_t<_It> _Count) && {
            advance(_Count);
            return ::std:: move(*this);
        }

         constexpr subrange prev() const requires bidirectional_iterator<_It> {
            auto _Tmp = *this;
            --_Tmp._First;
            if constexpr (_Store_size) {
                ++_Tmp._Size;
            }
            return _Tmp;
        }
         constexpr subrange prev(const iter_difference_t<_It> _Count) const
            requires bidirectional_iterator<_It> {
            auto _Tmp = *this;
            _Tmp.advance(-_Count);
            return _Tmp;
        }

        constexpr subrange& advance(const iter_difference_t<_It> _Count) {
            if constexpr (bidirectional_iterator<_It>) {
                if (_Count < 0) {
                    ::std::ranges:: advance(_First, _Count);
                    if constexpr (_Store_size) {
                        this->_Size += static_cast<_Size_type>(-_Count);
                    }
                    return *this;
                }
            }

            const auto _Remainder = ::std::ranges:: advance(_First, _Count, _Last);
            if constexpr (_Store_size) {
                this->_Size -= static_cast<_Size_type>(_Count - _Remainder);
            }
            return *this;
        }
    };
     
    template <input_or_output_iterator _It, sentinel_for<_It> _Se>
    subrange(_It, _Se) -> subrange<_It, _Se>;

    template <input_or_output_iterator _It, sentinel_for<_It> _Se>
    subrange(_It, _Se, _Make_unsigned_like_t<iter_difference_t<_It>>) -> subrange<_It, _Se, subrange_kind::sized>;

    template <borrowed_range _Rng>
    subrange(_Rng&&) -> subrange<iterator_t<_Rng>, sentinel_t<_Rng>,
        (sized_range<_Rng> || sized_sentinel_for<sentinel_t<_Rng>, iterator_t<_Rng>>) ? subrange_kind::sized
                                                                                      : subrange_kind::unsized>;

    template <borrowed_range _Rng>
    subrange(_Rng&&, _Make_unsigned_like_t<range_difference_t<_Rng>>)
        -> subrange<iterator_t<_Rng>, sentinel_t<_Rng>, subrange_kind::sized>;

    template <class _It, class _Se, subrange_kind _Ki>
    inline constexpr bool enable_borrowed_range<subrange<_It, _Se, _Ki>> = true;

         template <size_t _Idx, class _It, class _Se, subrange_kind _Ki>
        requires (_Idx < 2)
     constexpr auto get(const subrange<_It, _Se, _Ki>& _Val) {
        if constexpr (_Idx == 0) {
            return _Val.begin();
        } else {
            return _Val.end();
        }
    }

    template <size_t _Idx, class _It, class _Se, subrange_kind _Ki>
        requires (_Idx < 2)
     constexpr auto get(subrange<_It, _Se, _Ki>&& _Val) {
        if constexpr (_Idx == 0) {
            return _Val.begin();
        } else {
            return _Val.end();
        }
    }
     }  
using ranges::get;

template <class _It, class _Se, ranges::subrange_kind _Ki>
struct tuple_size<ranges::subrange<_It, _Se, _Ki>> : integral_constant<size_t, 2> {};

template <class _It, class _Se, ranges::subrange_kind _Ki>
struct tuple_element<0, ranges::subrange<_It, _Se, _Ki>> {
    using type = _It;
};

template <class _It, class _Se, ranges::subrange_kind _Ki>
struct tuple_element<1, ranges::subrange<_It, _Se, _Ki>> {
    using type = _Se;
};

template <class _It, class _Se, ranges::subrange_kind _Ki>
struct tuple_element<0, const ranges::subrange<_It, _Se, _Ki>> {
    using type = _It;
};

template <class _It, class _Se, ranges::subrange_kind _Ki>
struct tuple_element<1, const ranges::subrange<_It, _Se, _Ki>> {
    using type = _Se;
};

namespace ranges {
         struct dangling {
        constexpr dangling() noexcept = default;
        template <class... _Args>
        constexpr dangling(_Args&&...) noexcept {}
    };

         template <range _Rng>
    using borrowed_iterator_t = conditional_t<borrowed_range<_Rng>, iterator_t<_Rng>, dangling>;

         template <range _Rng>
    using borrowed_subrange_t = conditional_t<borrowed_range<_Rng>, subrange<iterator_t<_Rng>>, dangling>;
}  
struct _Container_proxy;
struct _Iterator_base12;

 struct _Default_sentinel {};  
 template <semiregular>
class move_sentinel;

template <class _Iter>
class move_iterator {
public:
    using iterator_type = _Iter;
    using iterator_concept  = input_iterator_tag;
    using iterator_category = conditional_t<derived_from<_Iter_cat_t<_Iter>, random_access_iterator_tag>,
        random_access_iterator_tag, _Iter_cat_t<_Iter>>;
    using value_type      = _Iter_value_t<_Iter>;
    using difference_type = _Iter_diff_t<_Iter>;
    using pointer         = _Iter;
    using reference = iter_rvalue_reference_t<_Iter>;

    constexpr move_iterator() = default;

    constexpr explicit move_iterator(_Iter _Right) noexcept(is_nothrow_move_constructible_v<_Iter>)          : _Current(::std:: move(_Right)) {}

         template <class _Other>
        requires (!is_same_v<_Other, _Iter>) && convertible_to<const _Other&, _Iter>
    constexpr move_iterator(const move_iterator<_Other>& _Right) noexcept(
        is_nothrow_constructible_v<_Iter, const _Other&>)          : _Current(_Right.base()) {}

    template <class _Other>
        requires (!is_same_v<_Other, _Iter>) && convertible_to<const _Other&, _Iter>
            && assignable_from<_Iter&, const _Other&>
    constexpr move_iterator& operator=(const move_iterator<_Other>& _Right) noexcept(
        is_nothrow_assignable_v<_Iter&, const _Other&>)   {
        _Current = _Right.base();
        return *this;
    }
     
     constexpr const iterator_type& base() const& noexcept   {
        return _Current;
    }
     constexpr iterator_type base() && noexcept(is_nothrow_move_constructible_v<_Iter>)   {
        return ::std:: move(_Current);
    }

     constexpr reference operator*() const {
        return ::std::ranges:: iter_move(_Current);
    }

    [[deprecated("warning STL4031: std::move_iterator::operator->() is deprecated in C++20. You can define _SILENCE_CXX20_MOVE_ITERATOR_ARROW_DEPRECATION_WARNING or _SILENCE_ALL_CXX20_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]]  constexpr pointer operator->() const {
        return _Current;
    }

    constexpr move_iterator& operator++() {
        ++_Current;
        return *this;
    }

    constexpr auto operator++(int) {
        if constexpr (forward_iterator<_Iter>) {
            move_iterator _Tmp = *this;
            ++_Current;
            return _Tmp;
        } else {
            ++_Current;
        }
    }

    constexpr move_iterator& operator--() {
        --_Current;
        return *this;
    }

    constexpr move_iterator operator--(int) {
        move_iterator _Tmp = *this;
        --_Current;
        return _Tmp;
    }

    template <class _Iter2 = _Iter>
     auto operator==(_Default_sentinel _Sentinel) const noexcept
        -> decltype(::std:: declval<const _Iter2&>() == _Sentinel) {
        return _Current == _Sentinel;
    }

    template <class _Iter2 = _Iter>
     auto operator!=(_Default_sentinel _Sentinel) const noexcept
        -> decltype(::std:: declval<const _Iter2&>() != _Sentinel) {
        return _Current != _Sentinel;
    }

     constexpr move_iterator operator+(const difference_type _Off) const {
        return move_iterator(_Current + _Off);
    }

    constexpr move_iterator& operator+=(const difference_type _Off) {
        _Current += _Off;
        return *this;
    }

     constexpr move_iterator operator-(const difference_type _Off) const {
        return move_iterator(_Current - _Off);
    }

    constexpr move_iterator& operator-=(const difference_type _Off) {
        _Current -= _Off;
        return *this;
    }

     constexpr reference operator[](const difference_type _Off) const {
        return ::std::ranges:: iter_move(_Current + _Off);
    }

    template <sentinel_for<_Iter> _Sent>
     friend constexpr bool operator==(const move_iterator& _Left, const move_sentinel<_Sent>& _Right) {
        return _Left._Current == _Right._Get_last();
    }

    template <sized_sentinel_for<_Iter> _Sent>
     friend constexpr difference_type operator-(
        const move_sentinel<_Sent>& _Left, const move_iterator& _Right) {
        return _Left._Get_last() - _Right._Current;
    }

    template <sized_sentinel_for<_Iter> _Sent>
     friend constexpr difference_type operator-(
        const move_iterator& _Left, const move_sentinel<_Sent>& _Right) {
        return _Left._Current - _Right._Get_last();
    }

     friend constexpr reference iter_move(const move_iterator& _It)
        noexcept(noexcept(::std::ranges:: iter_move(_It._Current)))
    {
        return ::std::ranges:: iter_move(_It._Current);
    }

    template <indirectly_swappable<_Iter> _Iter2>
    friend constexpr void iter_swap(const move_iterator& _Left, const move_iterator<_Iter2>& _Right)
        noexcept(noexcept(::std::ranges:: iter_swap(_Left._Current, _Right.base())))
    {
        ::std::ranges:: iter_swap(_Left._Current, _Right.base());
    }

    template <class _Iter2, enable_if_t<_Range_verifiable_v<_Iter, _Iter2>, int> = 0>
    friend constexpr void _Verify_range(const move_iterator& _First, const move_iterator<_Iter2>& _Last) {
        _Verify_range(_First._Current, _Last.base());
    }
    template <sentinel_for<_Iter> _Sent, enable_if_t<_Range_verifiable_v<_Iter, _Sent>, int> = 0>
    friend constexpr void _Verify_range(const move_iterator& _First, const move_sentinel<_Sent>& _Last) {
        _Verify_range(_First._Current, _Last._Get_last());
    }

    using _Prevent_inheriting_unwrap = move_iterator;

    template <class _Iter2 = iterator_type, enable_if_t<_Offset_verifiable_v<_Iter2>, int> = 0>
    constexpr void _Verify_offset(const difference_type _Off) const {
        _Current._Verify_offset(_Off);
    }

    template <class _Iter2 = iterator_type, enable_if_t<_Unwrappable_v<const _Iter2&>, int> = 0>
     constexpr move_iterator<_Unwrapped_t<const _Iter2&>> _Unwrapped() const& {
        return static_cast<move_iterator<_Unwrapped_t<const _Iter2&>>>(_Current._Unwrapped());
    }
    template <class _Iter2 = iterator_type, enable_if_t<_Unwrappable_v<_Iter2>, int> = 0>
     constexpr move_iterator<_Unwrapped_t<_Iter2>> _Unwrapped() && {
        return static_cast<move_iterator<_Unwrapped_t<_Iter2>>>(::std:: move(_Current)._Unwrapped());
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v<iterator_type>;

    template <class _Src, enable_if_t<_Wrapped_seekable_v<iterator_type, const _Src&>, int> = 0>
    constexpr void _Seek_to(const move_iterator<_Src>& _It) {
        _Current._Seek_to(_It.base());
    }
    template <class _Src, enable_if_t<_Wrapped_seekable_v<iterator_type, _Src>, int> = 0>
    constexpr void _Seek_to(move_iterator<_Src>&& _It) {
        _Current._Seek_to(::std:: move(_It).base());
    }

private:
    iterator_type _Current{};
};

template <class _Iter1, class _Iter2>
 constexpr bool operator==(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
         requires requires {
        { _Left.base() == _Right.base() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left.base() == _Right.base(); }


template <class _Iter1, class _Iter2>
 constexpr bool operator<(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
         requires requires {
        { _Left.base() < _Right.base() } -> _Implicitly_convertible_to<bool>;
    }
 { return _Left.base() < _Right.base(); }

template <class _Iter1, class _Iter2>
 constexpr bool operator>(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
         requires requires { _Right < _Left; }
 { return _Right < _Left; }

template <class _Iter1, class _Iter2>
 constexpr bool operator<=(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
         requires requires { _Right < _Left; }
 { return !(_Right < _Left); }

template <class _Iter1, class _Iter2>
 constexpr bool operator>=(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
         requires requires { _Left < _Right; }
 { return !(_Left < _Right); }

template <class _Iter1, three_way_comparable_with<_Iter1> _Iter2>
 constexpr compare_three_way_result_t<_Iter1, _Iter2> operator<=>(
    const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right) {
    return _Left.base() <=> _Right.base();
}

template <class _Iter1, class _Iter2>
 constexpr auto operator-(const move_iterator<_Iter1>& _Left, const move_iterator<_Iter2>& _Right)
    -> decltype(_Left.base() - _Right.base()) {
    return _Left.base() - _Right.base();
}

template <class _Iter>
 constexpr move_iterator<_Iter> operator+(
    typename move_iterator<_Iter>::difference_type _Off, const move_iterator<_Iter>& _Right)
         requires requires {
        { _Right.base() + _Off } -> same_as<_Iter>;      }
 { return move_iterator<_Iter>{_Right.base() + _Off}; }

 template <class _Iter>
 constexpr move_iterator<_Iter> make_move_iterator(_Iter _It) {      return move_iterator<_Iter>(::std:: move(_It));
}

 struct default_sentinel_t {};

 inline constexpr default_sentinel_t default_sentinel{};

 struct unreachable_sentinel_t;
namespace _Unreachable_sentinel_detail {
    struct _Base {
        template <weakly_incrementable _Winc>
         friend constexpr bool operator==(const unreachable_sentinel_t&, const _Winc&) noexcept {
            return false;
        }
    };
}  struct unreachable_sentinel_t : _Unreachable_sentinel_detail::_Base {};  
 inline constexpr unreachable_sentinel_t unreachable_sentinel{};

  
 template <class _Iter>
inline constexpr bool _Iterator_is_contiguous = contiguous_iterator<_Iter>;

template <class _Iter>
 constexpr auto _To_address(const _Iter& _Val) noexcept {
    ;
    return ::std:: to_address(_Val);
}

 
template <class _Iter1, class _Iter2>
inline constexpr bool _Iterators_are_contiguous =
    _Iterator_is_contiguous<_Iter1>&& _Iterator_is_contiguous<_Iter2>;

 template <class _Source, class _Dest>
struct _Ptr_cat_helper {
    using _USource                        = _Unwrap_enum_t<_Source>;
    using _UDest                          = _Unwrap_enum_t<_Dest>;
    static constexpr bool _Really_trivial = conjunction_v<
        bool_constant<sizeof(_USource) == sizeof(_UDest) && is_same_v<bool, _USource> == is_same_v<bool, _UDest>>,
        is_integral<_USource>, is_integral<_UDest>>;
    static constexpr bool _Trivially_copyable = _Really_trivial;
};

template <class _Elem>
struct _Ptr_cat_helper<_Elem, _Elem> {      static constexpr bool _Really_trivial     = is_trivial_v<_Elem>;
    static constexpr bool _Trivially_copyable = is_trivially_copyable_v<_Elem>;
};

template <class _Anything>
struct _Ptr_cat_helper<_Anything*, const _Anything*> {
         static constexpr bool _Really_trivial     = true;
    static constexpr bool _Trivially_copyable = true;
};

template <class _Anything>
struct _Ptr_cat_helper<_Anything*, volatile _Anything*> {
         static constexpr bool _Really_trivial     = true;
    static constexpr bool _Trivially_copyable = true;
};

template <class _Anything>
struct _Ptr_cat_helper<_Anything*, const volatile _Anything*> {
         static constexpr bool _Really_trivial     = true;
    static constexpr bool _Trivially_copyable = true;
};

struct _False_copy_cat {
    static constexpr bool _Really_trivial     = false;
    static constexpr bool _Trivially_copyable = false;
};

 template <class _Source, class _Dest, bool _Non_contiguous = !_Iterators_are_contiguous<_Source, _Dest>>
struct _Ptr_move_cat : _False_copy_cat {};

template <class _Source, class _Dest>
struct _Ptr_move_cat<_Source, _Dest, false>
    : conditional_t<is_trivially_assignable_v<_Iter_ref_t<_Dest>, remove_reference_t<_Iter_ref_t<_Source>>>,
          _Ptr_cat_helper<_Iter_value_t<_Source>, _Iter_value_t<_Dest>>, _False_copy_cat> {};

template <class _Source, class _Dest>
struct _Ptr_move_cat<move_iterator<_Source>, _Dest, true> : _Ptr_move_cat<_Source, _Dest> {};

template <class _Source, class _Dest, bool _Non_contiguous = !_Iterators_are_contiguous<_Source, _Dest>>
struct _Ptr_copy_cat : _False_copy_cat {};

template <class _Source, class _Dest>
struct _Ptr_copy_cat<_Source, _Dest, false>
    : conditional_t<is_trivially_assignable_v<_Iter_ref_t<_Dest>, _Iter_ref_t<_Source>>,
          _Ptr_cat_helper<_Iter_value_t<_Source>, _Iter_value_t<_Dest>>, _False_copy_cat> {};

template <class _Source, class _Dest>
struct _Ptr_copy_cat<move_iterator<_Source>, _Dest, true> : _Ptr_move_cat<_Source, _Dest> {};

template <class _CtgIt, class _OutCtgIt>
_OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {
    auto _FirstPtr              = _To_address(_First);
    auto _LastPtr               = _To_address(_Last);
    auto _DestPtr               = _To_address(_Dest);
    const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
    const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
    char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
    const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
    :: memmove(_Dest_ch, _First_ch, _Count);
    if constexpr (is_pointer_v<_OutCtgIt>) {
        return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);
    } else {
        return _Dest + (_LastPtr - _FirstPtr);
    }
}

template <class _InIt, class _OutIt>
_OutIt _Copy_memmove(move_iterator<_InIt> _First, move_iterator<_InIt> _Last, _OutIt _Dest) {
    return _Copy_memmove(_First.base(), _Last.base(), _Dest);
}

 template <class _It, bool _RequiresMutable = false>
inline constexpr bool _Is_vb_iterator = false;

template <class _InIt, class _OutIt>
constexpr _OutIt _Copy_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {
              if constexpr (_Ptr_copy_cat<_InIt, _OutIt>::_Trivially_copyable) {
        if (!::std:: is_constant_evaluated())
        {
            return _Copy_memmove(_First, _Last, _Dest);
        }
    }

    for (; _First != _Last; ++_Dest, (void) ++_First) {
        *_Dest = *_First;
    }

    return _Dest;
}

template <class _InIt, class _OutIt>
constexpr _OutIt copy(_InIt _First, _InIt _Last, _OutIt _Dest) {      _Adl_verify_range(_First, _Last);
    const auto _UFirst = _Get_unwrapped(_First);
    const auto _ULast  = _Get_unwrapped(_Last);
    const auto _UDest  = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
    _Seek_wrapped(_Dest, _Copy_unchecked(_UFirst, _ULast, _UDest));
    return _Dest;
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
_FwdIt2 copy(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: copy(_First, _Last, _Dest);
}

namespace ranges {
         template <class _To, class _From>
    concept _Convertible_from = convertible_to<_From, _To>;

         template <class _In, class _Out>
    struct in_out_result {
          _In in;
          _Out out;

        template <_Convertible_from<const _In&> _IIn, _Convertible_from<const _Out&> _OOut>
        constexpr operator in_out_result<_IIn, _OOut>() const& {
            return {in, out};
        }

        template <_Convertible_from<_In> _IIn, _Convertible_from<_Out> _OOut>
        constexpr operator in_out_result<_IIn, _OOut>() && {
            return {::std:: move(in), ::std:: move(out)};
        }
    };

         template <class _In, class _Out>
    using copy_result = in_out_result<_In, _Out>;

              template <input_iterator _It, sentinel_for<_It> _Se, weakly_incrementable _Out>
        requires indirectly_copyable<_It, _Out>
     constexpr copy_result<_It, _Out> _Copy_unchecked(_It _First, _Se _Last, _Out _Result) {
                 if constexpr (_Ptr_copy_cat<_It, _Out>::_Trivially_copyable && sized_sentinel_for<_Se, _It>) {
            if (!::std:: is_constant_evaluated()) {
                auto _Final = ::std::ranges:: next(_First, ::std:: move(_Last));
                _Result     = _Copy_memmove(::std:: move(_First), _Final, ::std:: move(_Result));
                return {::std:: move(_Final), ::std:: move(_Result)};
            }
        }

        for (; _First != _Last; ++_First, (void) ++_Result) {
            *_Result = *_First;
        }

        return {::std:: move(_First), ::std:: move(_Result)};
    }

    class _Copy_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

                 template <input_iterator _It, sentinel_for<_It> _Se, weakly_incrementable _Out>
            requires indirectly_copyable<_It, _Out>
        constexpr copy_result<_It, _Out> operator()(_It _First, _Se _Last, _Out _Result) const {
            _Adl_verify_range(_First, _Last);
            auto _UResult = ::std::ranges:: _Copy_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Get_unwrapped(::std:: move(_Last)), ::std:: move(_Result));
            _Seek_wrapped(_First, ::std:: move(_UResult.in));
            return {::std:: move(_First), ::std:: move(_UResult.out)};
        }

        template <input_range _Rng, weakly_incrementable _Out>
            requires indirectly_copyable<iterator_t<_Rng>, _Out>
        constexpr copy_result<borrowed_iterator_t<_Rng>, _Out> operator()(_Rng&& _Range, _Out _Result) const {
            auto _First = ::std::ranges:: begin(_Range);
            auto _UResult =
                ::std::ranges:: _Copy_unchecked(_Get_unwrapped(::std:: move(_First)), _Uend(_Range), ::std:: move(_Result));
            _Seek_wrapped(_First, ::std:: move(_UResult.in));
            return {::std:: move(_First), ::std:: move(_UResult.out)};
        }
             };

    inline constexpr _Copy_fn copy{_Not_quite_object::_Construct_tag{}};
}  
 template <class _InIt, class _Diff, class _OutIt>
constexpr _OutIt copy_n(_InIt _First, _Diff _Count_raw, _OutIt _Dest) {
         _Algorithm_int_t<_Diff> _Count = _Count_raw;
    if (0 < _Count) {
        auto _UFirst = _Get_unwrapped_n(_First, _Count);
        auto _UDest  = _Get_unwrapped_n(_Dest, _Count);
        if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Trivially_copyable) {
            if (!::std:: is_constant_evaluated())
            {
                _UDest = _Copy_memmove(_UFirst, _UFirst + _Count, _UDest);
                _Seek_wrapped(_Dest, _UDest);
                return _Dest;
            }
        }

        for (;;) {
            *_UDest = *_UFirst;
            ++_UDest;
            --_Count;
            if (_Count == 0) {                                                  break;
            }

            ++_UFirst;
        }

        _Seek_wrapped(_Dest, _UDest);
    }

    return _Dest;
}

template <class _ExPo, class _FwdIt1, class _Diff, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
_FwdIt2 copy_n(_ExPo&&, _FwdIt1 _First, _Diff _Count_raw, _FwdIt2 _Dest) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: copy_n(_First, _Count_raw, _Dest);
}

 template <class _CtgIt1, class _CtgIt2>
_CtgIt2 _Copy_backward_memmove(_CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest) {
         auto _FirstPtr              = _To_address(_First);
    auto _LastPtr               = _To_address(_Last);
    auto _DestPtr               = _To_address(_Dest);
    const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));
    const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));
    char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));
    const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);
    auto _Result                = :: memmove(_Dest_ch - _Count, _First_ch, _Count);
    if constexpr (is_pointer_v<_CtgIt2>) {
        return static_cast<_CtgIt2>(_Result);
    } else {
        return _Dest - (_LastPtr - _FirstPtr);
    }
}

template <class _BidIt1, class _BidIt2>
_BidIt2 _Copy_backward_memmove(move_iterator<_BidIt1> _First, move_iterator<_BidIt1> _Last, _BidIt2 _Dest) {
    return _Copy_backward_memmove(_First.base(), _Last.base(), _Dest);
}

template <class _BidIt1, class _BidIt2>
 constexpr _BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {
         if constexpr (_Ptr_copy_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
        if (!::std:: is_constant_evaluated())
        {
            return _Copy_backward_memmove(_First, _Last, _Dest);
        }
    }

    while (_First != _Last) {
        *--_Dest = *--_Last;
    }

    return _Dest;
}

template <class _BidIt1, class _BidIt2>
constexpr _BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {
         _Adl_verify_range(_First, _Last);
    const auto _UFirst = _Get_unwrapped(_First);
    const auto _ULast  = _Get_unwrapped(_Last);
    const auto _UDest  = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
    _Seek_wrapped(_Dest, _Copy_backward_unchecked(_UFirst, _ULast, _UDest));
    return _Dest;
}

template <class _ExPo, class _BidIt1, class _BidIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
_BidIt2 copy_backward(_ExPo&&, _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) noexcept   {
              return ::std:: copy_backward(_First, _Last, _Dest);
}

 template <class _InIt, class _OutIt>
constexpr _OutIt _Move_unchecked(_InIt _First, _InIt _Last, _OutIt _Dest) {
              if constexpr (_Ptr_move_cat<_InIt, _OutIt>::_Trivially_copyable) {
        if (!::std:: is_constant_evaluated())
        {
            return _Copy_memmove(_First, _Last, _Dest);
        }
    }

    for (; _First != _Last; ++_Dest, (void) ++_First) {
        *_Dest = ::std:: move(*_First);
    }

    return _Dest;
}

template <class _InIt, class _OutIt>
constexpr _OutIt move(_InIt _First, _InIt _Last, _OutIt _Dest) {
         _Adl_verify_range(_First, _Last);
    const auto _UFirst = _Get_unwrapped(_First);
    const auto _ULast  = _Get_unwrapped(_Last);
    const auto _UDest  = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
    _Seek_wrapped(_Dest, _Move_unchecked(_UFirst, _ULast, _UDest));
    return _Dest;
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
_FwdIt2 move(_ExPo&&, _FwdIt1 _First, _FwdIt1 _Last, _FwdIt2 _Dest) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: move(_First, _Last, _Dest);
}

 template <class _BidIt1, class _BidIt2>
constexpr _BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {
              if constexpr (_Ptr_move_cat<_BidIt1, _BidIt2>::_Trivially_copyable) {
        if (!::std:: is_constant_evaluated())
        {
            return _Copy_backward_memmove(_First, _Last, _Dest);
        }
    }

    while (_First != _Last) {
        *--_Dest = ::std:: move(*--_Last);
    }

    return _Dest;
}

template <class _BidIt1, class _BidIt2>
constexpr _BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) {
         _Adl_verify_range(_First, _Last);
    const auto _UFirst = _Get_unwrapped(_First);
    const auto _ULast  = _Get_unwrapped(_Last);
    const auto _UDest  = _Get_unwrapped_n(_Dest, -_Idl_distance<_BidIt1>(_UFirst, _ULast));
    _Seek_wrapped(_Dest, _Move_backward_unchecked(_UFirst, _ULast, _UDest));
    return _Dest;
}

template <class _ExPo, class _BidIt1, class _BidIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
_BidIt2 move_backward(_ExPo&&, _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest) noexcept   {
              return ::std:: move_backward(_First, _Last, _Dest);
}

 
template <class _Ty>
struct _Is_character : false_type {};  
template <>
struct _Is_character<char> : true_type {};  
template <>
struct _Is_character<signed char> : true_type {};  
template <>
struct _Is_character<unsigned char> : true_type {};  
template <>
struct _Is_character<char8_t> : true_type {};  
template <class _Ty>
struct _Is_character_or_bool : _Is_character<_Ty>::type {};

template <>
struct _Is_character_or_bool<bool> : true_type {};

template <class _Ty>
struct _Is_character_or_byte_or_bool : _Is_character_or_bool<_Ty>::type {};

template <>
struct _Is_character_or_byte_or_bool<byte> : true_type {};

  template <class _FwdIt, class _Ty, bool = _Iterator_is_contiguous<_FwdIt>>
inline constexpr bool _Fill_memset_is_safe = conjunction_v<is_scalar<_Ty>,
    _Is_character_or_byte_or_bool<_Unwrap_enum_t<remove_reference_t<_Iter_ref_t<_FwdIt>>>>,
    negation<is_volatile<remove_reference_t<_Iter_ref_t<_FwdIt>>>>, is_assignable<_Iter_ref_t<_FwdIt>, const _Ty&>>;

template <class _FwdIt, class _Ty>
inline constexpr bool _Fill_memset_is_safe<_FwdIt, _Ty, false> = false;

template <class _FwdIt, class _Ty, bool = _Iterator_is_contiguous<_FwdIt>>
inline constexpr bool _Fill_zero_memset_is_safe =
    conjunction_v<is_scalar<_Ty>, is_scalar<_Iter_value_t<_FwdIt>>, negation<is_member_pointer<_Iter_value_t<_FwdIt>>>,
        negation<is_volatile<remove_reference_t<_Iter_ref_t<_FwdIt>>>>, is_assignable<_Iter_ref_t<_FwdIt>, const _Ty&>>;

template <class _FwdIt, class _Ty>
inline constexpr bool _Fill_zero_memset_is_safe<_FwdIt, _Ty, false> = false;

template <class _CtgIt, class _Ty>
void _Fill_memset(_CtgIt _Dest, const _Ty _Val, const size_t _Count) {
         _Iter_value_t<_CtgIt> _Dest_val = _Val;
    :: memset(_To_address(_Dest), static_cast<unsigned char>(_Dest_val), _Count);
}

template <class _CtgIt>
void _Fill_zero_memset(_CtgIt _Dest, const size_t _Count) {
    :: memset(_To_address(_Dest), 0, _Count * sizeof(_Iter_value_t<_CtgIt>));
}

template <class _Ty>
 bool _Is_all_bits_zero(const _Ty& _Val) {
         ;
    constexpr _Ty _Zero{};
    return :: memcmp(&_Val, &_Zero, sizeof(_Ty)) == 0;
}

template <class _FwdIt, class _Ty>
constexpr void fill(const _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) {
         _Adl_verify_range(_First, _Last);
    if constexpr (_Is_vb_iterator<_FwdIt, true>) {
        _Fill_vbool(_First, _Last, _Val);
    } else {
        auto _UFirst      = _Get_unwrapped(_First);
        const auto _ULast = _Get_unwrapped(_Last);
        if (!::std:: is_constant_evaluated())
        {
            if constexpr (_Fill_memset_is_safe<decltype(_UFirst), _Ty>) {
                _Fill_memset(_UFirst, _Val, static_cast<size_t>(_ULast - _UFirst));
                return;
            } else if constexpr (_Fill_zero_memset_is_safe<decltype(_UFirst), _Ty>) {
                if (_Is_all_bits_zero(_Val)) {
                    _Fill_zero_memset(_UFirst, static_cast<size_t>(_ULast - _UFirst));
                    return;
                }
            }
        }

        for (; _UFirst != _ULast; ++_UFirst) {
            *_UFirst = _Val;
        }
    }
}

template <class _ExPo, class _FwdIt, class _Ty, _Enable_if_execution_policy_t<_ExPo> = 0>
void fill(_ExPo&&, _FwdIt _First, _FwdIt _Last, const _Ty& _Val) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: fill(_First, _Last, _Val);
}

 template <class _OutIt, class _Diff, class _Ty>
constexpr _OutIt fill_n(_OutIt _Dest, const _Diff _Count_raw, const _Ty& _Val) {
         _Algorithm_int_t<_Diff> _Count = _Count_raw;
    if (0 < _Count) {
        if constexpr (_Is_vb_iterator<_OutIt, true>) {
            const auto _Last = _Dest + static_cast<typename _OutIt::difference_type>(_Count);
            _Fill_vbool(_Dest, _Last, _Val);
            return _Last;
        } else {
            auto _UDest = _Get_unwrapped_n(_Dest, _Count);
            if (!::std:: is_constant_evaluated())
            {
                if constexpr (_Fill_memset_is_safe<decltype(_UDest), _Ty>) {
                    _Fill_memset(_UDest, _Val, static_cast<size_t>(_Count));
                    _Seek_wrapped(_Dest, _UDest + _Count);
                    return _Dest;
                } else if constexpr (_Fill_zero_memset_is_safe<decltype(_UDest), _Ty>) {
                    if (_Is_all_bits_zero(_Val)) {
                        _Fill_zero_memset(_UDest, static_cast<size_t>(_Count));
                        _Seek_wrapped(_Dest, _UDest + _Count);
                        return _Dest;
                    }
                }
            }

            for (; 0 < _Count; --_Count, (void) ++_UDest) {
                *_UDest = _Val;
            }

            _Seek_wrapped(_Dest, _UDest);
        }
    }
    return _Dest;
}

template <class _ExPo, class _FwdIt, class _Diff, class _Ty, _Enable_if_execution_policy_t<_ExPo> = 0>
_FwdIt fill_n(_ExPo&&, _FwdIt _Dest, _Diff _Count_raw, const _Ty& _Val) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: fill_n(_Dest, _Count_raw, _Val);
}

namespace ranges {
         class _Fill_n_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <class _Ty, output_iterator<const _Ty&> _It>
        constexpr _It operator()(_It _First, iter_difference_t<_It> _Count, const _Ty& _Value) const {
            if (_Count > 0) {
                auto _UFirst = _Get_unwrapped_n(::std:: move(_First), _Count);
                if (!::std:: is_constant_evaluated()) {
                    if constexpr (_Fill_memset_is_safe<decltype(_UFirst), _Ty>) {
                        _Fill_memset(_UFirst, _Value, static_cast<size_t>(_Count));
                        _Seek_wrapped(_First, _UFirst + _Count);                          return _First;
                    } else if constexpr (_Fill_zero_memset_is_safe<decltype(_UFirst), _Ty>) {
                        if (_Is_all_bits_zero(_Value)) {
                            _Fill_zero_memset(_UFirst, static_cast<size_t>(_Count));
                            _Seek_wrapped(_First, _UFirst + _Count);                              return _First;
                        }
                    }
                }

                for (; _Count > 0; ++_UFirst, (void) --_Count) {
                    *_UFirst = _Value;
                }

                _Seek_wrapped(_First, ::std:: move(_UFirst));
            }

            return _First;
        }
    };

    inline constexpr _Fill_n_fn fill_n{_Not_quite_object::_Construct_tag{}};
}  
 
  
     template <class _Elem1, class _Elem2,
    bool = sizeof(_Elem1) == sizeof(_Elem2)          && is_integral_v<_Elem1> && !is_volatile_v<_Elem1>          && is_integral_v<_Elem2> && !is_volatile_v<_Elem2>>
inline constexpr bool _Can_memcmp_elements =
    is_same_v<_Elem1, bool> || is_same_v<_Elem2, bool> || static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1);

   template <>
inline constexpr bool _Can_memcmp_elements<byte, byte, false> = true;

   template <class _Ty1, class _Ty2>
inline constexpr bool _Can_memcmp_elements<_Ty1*, _Ty2*, false> = is_same_v<remove_cv_t<_Ty1>, remove_cv_t<_Ty2>>;

template <class _Elem1, class _Elem2>
inline constexpr bool _Can_memcmp_elements<_Elem1, _Elem2, false> = false;

    template <class _Elem1, class _Elem2, class _Pr>
inline constexpr bool _Pred_is_consistent_with_memcmp = false;

  template <class _Elem>
inline constexpr bool _Pred_is_consistent_with_memcmp<_Elem, _Elem, equal_to<_Elem>> = true;

 template <class _Elem1, class _Elem2>
inline constexpr bool _Pred_is_consistent_with_memcmp<_Elem1, _Elem2, equal_to<>> = true;

 template <class _Elem1, class _Elem2>
inline constexpr bool _Pred_is_consistent_with_memcmp<_Elem1, _Elem2, ::std::ranges:: equal_to> = true;

   template <class _Elem1, class _Elem2, class _Pr>
inline constexpr bool _Can_memcmp_elements_with_pred = _Can_memcmp_elements<_Elem1, _Elem2>      && _Pred_is_consistent_with_memcmp<_Elem1, _Elem2, _Pr>;

   template <class _Iter1, class _Iter2, class _Pr>
inline constexpr bool _Equal_memcmp_is_safe_helper = _Iterators_are_contiguous<_Iter1, _Iter2>      && _Can_memcmp_elements_with_pred<remove_const_t<remove_reference_t<_Iter_ref_t<_Iter1>>>,
        remove_const_t<remove_reference_t<_Iter_ref_t<_Iter2>>>, _Pr>;

template <class _Iter1, class _Iter2, class _Pr>
inline constexpr bool _Equal_memcmp_is_safe =
    _Equal_memcmp_is_safe_helper<remove_const_t<_Iter1>, remove_const_t<_Iter2>, _Pr>;

template <class _CtgIt1, class _CtgIt2>
 int _Memcmp_ranges(_CtgIt1 _First1, _CtgIt1 _Last1, _CtgIt2 _First2) {
    ;
    const auto _First1_ch = reinterpret_cast<const char*>(_To_address(_First1));
    const auto _Last1_ch  = reinterpret_cast<const char*>(_To_address(_Last1));
    const auto _First2_ch = reinterpret_cast<const char*>(_To_address(_First2));
    return :: memcmp(_First1_ch, _First2_ch, static_cast<size_t>(_Last1_ch - _First1_ch));
}

template <class _CtgIt1, class _CtgIt2>
 int _Memcmp_count(_CtgIt1 _First1, _CtgIt2 _First2, const size_t _Count) {
    ;
    const auto _First1_ch = reinterpret_cast<const char*>(_To_address(_First1));
    const auto _First2_ch = reinterpret_cast<const char*>(_To_address(_First2));
    return :: memcmp(_First1_ch, _First2_ch, _Count * sizeof(_Iter_value_t<_CtgIt1>));
}

template <class _InIt1, class _InIt2, class _Pr>
 constexpr bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Pr _Pred) {
         _Adl_verify_range(_First1, _Last1);
    auto _UFirst1      = _Get_unwrapped(_First1);
    const auto _ULast1 = _Get_unwrapped(_Last1);
    auto _UFirst2      = _Get_unwrapped_n(_First2, _Idl_distance<_InIt1>(_UFirst1, _ULast1));
    if constexpr (_Equal_memcmp_is_safe<decltype(_UFirst1), decltype(_UFirst2), _Pr>) {
        if (!::std:: is_constant_evaluated())
        {
            return _Memcmp_ranges(_UFirst1, _ULast1, _UFirst2) == 0;
        }
    }

    for (; _UFirst1 != _ULast1; ++_UFirst1, (void) ++_UFirst2) {
        if (!_Pred(*_UFirst1, *_UFirst2)) {
            return false;
        }
    }

    return true;
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, class _Pr, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
    _Pr _Pred) noexcept;  
template <class _InIt1, class _InIt2>
 constexpr bool equal(const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2) {
         return ::std:: equal(_First1, _Last1, _First2, equal_to<>{});
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2) noexcept
  {
         return ::std:: equal(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, equal_to{});
}

template <class _InIt1, class _InIt2, class _Pr>
 constexpr bool equal(
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred) {
         _Adl_verify_range(_First1, _Last1);
    _Adl_verify_range(_First2, _Last2);
    auto _UFirst1      = _Get_unwrapped(_First1);
    const auto _ULast1 = _Get_unwrapped(_Last1);
    auto _UFirst2      = _Get_unwrapped(_First2);
    const auto _ULast2 = _Get_unwrapped(_Last2);
    if constexpr (_Is_random_iter_v<_InIt1> && _Is_random_iter_v<_InIt2>) {
        if (_ULast1 - _UFirst1 != _ULast2 - _UFirst2) {
            return false;
        }

        return ::std:: equal(_UFirst1, _ULast1, _UFirst2, _Pass_fn(_Pred));
    } else {
        for (;;) {
            if (_UFirst1 == _ULast1) {
                return _UFirst2 == _ULast2;
            }

            if (_UFirst2 == _ULast2) {
                return false;
            }

            if (!_Pred(*_UFirst1, *_UFirst2)) {
                return false;
            }

            ++_UFirst1;
            ++_UFirst2;
        }
    }
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, class _Pr, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
    const _FwdIt2 _Last2, _Pr _Pred) noexcept;  
template <class _InIt1, class _InIt2>
 constexpr bool equal(
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2) {
         return ::std:: equal(_First1, _Last1, _First2, _Last2, equal_to<>{});
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool equal(_ExPo&& _Exec, const _FwdIt1 _First1, const _FwdIt1 _Last1, const _FwdIt2 _First2,
    const _FwdIt2 _Last2) noexcept   {
         return ::std:: equal(::std:: forward<_ExPo>(_Exec), _First1, _Last1, _First2, _Last2, equal_to{});
}

namespace ranges {
         template <forward_range _Rng, class _It>
     constexpr iterator_t<_Rng> _Rewrap_iterator(_Rng&& _Range, _It&& _Val) {
        ;

        if constexpr (is_same_v<remove_cvref_t<_It>, iterator_t<_Rng>>) {
            return ::std:: forward<_It>(_Val);
        } else {
            auto _Result = ::std::ranges:: begin(_Range);
            _Result._Seek_to(::std:: forward<_It>(_Val));
            return _Result;
        }
    }

         template <class _In1, class _In2>
    struct in_in_result {
          _In1 in1;
          _In2 in2;

        template <_Convertible_from<const _In1&> _IIn1, _Convertible_from<const _In2&> _IIn2>
        constexpr operator in_in_result<_IIn1, _IIn2>() const& {
            return {in1, in2};
        }

        template <_Convertible_from<_In1> _IIn1, _Convertible_from<_In2> _IIn2>
        constexpr operator in_in_result<_IIn1, _IIn2>() && {
            return {::std:: move(in1), ::std:: move(in2)};
        }
    };

         template <class _In1, class _In2>
    using mismatch_result = in_in_result<_In1, _In2>;

         class _Mismatch_fn : private _Not_quite_object {
    private:
        template <class _It1, class _It2, class _Pr, class _Pj1, class _Pj2>
         static constexpr mismatch_result<_It1, _It2> _Mismatch_n(
            _It1 _First1, _It2 _First2, iter_difference_t<_It1> _Count, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
            auto _UFirst1 = _Get_unwrapped(::std:: move(_First1));
            auto _UFirst2 = _Get_unwrapped(::std:: move(_First2));

            for (; _Count != 0; ++_UFirst1, (void) ++_UFirst2, --_Count) {
                if (!::std:: invoke(_Pred, ::std:: invoke(_Proj1, *_UFirst1), ::std:: invoke(_Proj2, *_UFirst2))) {
                    break;
                }
            }

            _Seek_wrapped(_First1, ::std:: move(_UFirst1));
            _Seek_wrapped(_First2, ::std:: move(_UFirst2));
            return {::std:: move(_First1), ::std:: move(_First2)};
        }

        template <class _It1, class _Se1, class _It2, class _Se2, class _Pr, class _Pj1, class _Pj2>
         static constexpr mismatch_result<_It1, _It2> _Mismatch_4(
            _It1 _First1, _Se1 _Last1, _It2 _First2, _Se2 _Last2, _Pr _Pred, _Pj1 _Proj1, _Pj2 _Proj2) {
            auto _UFirst1      = _Get_unwrapped(::std:: move(_First1));
            const auto _ULast1 = _Get_unwrapped(::std:: move(_Last1));
            auto _UFirst2      = _Get_unwrapped(::std:: move(_First2));
            const auto _ULast2 = _Get_unwrapped(::std:: move(_Last2));

            for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++_UFirst1, (void) ++_UFirst2) {
                if (!::std:: invoke(_Pred, ::std:: invoke(_Proj1, *_UFirst1), ::std:: invoke(_Proj2, *_UFirst2))) {
                    break;
                }
            }

            _Seek_wrapped(_First1, ::std:: move(_UFirst1));
            _Seek_wrapped(_First2, ::std:: move(_UFirst2));
            return {::std:: move(_First1), ::std:: move(_First2)};
        }

    public:
        using _Not_quite_object::_Not_quite_object;

                 template <input_iterator _It1, sentinel_for<_It1> _Se1, input_iterator _It2, sentinel_for<_It2> _Se2,
            class _Pr = ranges::equal_to, class _Pj1 = identity, class _Pj2 = identity>
            requires indirectly_comparable<_It1, _It2, _Pr, _Pj1, _Pj2>
         constexpr mismatch_result<_It1, _It2> operator()(_It1 _First1, _Se1 _Last1,
            _It2 _First2, _Se2 _Last2, _Pr _Pred = {}, _Pj1 _Proj1 = {}, _Pj2 _Proj2 = {}) const {
            _Adl_verify_range(_First1, _Last1);
            _Adl_verify_range(_First2, _Last2);

            if constexpr (sized_sentinel_for<_Se1, _It1> && sized_sentinel_for<_Se2, _It2>) {
                iter_difference_t<_It1> _Count1 = _Last1 - _First1;
                const iter_difference_t<_It2> _Count2 = _Last2 - _First2;
                if (_Count1 > _Count2) {
                    _Count1 = static_cast<decltype(_Count1)>(_Count2);
                }

                return _Mismatch_n(::std:: move(_First1), ::std:: move(_First2), _Count1,
                    _Pass_fn(_Pred), _Pass_fn(_Proj1), _Pass_fn(_Proj2));
            } else {
                return _Mismatch_4(::std:: move(_First1), ::std:: move(_Last1), ::std:: move(_First2), ::std:: move(_Last2),
                    _Pass_fn(_Pred), _Pass_fn(_Proj1), _Pass_fn(_Proj2));
            }
        }

        template <input_range _Rng1, input_range _Rng2, class _Pr = ranges::equal_to, class _Pj1 = identity,
            class _Pj2 = identity>
            requires indirectly_comparable<iterator_t<_Rng1>, iterator_t<_Rng2>, _Pr, _Pj1, _Pj2>
         constexpr mismatch_result<borrowed_iterator_t<_Rng1>, borrowed_iterator_t<_Rng2>> operator()(
            _Rng1&& _Range1, _Rng2&& _Range2, _Pr _Pred = {}, _Pj1 _Proj1 = {}, _Pj2 _Proj2 = {}) const {
            if constexpr (sized_range<_Rng1> && sized_range<_Rng2>) {
                range_difference_t<_Rng1> _Count1 = ::std::ranges:: distance(_Range1);
                const range_difference_t<_Rng2> _Count2 = ::std::ranges:: distance(_Range2);
                if (_Count1 > _Count2) {
                    _Count1 = static_cast<range_difference_t<_Rng1>>(_Count2);
                }

                return _Mismatch_n(::std::ranges:: begin(_Range1), ::std::ranges:: begin(_Range2), _Count1,
                    _Pass_fn(_Pred), _Pass_fn(_Proj1), _Pass_fn(_Proj2));
            } else {
                return _Mismatch_4(::std::ranges:: begin(_Range1), ::std::ranges:: end(_Range1),
                    ::std::ranges:: begin(_Range2), ::std::ranges:: end(_Range2),
                    _Pass_fn(_Pred), _Pass_fn(_Proj1), _Pass_fn(_Proj2));
            }
        }
             };

    inline constexpr _Mismatch_fn mismatch{_Not_quite_object::_Construct_tag{}};
}  
 template <class _Elem1, class _Elem2, class _FTy>
struct _Lex_compare_check_element_types_helper
    : bool_constant<
          conjunction_v<_Is_character<_Elem1>, _Is_character<_Elem2>, _Is_character<_FTy>, is_unsigned<_FTy>>> {
     };

template <class _Elem1, class _Elem2>
struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
    : bool_constant<
          conjunction_v<_Is_character<_Elem1>, _Is_character<_Elem2>, is_unsigned<_Elem1>, is_unsigned<_Elem2>>> {
     };

template <>
struct _Lex_compare_check_element_types_helper<byte, byte, byte> : true_type {
     };

template <>
struct _Lex_compare_check_element_types_helper<byte, byte, void> : true_type {
     };

template <class _Memcmp_pr>
struct _Lex_compare_optimize {
    explicit _Lex_compare_optimize() = default;

    using _Pred = _Memcmp_pr;
};  
template <class _Memcmp_pr, class _Obj1, class _Obj2, class _FTy>
using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
    _Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value, _Memcmp_pr,
    void>>;  
template <class _InIt1, class _InIt2, class _Pr>
constexpr auto _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&) {
         return _Lex_compare_optimize<void>{};
}

template <class _CtgIt1, class _CtgIt2, class _FTy, enable_if_t<_Iterators_are_contiguous<_CtgIt1, _CtgIt2>, int> = 0>
constexpr auto _Lex_compare_memcmp_classify(const _CtgIt1&, const _CtgIt2&, const less<_FTy>&) {
         return _Lex_compare_check_element_types<less<int>, remove_reference_t<_Iter_ref_t<_CtgIt1>>,
        remove_reference_t<_Iter_ref_t<_CtgIt2>>, _FTy>{};
}

template <class _CtgIt1, class _CtgIt2, class _FTy, enable_if_t<_Iterators_are_contiguous<_CtgIt1, _CtgIt2>, int> = 0>
constexpr auto _Lex_compare_memcmp_classify(const _CtgIt1&, const _CtgIt2&, const greater<_FTy>&) {
         return _Lex_compare_check_element_types<greater<int>, remove_reference_t<_Iter_ref_t<_CtgIt1>>,
        remove_reference_t<_Iter_ref_t<_CtgIt2>>, _FTy>{};
}

template <class _CtgIt1, class _CtgIt2, enable_if_t<_Iterators_are_contiguous<_CtgIt1, _CtgIt2>, int> = 0>
constexpr auto _Lex_compare_memcmp_classify(const _CtgIt1&, const _CtgIt2&, const ::std::ranges:: less&) {
         return _Lex_compare_check_element_types<less<int>, remove_reference_t<_Iter_ref_t<_CtgIt1>>,
        remove_reference_t<_Iter_ref_t<_CtgIt2>>, void>{};
}

template <class _CtgIt1, class _CtgIt2, enable_if_t<_Iterators_are_contiguous<_CtgIt1, _CtgIt2>, int> = 0>
constexpr auto _Lex_compare_memcmp_classify(const _CtgIt1&, const _CtgIt2&, const ::std::ranges:: greater&) {
         return _Lex_compare_check_element_types<greater<int>, remove_reference_t<_Iter_ref_t<_CtgIt1>>,
        remove_reference_t<_Iter_ref_t<_CtgIt2>>, void>{};
}

template <class _InIt1, class _InIt2, class _Pr>
 constexpr bool _Lex_compare_unchecked(
    _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<void>) {
         for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void) ++_First2) {          if (static_cast<bool>(_Pred(*_First1, *_First2))) {
            return true;
        } else if (_Pred(*_First2, *_First1)) {
            return false;
        }
    }

    return _First1 == _Last1 && _First2 != _Last2;
}

template <class _CtgIt1, class _CtgIt2, class _Pr, class _Memcmp_pr>
 constexpr bool _Lex_compare_unchecked(
    _CtgIt1 _First1, _CtgIt1 _Last1, _CtgIt2 _First2, _CtgIt2 _Last2, _Pr _Pred, _Lex_compare_optimize<_Memcmp_pr>) {
         if (::std:: is_constant_evaluated()) {
        return _Lex_compare_unchecked(_First1, _Last1, _First2, _Last2, _Pred, _Lex_compare_optimize<void>{});
    }
    (void) _Pred;
    const auto _Num1 = static_cast<size_t>(_Last1 - _First1);
    const auto _Num2 = static_cast<size_t>(_Last2 - _First2);
    const int _Ans   = _Memcmp_count(_First1, _First2, (::std:: min)(_Num1, _Num2));
    return _Memcmp_pr{}(_Ans, 0) || (_Ans == 0 && _Num1 < _Num2);
}

template <class _InIt1, class _InIt2, class _Pr>
 constexpr bool lexicographical_compare(
    _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Pr _Pred) {
         _Adl_verify_range(_First1, _Last1);
    _Adl_verify_range(_First2, _Last2);
    const auto _UFirst1 = _Get_unwrapped(_First1);
    const auto _ULast1  = _Get_unwrapped(_Last1);
    const auto _UFirst2 = _Get_unwrapped(_First2);
    const auto _ULast2  = _Get_unwrapped(_Last2);
    return _Lex_compare_unchecked(
        _UFirst1, _ULast1, _UFirst2, _ULast2, _Pass_fn(_Pred), _Lex_compare_memcmp_classify(_UFirst1, _UFirst2, _Pred));
}

template <class _InIt1, class _InIt2>
 constexpr bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2) {
         return ::std:: lexicographical_compare(_First1, _Last1, _First2, _Last2, less<>{});
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, class _Pr, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool lexicographical_compare(
    _ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: lexicographical_compare(_First1, _Last1, _First2, _Last2, _Pass_fn(_Pred));
}

template <class _ExPo, class _FwdIt1, class _FwdIt2, _Enable_if_execution_policy_t<_ExPo> = 0>
 bool lexicographical_compare(
    _ExPo&&, _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2) noexcept   {
              static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    static_assert(_Is_fwd_iter_v<_Iter>, "Parallel algorithms require forward iterators or stronger.");
    return ::std:: lexicographical_compare(_First1, _Last1, _First2, _Last2);
}

 template <class _InIt1, class _InIt2, class _Cmp>
 constexpr auto lexicographical_compare_three_way(
    _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2, _Cmp _Comp) -> decltype(_Comp(*_First1, *_First2)) {
    _Adl_verify_range(_First1, _Last1);
    _Adl_verify_range(_First2, _Last2);
    auto _UFirst1      = _Get_unwrapped(_First1);
    const auto _ULast1 = _Get_unwrapped(_Last1);
    auto _UFirst2      = _Get_unwrapped(_First2);
    const auto _ULast2 = _Get_unwrapped(_Last2);
    using _UIt1        = decltype(_UFirst1);
    using _UIt2        = decltype(_UFirst2);
    using _Ty1         = remove_const_t<remove_pointer_t<_UIt1>>;
    using _Ty2         = remove_const_t<remove_pointer_t<_UIt2>>;

    if constexpr (
        conjunction_v<is_same<_Cmp, compare_three_way>, bool_constant<_Iterators_are_contiguous<_UIt1, _UIt2>>,
            disjunction<
                conjunction<is_same<_Ty1, byte>, is_same<_Ty2, byte>>,
                conjunction<_Is_character<_Ty1>, is_unsigned<_Ty1>, _Is_character<_Ty2>, is_unsigned<_Ty2>>>>) {
        if (!::std:: is_constant_evaluated()) {
            const auto _Num1 = static_cast<size_t>(_ULast1 - _UFirst1);
            const auto _Num2 = static_cast<size_t>(_ULast2 - _UFirst2);
            const int _Ans   = _Memcmp_count(_UFirst1, _UFirst2, (::std:: min)(_Num1, _Num2));
            if (_Ans == 0) {
                return _Num1 <=> _Num2;
            } else {
                return _Ans <=> 0;
            }
        }
    }

    for (;;) {
        if (_UFirst1 == _ULast1) {
            return _UFirst2 == _ULast2 ? strong_ordering::equal : strong_ordering::less;
        }

        if (_UFirst2 == _ULast2) {
            return strong_ordering::greater;
        }

        if (const auto _CmpResult = _Comp(*_UFirst1, *_UFirst2); _CmpResult != 0) {
            return _CmpResult;
        }

        ++_UFirst1;
        ++_UFirst2;
    }
}

template <class _InIt1, class _InIt2>
 constexpr auto lexicographical_compare_three_way(
    _InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _InIt2 _Last2) {
    return ::std:: lexicographical_compare_three_way(_First1, _Last1, _First2, _Last2, compare_three_way{});
}

 template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag, false_type) {
         return (-128) <= _Val && _Val <= 127;
}

template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type, false_type) {
         return _Val <= 127 || static_cast<_Ty>((-128)) <= _Val;
}

template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type, false_type) {
         return _Val <= 127;
}

template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag, false_type) {
         return 0 <= _Val && _Val <= 0xff;
}

template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag, false_type) {
         return _Val <= 0xff;
}

template <class _Ty>
 constexpr bool _Within_limits(const _Ty& _Val, _Any_tag, _Any_tag, _Any_tag, true_type) {
         return _Val == true || _Val == false;
}

template <class _InIt, class _Ty>
 constexpr bool _Within_limits(const _InIt&, const _Ty& _Val) {
         using _Elem = _Iter_value_t<_InIt>;
    return _Within_limits(_Val, bool_constant<is_signed_v<_Elem>>{}, bool_constant<is_signed_v<_Ty>>{},
        bool_constant<-1 == static_cast<_Ty>(-1)>{}, bool_constant<is_same_v<_Elem, bool>>{});
}

template <class _InIt>
 constexpr bool _Within_limits(const _InIt&, const bool&) {      return true;
}

template <class _InIt>
 constexpr bool _Within_limits(const _InIt&, const byte&) {      return true;
}

template <class _Iter, class _Ty>
inline constexpr bool _Memchr_in_find_is_safe =
    _Iterator_is_contiguous<_Iter>&&
        disjunction_v<conjunction<is_integral<_Ty>, _Is_character_or_bool<_Iter_value_t<_Iter>>>
            ,
            conjunction<is_same<_Ty, byte>, is_same<_Iter_value_t<_Iter>, byte>>
            > && !is_volatile_v<remove_reference_t<_Iter_ref_t<_Iter>>>;

template <class _InIt, class _Ty>
 constexpr _InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, false_type) {
         for (; _First != _Last; ++_First) {
        if (*_First == _Val) {
            break;
        }
    }

    return _First;
}

template <class _InIt, class _Ty>
 constexpr _InIt _Find_unchecked1(_InIt _First, const _InIt _Last, const _Ty& _Val, true_type) {
         if (!_Within_limits(_First, _Val)) {
        return _Last;
    }

    if (::std:: is_constant_evaluated()) {
        using _Elem = _Iter_value_t<_InIt>;
        return _Find_unchecked1(_First, _Last, static_cast<_Elem>(_Val), false_type{});
    }
    const auto _First_ptr = _To_address(_First);
    const auto _Result    = static_cast<remove_reference_t<_Iter_ref_t<_InIt>>*>(
        :: memchr(_First_ptr, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
    if constexpr (is_pointer_v<_InIt>) {
        return _Result ? _Result : _Last;
    } else {
        return _Result ? _First + (_Result - _First_ptr) : _Last;
    }
}

template <class _InIt, class _Ty>
 constexpr _InIt _Find_unchecked(const _InIt _First, const _InIt _Last, const _Ty& _Val) {
              return _Find_unchecked1(_First, _Last, _Val, bool_constant<_Memchr_in_find_is_safe<_InIt, _Ty>>{});
}

template <class _InIt, class _Ty>
 constexpr _InIt find(_InIt _First, const _InIt _Last, const _Ty& _Val) {      _Adl_verify_range(_First, _Last);
    _Seek_wrapped(_First, _Find_unchecked(_Get_unwrapped(_First), _Get_unwrapped(_Last), _Val));
    return _First;
}

template <class _ExPo, class _FwdIt, class _Ty, _Enable_if_execution_policy_t<_ExPo> = 0>
 _FwdIt find(_ExPo&& _Exec, _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) noexcept;  
namespace ranges {
                   template <input_iterator _It, sentinel_for<_It> _Se, class _Ty, class _Pj = identity>
        requires indirect_binary_predicate<ranges::equal_to, projected<_It, _Pj>, const _Ty*>
     constexpr _It _Find_unchecked(_It _First, const _Se _Last, const _Ty& _Val, _Pj _Proj = {}) {
                 if constexpr (_Memchr_in_find_is_safe<_It, _Ty> && sized_sentinel_for<_Se, _It> && same_as<_Pj, identity>) {
            if (!::std:: is_constant_evaluated()) {
                if (!_Within_limits(_First, _Val)) {
                    return ::std::ranges:: next(::std:: move(_First), _Last);
                }

                const auto _First_ptr = ::std:: to_address(_First);
                const auto _Result    = static_cast<remove_reference_t<_Iter_ref_t<_It>>*>(
                    :: memchr(_First_ptr, static_cast<unsigned char>(_Val), static_cast<size_t>(_Last - _First)));
                if (_Result) {
                    if constexpr (is_pointer_v<_It>) {
                        return _Result;
                    } else {
                        return ::std::ranges:: next(::std:: move(_First), _Result - _First_ptr);
                    }
                } else {
                    return ::std::ranges:: next(::std:: move(_First), _Last);
                }
            }
        }

        for (; _First != _Last; ++_First) {
            if (::std:: invoke(_Proj, *_First) == _Val) {
                break;
            }
        }

        return _First;
    }

    class _Find_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

                 template <input_iterator _It, sentinel_for<_It> _Se, class _Ty, class _Pj = identity>
            requires indirect_binary_predicate<ranges::equal_to, projected<_It, _Pj>, const _Ty*>
         constexpr _It operator()(_It _First, _Se _Last, const _Ty& _Val, _Pj _Proj = {}) const {
            _Adl_verify_range(_First, _Last);
            auto _UResult = ::std::ranges:: _Find_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Get_unwrapped(::std:: move(_Last)), _Val, _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }

        template <input_range _Rng, class _Ty, class _Pj = identity>
            requires indirect_binary_predicate<ranges::equal_to, projected<iterator_t<_Rng>, _Pj>, const _Ty*>
         constexpr borrowed_iterator_t<_Rng> operator()(
            _Rng&& _Range, const _Ty& _Val, _Pj _Proj = {}) const {
            auto _First = ::std::ranges:: begin(_Range);
            auto _UResult =
                ::std::ranges:: _Find_unchecked(_Get_unwrapped(::std:: move(_First)), _Uend(_Range), _Val, _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }
             };

    inline constexpr _Find_fn find{_Not_quite_object::_Construct_tag{}};
}  
 template <class _InIt, class _Ty>
 constexpr _Iter_diff_t<_InIt> count(const _InIt _First, const _InIt _Last, const _Ty& _Val) {
         _Adl_verify_range(_First, _Last);
    auto _UFirst               = _Get_unwrapped(_First);
    const auto _ULast          = _Get_unwrapped(_Last);
    _Iter_diff_t<_InIt> _Count = 0;

    for (; _UFirst != _ULast; ++_UFirst) {
        if (*_UFirst == _Val) {
            ++_Count;
        }
    }

    return _Count;
}

template <class _ExPo, class _FwdIt, class _Ty, _Enable_if_execution_policy_t<_ExPo> = 0>
 _Iter_diff_t<_FwdIt> count(
    _ExPo&& _Exec, const _FwdIt _First, const _FwdIt _Last, const _Ty& _Val) noexcept;  
 template <class _InIt, class _Ty, class _Pr>
 constexpr _InIt _Find_pr(_InIt _First, const _InIt _Last, const _Ty& _Val, _Pr _Pred) {
    for (; _First != _Last; ++_First) {
        if (_Pred(*_First, _Val)) {
            break;
        }
    }

    return _First;
}

template <class _InIt, class _Ty, class _Pr>
 constexpr _Iter_diff_t<_InIt> _Count_pr(_InIt _First, const _InIt _Last, const _Ty& _Val, _Pr _Pred) {
    _Iter_diff_t<_InIt> _Count = 0;

    for (; _First != _Last; ++_First) {
        if (_Pred(*_First, _Val)) {
            ++_Count;
        }
    }

    return _Count;
}

template <class _FwdIt1, class _FwdIt2, class _Pr>
 constexpr bool _Check_match_counts(
    const _FwdIt1 _First1, _FwdIt1 _Last1, const _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred) {
         ;
    ;
    if constexpr (_Is_bidi_iter_v<_FwdIt1> && _Is_bidi_iter_v<_FwdIt2>) {
        do {              --_Last1;
            --_Last2;
        } while (_Pred(*_Last1, *_Last2));
        ++_Last1;
        ++_Last2;
    }

    for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1) {
        if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred)) {              _Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
            if (_Count2 == 0) {
                return false;              }

            _FwdIt1 _Skip1                = _Next_iter(_Next1);
            _Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
            if (_Count2 != _Count1) {
                return false;              }
        }
    }

    return true;
}

 template <class _BidIt>
constexpr void reverse(const _BidIt _First, const _BidIt _Last) {      _Adl_verify_range(_First, _Last);
    auto _UFirst = _Get_unwrapped(_First);
    auto _ULast  = _Get_unwrapped(_Last);
    using _Elem                         = remove_reference_t<_Iter_ref_t<decltype(_UFirst)>>;
    constexpr bool _Allow_vectorization = conjunction_v<bool_constant<_Iterator_is_contiguous<decltype(_UFirst)>>,
        _Is_trivially_swappable<_Elem>, negation<is_volatile<_Elem>>>;
    constexpr size_t _Nx                = sizeof(_Elem);

    if constexpr (_Allow_vectorization && _Nx <= 8 && (_Nx & (_Nx - 1)) == 0) {
        if (!::std:: is_constant_evaluated())
        {
            if constexpr (_Nx == 1) {
                __std_reverse_trivially_swappable_1(_To_address(_UFirst), _To_address(_ULast));
            } else if constexpr (_Nx == 2) {
                __std_reverse_trivially_swappable_2(_To_address(_UFirst), _To_address(_ULast));
            } else if constexpr (_Nx == 4) {
                __std_reverse_trivially_swappable_4(_To_address(_UFirst), _To_address(_ULast));
            } else {
                __std_reverse_trivially_swappable_8(_To_address(_UFirst), _To_address(_ULast));
            }

            return;
        }
    }

    for (; _UFirst != _ULast && _UFirst != --_ULast; ++_UFirst) {
        ::std:: iter_swap(_UFirst, _ULast);
    }
}

template <class _ExPo, class _BidIt, _Enable_if_execution_policy_t<_ExPo> = 0>
void reverse(_ExPo&&, _BidIt _First, _BidIt _Last) noexcept   {
              return ::std:: reverse(_First, _Last);
}

 template <class _BidIt>
constexpr pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(_BidIt _First, _BidIt _Sentinel, _BidIt _Last) {
         while (_First != _Sentinel && _Last != _Sentinel) {
        ::std:: iter_swap(_First, --_Last);
        ++_First;
    }

    return pair<_BidIt, _BidIt>(_First, _Last);
}

template <class _FwdIt>
constexpr _FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last) {
                   _Adl_verify_range(_First, _Mid);
    _Adl_verify_range(_Mid, _Last);
    auto _UFirst      = _Get_unwrapped(_First);
    auto _UMid        = _Get_unwrapped(_Mid);
    const auto _ULast = _Get_unwrapped(_Last);
    if (_UFirst == _UMid) {
        return _Last;
    }

    if (_UMid == _ULast) {
        return _First;
    }

    if constexpr (_Is_random_iter_v<_FwdIt>) {
        ::std:: reverse(_UFirst, _UMid);
        ::std:: reverse(_UMid, _ULast);
        ::std:: reverse(_UFirst, _ULast);
        _Seek_wrapped(_First, _UFirst + (_ULast - _UMid));
    } else if constexpr (_Is_bidi_iter_v<_FwdIt>) {
        ::std:: reverse(_UFirst, _UMid);
        ::std:: reverse(_UMid, _ULast);
        auto _Tmp = _Reverse_until_sentinel_unchecked(_UFirst, _UMid, _ULast);
        ::std:: reverse(_Tmp.first, _Tmp.second);
        _Seek_wrapped(_First, _UMid != _Tmp.first ? _Tmp.first : _Tmp.second);
    } else {
        auto _UNext = _UMid;
        do {              ::std:: iter_swap(_UFirst, _UNext);
            ++_UFirst;
            ++_UNext;
            if (_UFirst == _UMid) {
                _UMid = _UNext;
            }
        } while (_UNext != _ULast);
        _Seek_wrapped(_First, _UFirst);
        while (_UMid != _ULast) {              _UNext = _UMid;
            do {
                ::std:: iter_swap(_UFirst, _UNext);
                ++_UFirst;
                ++_UNext;
                if (_UFirst == _UMid) {
                    _UMid = _UNext;
                }
            } while (_UNext != _ULast);
        }
    }

    return _First;
}

template <class _ExPo, class _FwdIt, _Enable_if_execution_policy_t<_ExPo> = 0>
_FwdIt rotate(_ExPo&&, _FwdIt _First, _FwdIt _Mid, _FwdIt _Last) noexcept   {
              return ::std:: rotate(_First, _Mid, _Last);
}

 template <class _InIt, class _Pr>
 constexpr _InIt find_if(_InIt _First, const _InIt _Last, _Pr _Pred) {      _Adl_verify_range(_First, _Last);
    auto _UFirst      = _Get_unwrapped(_First);
    const auto _ULast = _Get_unwrapped(_Last);
    for (; _UFirst != _ULast; ++_UFirst) {
        if (_Pred(*_UFirst)) {
            break;
        }
    }

    _Seek_wrapped(_First, _UFirst);
    return _First;
}

namespace ranges {
              template <input_iterator _It, sentinel_for<_It> _Se, class _Pj, indirect_unary_predicate<projected<_It, _Pj>> _Pr>
     constexpr _It _Find_if_unchecked(_It _First, const _Se _Last, _Pr _Pred, _Pj _Proj) {
        for (; _First != _Last; ++_First) {
            if (::std:: invoke(_Pred, ::std:: invoke(_Proj, *_First))) {
                break;
            }
        }

        return _First;
    }

    class _Find_if_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <input_iterator _It, sentinel_for<_It> _Se, class _Pj = identity,
            indirect_unary_predicate<projected<_It, _Pj>> _Pr>
         constexpr _It operator()(_It _First, _Se _Last, _Pr _Pred, _Pj _Proj = {}) const {
            _Adl_verify_range(_First, _Last);
            auto _UResult = ::std::ranges:: _Find_if_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Get_unwrapped(::std:: move(_Last)), _Pass_fn(_Pred), _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }

        template <input_range _Rng, class _Pj = identity,
            indirect_unary_predicate<projected<iterator_t<_Rng>, _Pj>> _Pr>
         constexpr borrowed_iterator_t<_Rng> operator()(_Rng&& _Range, _Pr _Pred, _Pj _Proj = {}) const {
            auto _First   = ::std::ranges:: begin(_Range);
            auto _UResult = ::std::ranges:: _Find_if_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Uend(_Range), _Pass_fn(_Pred), _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }
    };

    inline constexpr _Find_if_fn find_if{_Not_quite_object::_Construct_tag{}};

         class _Find_if_not_fn : private _Not_quite_object {
    public:
        using _Not_quite_object::_Not_quite_object;

        template <input_iterator _It, sentinel_for<_It> _Se, class _Pj = identity,
            indirect_unary_predicate<projected<_It, _Pj>> _Pr>
         constexpr _It operator()(_It _First, _Se _Last, _Pr _Pred, _Pj _Proj = {}) const {
            _Adl_verify_range(_First, _Last);

            auto _UResult = _Find_if_not_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Get_unwrapped(::std:: move(_Last)), _Pass_fn(_Pred), _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }

        template <input_range _Rng, class _Pj = identity,
            indirect_unary_predicate<projected<iterator_t<_Rng>, _Pj>> _Pr>
         constexpr borrowed_iterator_t<_Rng> operator()(_Rng&& _Range, _Pr _Pred, _Pj _Proj = {}) const {
            auto _First = ::std::ranges:: begin(_Range);

            auto _UResult = _Find_if_not_unchecked(
                _Get_unwrapped(::std:: move(_First)), _Uend(_Range), _Pass_fn(_Pred), _Pass_fn(_Proj));

            _Seek_wrapped(_First, ::std:: move(_UResult));
            return _First;
        }

    private:
        template <class _It, class _Se, class _Pj, class _Pr>
         static constexpr _It _Find_if_not_unchecked(_It _First, const _Se _Last, _Pr _Pred, _Pj _Proj) {
            ;
            ;
            ;

            for (; _First != _Last; ++_First) {
                if (!::std:: invoke(_Pred, ::std:: invoke(_Proj, *_First))) {
                    break;
                }
            }

            return _First;
        }
    };

    inline constexpr _Find_if_not_fn find_if_not{_Not_quite_object::_Construct_tag{}};
}  
 template <auto>
struct _Require_constant;                             
 template <class _FwdIt, class _Ty, class _Pr>
 constexpr _FwdIt lower_bound(_FwdIt _First, const _FwdIt _Last, const _Ty& _Val, _Pr _Pred) {
         _Adl_verify_range(_First, _Last);
    auto _UFirst                = _Get_unwrapped(_First);
    _Iter_diff_t<_FwdIt> _Count = ::std:: distance(_UFirst, _Get_unwrapped(_Last));

    while (0 < _Count) {          const _Iter_diff_t<_FwdIt> _Count2 = _Count / 2;
        const auto _UMid                   = ::std:: next(_UFirst, _Count2);
        if (_Pred(*_UMid, _Val)) {              _UFirst = _Next_iter(_UMid);
            _Count -= _Count2 + 1;
        } else {
            _Count = _Count2;
        }
    }

    _Seek_wrapped(_First, _UFirst);
    return _First;
}

template <class _FwdIt, class _Ty>
 constexpr _FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val) {
         return ::std:: lower_bound(_First, _Last, _Val, less<>{});
}

 template <class _FwdIt1, class _FwdIt2>
constexpr _FwdIt2 _Swap_ranges_unchecked(_FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2) {
         for (; _First1 != _Last1; ++_First1, (void) ++_First2) {
        ::std:: iter_swap(_First1, _First2);
    }

    return _First2;
}

template <class _Ty, enable_if_t<_Is_trivially_swappable_v<_Ty>, int> = 0>
constexpr _Ty* _Swap_ranges_unchecked(_Ty* _First1, _Ty* const _Last1, _Ty* _First2) {
         if (::std:: is_constant_evaluated()) {
        for (; _First1 != _Last1; ++_First1, (void) ++_First2) {
            ::std:: iter_swap(_First1, _First2);
        }

        return _First2;
    }

    __std_swap_ranges_trivially_swappable_noalias(_First1, _Last1, _First2);
    return _First2 + (_Last1 - _First1);
}

 template <class _Diff, class _Urng>
class _Rng_from_urng {  public:
    using _Ty0 = make_unsigned_t<_Diff>;
    using _Ty1 = typename _Urng::result_type;

    using _Udiff = conditional_t<sizeof(_Ty1) < sizeof(_Ty0), _Ty0, _Ty1>;

    explicit _Rng_from_urng(_Urng& _Func) : _Ref(_Func), _Bits(8 * sizeof(_Udiff)), _Bmask(_Udiff(-1)) {
        for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1) {
            --_Bits;
        }
    }

    _Diff operator()(_Diff _Index) {          for (;;) {              _Udiff _Ret  = 0;              _Udiff _Mask = 0;  
            while (_Mask < _Udiff(_Index - 1)) {                  _Ret <<= _Bits - 1;                  _Ret <<= 1;
                _Ret |= _Get_bits();
                _Mask <<= _Bits - 1;                  _Mask <<= 1;
                _Mask |= _Bmask;
            }

                         if (_Ret / _Index < _Mask / _Index || _Mask % _Index == _Udiff(_Index - 1)) {
                return static_cast<_Diff>(_Ret % _Index);
            }
        }
    }

    _Udiff _Get_all_bits() {
        _Udiff _Ret = 0;

        for (size_t _Num = 0; _Num < 8 * sizeof(_Udiff); _Num += _Bits) {              _Ret <<= _Bits - 1;              _Ret <<= 1;
            _Ret |= _Get_bits();
        }

        return _Ret;
    }

    _Rng_from_urng(const _Rng_from_urng&) = delete;
    _Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
    _Udiff _Get_bits() {          for (;;) {              _Udiff _Val = _Ref() - (_Urng::min)();

            if (_Val <= _Bmask) {
                return _Val;
            }
        }
    }

    _Urng& _Ref;      size_t _Bits;      _Udiff _Bmask;  };

 template <class _Ty, class _Alloc, class = void>
struct _Has_allocator_type : false_type {};  
template <class _Ty, class _Alloc>
struct _Has_allocator_type<_Ty, _Alloc, void_t<typename _Ty::allocator_type>>
    : is_convertible<_Alloc, typename _Ty::allocator_type>::type {};  
 struct allocator_arg_t {      explicit allocator_arg_t() = default;
};

inline constexpr allocator_arg_t allocator_arg{};

[[noreturn]]  void __cdecl _Xbad_alloc();
[[noreturn]]  void __cdecl _Xinvalid_argument(  const char*);
[[noreturn]]  void __cdecl _Xlength_error(  const char*);
[[noreturn]]  void __cdecl _Xout_of_range(  const char*);
[[noreturn]]  void __cdecl _Xoverflow_error(  const char*);
[[noreturn]]  void __cdecl _Xruntime_error(  const char*);
[[noreturn]]  void __cdecl _XGetLastError();

 template <class _Ty, class _Alloc>
struct uses_allocator : _Has_allocator_type<_Ty, _Alloc>::type {
     };

template <class _Ty, class _Alloc>
inline constexpr bool uses_allocator_v = uses_allocator<_Ty, _Alloc>::value;

 template <class _Category, class _Ty, class _Diff = ptrdiff_t, class _Pointer = _Ty*, class _Reference = _Ty&>
struct [[deprecated(                                                                                                             "warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) The C++ Standard has never required user-defined iterators to derive from std::iterator. To fix this warning, stop deriving from std::iterator and start providing publicly accessible typedefs named iterator_category, value_type, difference_type, pointer, and reference. Note that value_type is required to be non-const, even for constant iterators. You can define _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.")]] iterator {      using iterator_category = _Category;
    using value_type        = _Ty;
    using difference_type   = _Diff;
    using pointer           = _Pointer;
    using reference         = _Reference;
};

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr auto _Float_abs_bits(const _Ty& _Xx) {
    using _Traits    = _Floating_type_traits<_Ty>;
    using _Uint_type = typename _Traits::_Uint_type;
    const auto _Bits = _Bit_cast<_Uint_type>(_Xx);
    return _Bits & ~_Traits::_Shifted_sign_mask;
}

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr _Ty _Float_abs(const _Ty _Xx) {      return _Bit_cast<_Ty>(_Float_abs_bits(_Xx));
}

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr _Ty _Float_copysign(const _Ty _Magnitude, const _Ty _Sign) {      using _Traits       = _Floating_type_traits<_Ty>;
    using _Uint_type    = typename _Traits::_Uint_type;
    const auto _Signbit = _Bit_cast<_Uint_type>(_Sign) & _Traits::_Shifted_sign_mask;
    return _Bit_cast<_Ty>(_Float_abs_bits(_Magnitude) | _Signbit);
}

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr bool _Is_nan(const _Ty _Xx) {      using _Traits = _Floating_type_traits<_Ty>;
    return _Float_abs_bits(_Xx) > _Traits::_Shifted_exponent_mask;
}

     template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr bool _Is_signaling_nan(const _Ty& _Xx) {      using _Traits        = _Floating_type_traits<_Ty>;
    const auto _Abs_bits = _Float_abs_bits(_Xx);
    return _Abs_bits > _Traits::_Shifted_exponent_mask && ((_Abs_bits & _Traits::_Special_nan_mantissa_mask) == 0);
}

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr bool _Is_inf(const _Ty _Xx) {      using _Traits = _Floating_type_traits<_Ty>;
    return _Float_abs_bits(_Xx) == _Traits::_Shifted_exponent_mask;
}

 template <class _Ty, enable_if_t<is_floating_point_v<_Ty>, int> = 0>
 constexpr bool _Is_finite(const _Ty _Xx) {      using _Traits = _Floating_type_traits<_Ty>;
    return _Float_abs_bits(_Xx) < _Traits::_Shifted_exponent_mask;
}

 struct _Nontrivial_dummy_type {
    constexpr _Nontrivial_dummy_type() noexcept {
             }
};
;

 struct monostate {};

}



 





namespace std {

  
 
 
 inline uint32_t __decimalLength9(const uint32_t __v) {
           ;
  if (__v >= 100000000) { return 9; }
  if (__v >= 10000000) { return 8; }
  if (__v >= 1000000) { return 7; }
  if (__v >= 100000) { return 6; }
  if (__v >= 10000) { return 5; }
  if (__v >= 1000) { return 4; }
  if (__v >= 100) { return 3; }
  if (__v >= 10) { return 2; }
  return 1;
}

  inline int32_t __pow5bits(const int32_t __e) {
           ;
  ;
  return static_cast<int32_t>(((static_cast<uint32_t>(__e) * 1217359) >> 19) + 1);
}

  inline uint32_t __log10Pow2(const int32_t __e) {
     ;
  ;
  return (static_cast<uint32_t>(__e) * 78913) >> 18;
}

  inline uint32_t __log10Pow5(const int32_t __e) {
     ;
  ;
  return (static_cast<uint32_t>(__e) * 732923) >> 20;
}

 inline uint32_t __float_to_bits(const float __f) {
  uint32_t __bits = 0;
  :: memcpy(&__bits, &__f, sizeof(float));
  return __bits;
}

 inline uint64_t __double_to_bits(const double __d) {
  uint64_t __bits = 0;
  :: memcpy(&__bits, &__d, sizeof(double));
  return __bits;
}

 
 
inline constexpr int __DOUBLE_MANTISSA_BITS = 52;
inline constexpr int __DOUBLE_EXPONENT_BITS = 11;
inline constexpr int __DOUBLE_BIAS = 1023;

inline constexpr int __DOUBLE_POW5_INV_BITCOUNT = 122;
inline constexpr int __DOUBLE_POW5_BITCOUNT = 121;

 
 

 inline uint64_t __ryu_umul128(const uint64_t __a, const uint64_t __b, uint64_t* const __productHi) {
  return _umul128(__a, __b, __productHi);
}

 inline uint64_t __ryu_shiftright128(const uint64_t __lo, const uint64_t __hi, const uint32_t __dist) {
                       ;
  return __shiftright128(__lo, __hi, static_cast<unsigned char>(__dist));
}



 inline uint64_t __div5(const uint64_t __x) {
  return __x / 5;
}

 inline uint64_t __div10(const uint64_t __x) {
  return __x / 10;
}

 inline uint64_t __div100(const uint64_t __x) {
  return __x / 100;
}

 inline uint64_t __div1e8(const uint64_t __x) {
  return __x / 100000000;
}

 inline uint64_t __div1e9(const uint64_t __x) {
  return __x / 1000000000;
}

 inline uint32_t __mod1e9(const uint64_t __x) {
  return static_cast<uint32_t>(__x - 1000000000 * __div1e9(__x));
}


 inline uint32_t __pow5Factor(uint64_t __value) {
  uint32_t __count = 0;
  for (;;) {
    ;
    const uint64_t __q = __div5(__value);
    const uint32_t __r = static_cast<uint32_t>(__value) - 5 * static_cast<uint32_t>(__q);
    if (__r != 0) {
      break;
    }
    __value = __q;
    ++__count;
  }
  return __count;
}

  inline bool __multipleOfPowerOf5(const uint64_t __value, const uint32_t __p) {
     return __pow5Factor(__value) >= __p;
}

  inline bool __multipleOfPowerOf2(const uint64_t __value, const uint32_t __p) {
  ;
  ;
     return (__value & ((1ull << __p) - 1)) == 0;
}

 
 
inline constexpr int __POW10_ADDITIONAL_BITS = 120;

  inline uint64_t __umul256_hi128_lo64(
  const uint64_t __aHi, const uint64_t __aLo, const uint64_t __bHi, const uint64_t __bLo) {
  uint64_t __b00Hi;
  const uint64_t __b00Lo = __ryu_umul128(__aLo, __bLo, &__b00Hi);
  uint64_t __b01Hi;
  const uint64_t __b01Lo = __ryu_umul128(__aLo, __bHi, &__b01Hi);
  uint64_t __b10Hi;
  const uint64_t __b10Lo = __ryu_umul128(__aHi, __bLo, &__b10Hi);
  uint64_t __b11Hi;
  const uint64_t __b11Lo = __ryu_umul128(__aHi, __bHi, &__b11Hi);
  (void) __b00Lo;    (void) __b11Hi;    const uint64_t __temp1Lo = __b10Lo + __b00Hi;
  const uint64_t __temp1Hi = __b10Hi + (__temp1Lo < __b10Lo);
  const uint64_t __temp2Lo = __b01Lo + __temp1Lo;
  const uint64_t __temp2Hi = __b01Hi + (__temp2Lo < __b01Lo);
  return __b11Lo + __temp1Hi + __temp2Hi;
}

 inline uint32_t __uint128_mod1e9(const uint64_t __vHi, const uint64_t __vLo) {
        const uint64_t __multiplied = __umul256_hi128_lo64(__vHi, __vLo, 0x89705F4136B4A597u, 0x31680A88F8953031u);

     const uint32_t __shifted = static_cast<uint32_t>(__multiplied >> 29);

  return static_cast<uint32_t>(__vLo) - 1000000000 * __shifted;
}

 inline uint32_t __mulShift_mod1e9(const uint64_t __m, const uint64_t* const __mul, const int32_t __j) {
  uint64_t __high0;                                                  const uint64_t __low0 = __ryu_umul128(__m, __mul[0], &__high0);    uint64_t __high1;                                                  const uint64_t __low1 = __ryu_umul128(__m, __mul[1], &__high1);    uint64_t __high2;                                                  const uint64_t __low2 = __ryu_umul128(__m, __mul[2], &__high2);    const uint64_t __s0low = __low0;                     (void) __s0low;    const uint64_t __s0high = __low1 + __high0;          const uint32_t __c1 = __s0high < __low1;
  const uint64_t __s1low = __low2 + __high1 + __c1;    const uint32_t __c2 = __s1low < __low2;    const uint64_t __s1high = __high2 + __c2;            ;
  ;
  const uint32_t __dist = static_cast<uint32_t>(__j - 128);    const uint64_t __shiftedhigh = __s1high >> __dist;
  const uint64_t __shiftedlow = __ryu_shiftright128(__s1low, __s1high, __dist);
  return __uint128_mod1e9(__shiftedhigh, __shiftedlow);
}


template <class _CharT>
void __append_n_digits(const uint32_t __olength, uint32_t __digits, _CharT* const __result) {
  uint32_t __i = 0;
  while (__digits >= 10000) {
    const uint32_t __c = __digits % 10000;
    __digits /= 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    :: memcpy(__result + __olength - __i - 2, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 4, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    __i += 4;
  }
  if (__digits >= 100) {
    const uint32_t __c = (__digits % 100) << 1;
    __digits /= 100;
    :: memcpy(__result + __olength - __i - 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    __i += 2;
  }
  if (__digits >= 10) {
    const uint32_t __c = __digits << 1;
    :: memcpy(__result + __olength - __i - 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
  } else {
    __result[0] = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + __digits);
  }
}

inline void __append_d_digits(const uint32_t __olength, uint32_t __digits, char* const __result) {
  uint32_t __i = 0;
  while (__digits >= 10000) {
    const uint32_t __c = __digits % 10000;
    __digits /= 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    :: memcpy(__result + __olength + 1 - __i - 2, __DIGIT_TABLE<char> + __c0, 2);
    :: memcpy(__result + __olength + 1 - __i - 4, __DIGIT_TABLE<char> + __c1, 2);
    __i += 4;
  }
  if (__digits >= 100) {
    const uint32_t __c = (__digits % 100) << 1;
    __digits /= 100;
    :: memcpy(__result + __olength + 1 - __i - 2, __DIGIT_TABLE<char> + __c, 2);
    __i += 2;
  }
  if (__digits >= 10) {
    const uint32_t __c = __digits << 1;
    __result[2] = __DIGIT_TABLE<char>[__c + 1];
    __result[1] = '.';
    __result[0] = __DIGIT_TABLE<char>[__c];
  } else {
    __result[1] = '.';
    __result[0] = static_cast<char>('0' + __digits);
  }
}

template <class _CharT>
void __append_c_digits(const uint32_t __count, uint32_t __digits, _CharT* const __result) {
  uint32_t __i = 0;
  for (; __i < __count - 1; __i += 2) {
    const uint32_t __c = (__digits % 100) << 1;
    __digits /= 100;
    :: memcpy(__result + __count - __i - 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
  }
  if (__i < __count) {
    const _CharT __c = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + (__digits % 10));
    __result[__count - __i - 1] = __c;
  }
}

template <class _CharT>
void __append_nine_digits(uint32_t __digits, _CharT* const __result) {
  if (__digits == 0) {
    ::std:: fill_n(__result, 9, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    return;
  }

  for (uint32_t __i = 0; __i < 5; __i += 4) {
    const uint32_t __c = __digits % 10000;
    __digits /= 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    :: memcpy(__result + 7 - __i, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
    :: memcpy(__result + 5 - __i, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
  }
  __result[0] = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + __digits);
}

 inline uint32_t __indexForExponent(const uint32_t __e) {
  return (__e + 15) / 16;
}

 inline uint32_t __pow10BitsForIndex(const uint32_t __idx) {
  return 16 * __idx + __POW10_ADDITIONAL_BITS;
}

 inline uint32_t __lengthForIndex(const uint32_t __idx) {
     return (__log10Pow2(16 * static_cast<int32_t>(__idx)) + 1 + 16 + 8) / 9;
}

template <class _CharT>
 pair<_CharT*, errc> __d2fixed_buffered_n(_CharT* _First, _CharT* const _Last, const double __d,
  const uint32_t __precision) {
  _CharT* const _Original_first = _First;

  const uint64_t __bits = __double_to_bits(__d);

     if (__bits == 0) {
    const int32_t _Total_zero_length = 1        + static_cast<int32_t>(__precision != 0)        + static_cast<int32_t>(__precision);  
    if (_Last - _First < _Total_zero_length) {
      return { _Last, errc::value_too_large };
    }

    *_First++ = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
    if (__precision > 0) {
      *_First++ = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
      ::std:: fill_n(_First, __precision, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
      _First += __precision;
    }
    return { _First, errc{} };
  }

     const uint64_t __ieeeMantissa = __bits & ((1ull << __DOUBLE_MANTISSA_BITS) - 1);
  const uint32_t __ieeeExponent = static_cast<uint32_t>(__bits >> __DOUBLE_MANTISSA_BITS);

  int32_t __e2;
  uint64_t __m2;
  if (__ieeeExponent == 0) {
    __e2 = 1 - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;
    __m2 = __ieeeMantissa;
  } else {
    __e2 = static_cast<int32_t>(__ieeeExponent) - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;
    __m2 = (1ull << __DOUBLE_MANTISSA_BITS) | __ieeeMantissa;
  }

  bool __nonzero = false;
  if (__e2 >= -52) {
    const uint32_t __idx = __e2 < 0 ? 0 : __indexForExponent(static_cast<uint32_t>(__e2));
    const uint32_t __p10bits = __pow10BitsForIndex(__idx);
    const int32_t __len = static_cast<int32_t>(__lengthForIndex(__idx));
    for (int32_t __i = __len - 1; __i >= 0; --__i) {
      const uint32_t __j = __p10bits - __e2;
                    const uint32_t __digits = __mulShift_mod1e9(__m2 << 8, __POW10_SPLIT[__POW10_OFFSET[__idx] + __i],
        static_cast<int32_t>(__j + 8));
      if (__nonzero) {
        if (_Last - _First < 9) {
          return { _Last, errc::value_too_large };
        }
        __append_nine_digits(__digits, _First);
        _First += 9;
      } else if (__digits != 0) {
        const uint32_t __olength = __decimalLength9(__digits);
        if (_Last - _First < static_cast<ptrdiff_t>(__olength)) {
          return { _Last, errc::value_too_large };
        }
        __append_n_digits(__olength, __digits, _First);
        _First += __olength;
        __nonzero = true;
      }
    }
  }
  if (!__nonzero) {
    if (_First == _Last) {
      return { _Last, errc::value_too_large };
    }
    *_First++ = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
  }
  if (__precision > 0) {
    if (_First == _Last) {
      return { _Last, errc::value_too_large };
    }
    *_First++ = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
  }
  if (__e2 < 0) {
    const int32_t __idx = -__e2 / 16;
    const uint32_t __blocks = __precision / 9 + 1;
         int __roundUp = 0;
    uint32_t __i = 0;
    if (__blocks <= __MIN_BLOCK_2[__idx]) {
      __i = __blocks;
      if (_Last - _First < static_cast<ptrdiff_t>(__precision)) {
        return { _Last, errc::value_too_large };
      }
      ::std:: fill_n(_First, __precision, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
      _First += __precision;
    } else if (__i < __MIN_BLOCK_2[__idx]) {
      __i = __MIN_BLOCK_2[__idx];
      if (_Last - _First < static_cast<ptrdiff_t>(9 * __i)) {
        return { _Last, errc::value_too_large };
      }
      ::std:: fill_n(_First, 9 * __i, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
      _First += 9 * __i;
    }
    for (; __i < __blocks; ++__i) {
      const int32_t __j = __ADDITIONAL_BITS_2 + (-__e2 - 16 * __idx);
      const uint32_t __p = __POW10_OFFSET_2[__idx] + __i - __MIN_BLOCK_2[__idx];
      if (__p >= __POW10_OFFSET_2[__idx + 1]) {
                          const uint32_t __fill = __precision - 9 * __i;
        if (_Last - _First < static_cast<ptrdiff_t>(__fill)) {
          return { _Last, errc::value_too_large };
        }
        ::std:: fill_n(_First, __fill, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
        _First += __fill;
        break;
      }
                    uint32_t __digits = __mulShift_mod1e9(__m2 << 8, __POW10_SPLIT_2[__p], __j + 8);
      if (__i < __blocks - 1) {
        if (_Last - _First < 9) {
          return { _Last, errc::value_too_large };
        }
        __append_nine_digits(__digits, _First);
        _First += 9;
      } else {
        const uint32_t __maximum = __precision - 9 * __i;
        uint32_t __lastDigit = 0;
        for (uint32_t __k = 0; __k < 9 - __maximum; ++__k) {
          __lastDigit = __digits % 10;
          __digits /= 10;
        }
        if (__lastDigit != 5) {
          __roundUp = __lastDigit > 5;
        } else {
                     const int32_t __requiredTwos = -__e2 - static_cast<int32_t>(__precision) - 1;
          const bool __trailingZeros = __requiredTwos <= 0
            || (__requiredTwos < 60 && __multipleOfPowerOf2(__m2, static_cast<uint32_t>(__requiredTwos)));
          __roundUp = __trailingZeros ? 2 : 1;
        }
        if (__maximum > 0) {
          if (_Last - _First < static_cast<ptrdiff_t>(__maximum)) {
            return { _Last, errc::value_too_large };
          }
          __append_c_digits(__maximum, __digits, _First);
          _First += __maximum;
        }
        break;
      }
    }
    if (__roundUp != 0) {
      _CharT* _Round = _First;
      _CharT* _Dot = _Last;
      while (true) {
        if (_Round == _Original_first) {
          _Round[0] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '1' : L'1');
          if (_Dot != _Last) {
            _Dot[0] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
            _Dot[1] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
          }
          if (_First == _Last) {
            return { _Last, errc::value_too_large };
          }
          *_First++ = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
          break;
        }
        --_Round;
        const _CharT __c = _Round[0];
        if (__c == static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.')) {
          _Dot = _Round;
        } else if (__c == static_cast<_TYPE>(is_same_v<_TYPE, char> ? '9' : L'9')) {
          _Round[0] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
          __roundUp = 1;
        } else {
          if (__roundUp == 1 || __c % 2 != 0) {
            _Round[0] = static_cast<_CharT>(__c + 1);
          }
          break;
        }
      }
    }
  } else {
    if (_Last - _First < static_cast<ptrdiff_t>(__precision)) {
      return { _Last, errc::value_too_large };
    }
    ::std:: fill_n(_First, __precision, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    _First += __precision;
  }
  return { _First, errc{} };
}

 inline to_chars_result __d2exp_buffered_n(char* _First, char* const _Last, const double __d,
  uint32_t __precision) {
  char* const _Original_first = _First;

  const uint64_t __bits = __double_to_bits(__d);

     if (__bits == 0) {
    const int32_t _Total_zero_length = 1        + static_cast<int32_t>(__precision != 0)        + static_cast<int32_t>(__precision)        + 4;      if (_Last - _First < _Total_zero_length) {
      return { _Last, errc::value_too_large };
    }
    *_First++ = '0';
    if (__precision > 0) {
      *_First++ = '.';
      :: memset(_First, '0', __precision);
      _First += __precision;
    }
    :: memcpy(_First, "e+00", 4);
    _First += 4;
    return { _First, errc{} };
  }

     const uint64_t __ieeeMantissa = __bits & ((1ull << __DOUBLE_MANTISSA_BITS) - 1);
  const uint32_t __ieeeExponent = static_cast<uint32_t>(__bits >> __DOUBLE_MANTISSA_BITS);

  int32_t __e2;
  uint64_t __m2;
  if (__ieeeExponent == 0) {
    __e2 = 1 - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;
    __m2 = __ieeeMantissa;
  } else {
    __e2 = static_cast<int32_t>(__ieeeExponent) - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;
    __m2 = (1ull << __DOUBLE_MANTISSA_BITS) | __ieeeMantissa;
  }

  const bool __printDecimalPoint = __precision > 0;
  ++__precision;
  uint32_t __digits = 0;
  uint32_t __printedDigits = 0;
  uint32_t __availableDigits = 0;
  int32_t __exp = 0;
  if (__e2 >= -52) {
    const uint32_t __idx = __e2 < 0 ? 0 : __indexForExponent(static_cast<uint32_t>(__e2));
    const uint32_t __p10bits = __pow10BitsForIndex(__idx);
    const int32_t __len = static_cast<int32_t>(__lengthForIndex(__idx));
    for (int32_t __i = __len - 1; __i >= 0; --__i) {
      const uint32_t __j = __p10bits - __e2;
                    __digits = __mulShift_mod1e9(__m2 << 8, __POW10_SPLIT[__POW10_OFFSET[__idx] + __i],
        static_cast<int32_t>(__j + 8));
      if (__printedDigits != 0) {
        if (__printedDigits + 9 > __precision) {
          __availableDigits = 9;
          break;
        }
        if (_Last - _First < 9) {
          return { _Last, errc::value_too_large };
        }
        __append_nine_digits(__digits, _First);
        _First += 9;
        __printedDigits += 9;
      } else if (__digits != 0) {
        __availableDigits = __decimalLength9(__digits);
        __exp = __i * 9 + static_cast<int32_t>(__availableDigits) - 1;
        if (__availableDigits > __precision) {
          break;
        }
        if (__printDecimalPoint) {
          if (_Last - _First < static_cast<ptrdiff_t>(__availableDigits + 1)) {
            return { _Last, errc::value_too_large };
          }
          __append_d_digits(__availableDigits, __digits, _First);
          _First += __availableDigits + 1;          } else {
          if (_First == _Last) {
            return { _Last, errc::value_too_large };
          }
          *_First++ = static_cast<char>('0' + __digits);
        }
        __printedDigits = __availableDigits;
        __availableDigits = 0;
      }
    }
  }

  if (__e2 < 0 && __availableDigits == 0) {
    const int32_t __idx = -__e2 / 16;
    for (int32_t __i = __MIN_BLOCK_2[__idx]; __i < 200; ++__i) {
      const int32_t __j = __ADDITIONAL_BITS_2 + (-__e2 - 16 * __idx);
      const uint32_t __p = __POW10_OFFSET_2[__idx] + static_cast<uint32_t>(__i) - __MIN_BLOCK_2[__idx];
                    __digits = (__p >= __POW10_OFFSET_2[__idx + 1]) ? 0 : __mulShift_mod1e9(__m2 << 8, __POW10_SPLIT_2[__p], __j + 8);
      if (__printedDigits != 0) {
        if (__printedDigits + 9 > __precision) {
          __availableDigits = 9;
          break;
        }
        if (_Last - _First < 9) {
          return { _Last, errc::value_too_large };
        }
        __append_nine_digits(__digits, _First);
        _First += 9;
        __printedDigits += 9;
      } else if (__digits != 0) {
        __availableDigits = __decimalLength9(__digits);
        __exp = -(__i + 1) * 9 + static_cast<int32_t>(__availableDigits) - 1;
        if (__availableDigits > __precision) {
          break;
        }
        if (__printDecimalPoint) {
          if (_Last - _First < static_cast<ptrdiff_t>(__availableDigits + 1)) {
            return { _Last, errc::value_too_large };
          }
          __append_d_digits(__availableDigits, __digits, _First);
          _First += __availableDigits + 1;          } else {
          if (_First == _Last) {
            return { _Last, errc::value_too_large };
          }
          *_First++ = static_cast<char>('0' + __digits);
        }
        __printedDigits = __availableDigits;
        __availableDigits = 0;
      }
    }
  }

  const uint32_t __maximum = __precision - __printedDigits;
  if (__availableDigits == 0) {
    __digits = 0;
  }
  uint32_t __lastDigit = 0;
  if (__availableDigits > __maximum) {
    for (uint32_t __k = 0; __k < __availableDigits - __maximum; ++__k) {
      __lastDigit = __digits % 10;
      __digits /= 10;
    }
  }
     int __roundUp = 0;
  if (__lastDigit != 5) {
    __roundUp = __lastDigit > 5;
  } else {
              const int32_t __rexp = static_cast<int32_t>(__precision) - __exp;
    const int32_t __requiredTwos = -__e2 - __rexp;
    bool __trailingZeros = __requiredTwos <= 0
      || (__requiredTwos < 60 && __multipleOfPowerOf2(__m2, static_cast<uint32_t>(__requiredTwos)));
    if (__rexp < 0) {
      const int32_t __requiredFives = -__rexp;
      __trailingZeros = __trailingZeros && __multipleOfPowerOf5(__m2, static_cast<uint32_t>(__requiredFives));
    }
    __roundUp = __trailingZeros ? 2 : 1;
  }
  if (__printedDigits != 0) {
    if (_Last - _First < static_cast<ptrdiff_t>(__maximum)) {
      return { _Last, errc::value_too_large };
    }
    if (__digits == 0) {
      :: memset(_First, '0', __maximum);
    } else {
      __append_c_digits(__maximum, __digits, _First);
    }
    _First += __maximum;
  } else {
    if (__printDecimalPoint) {
      if (_Last - _First < static_cast<ptrdiff_t>(__maximum + 1)) {
        return { _Last, errc::value_too_large };
      }
      __append_d_digits(__maximum, __digits, _First);
      _First += __maximum + 1;      } else {
      if (_First == _Last) {
        return { _Last, errc::value_too_large };
      }
      *_First++ = static_cast<char>('0' + __digits);
    }
  }
  if (__roundUp != 0) {
    char* _Round = _First;
    while (true) {
      if (_Round == _Original_first) {
        _Round[0] = '1';
        ++__exp;
        break;
      }
      --_Round;
      const char __c = _Round[0];
      if (__c == '.') {
               } else if (__c == '9') {
        _Round[0] = '0';
        __roundUp = 1;
      } else {
        if (__roundUp == 1 || __c % 2 != 0) {
          _Round[0] = __c + 1;
        }
        break;
      }
    }
  }

  char _Sign_character;

  if (__exp < 0) {
    _Sign_character = '-';
    __exp = -__exp;
  } else {
    _Sign_character = '+';
  }

  const int _Exponent_part_length = __exp >= 100
    ? 5      : 4;  
  if (_Last - _First < _Exponent_part_length) {
    return { _Last, errc::value_too_large };
  }

  *_First++ = 'e';
  *_First++ = _Sign_character;

  if (__exp >= 100) {
    const int32_t __c = __exp % 10;
    :: memcpy(_First, __DIGIT_TABLE<char> + 2 * (__exp / 10), 2);
    _First[2] = static_cast<char>('0' + __c);
    _First += 3;
  } else {
    :: memcpy(_First, __DIGIT_TABLE<char> + 2 * __exp, 2);
    _First += 2;
  }

  return { _First, errc{} };
}

 
 
inline constexpr int __FLOAT_MANTISSA_BITS = 23;
inline constexpr int __FLOAT_EXPONENT_BITS = 8;
inline constexpr int __FLOAT_BIAS = 127;

 inline constexpr int __FLOAT_POW5_INV_BITCOUNT = 59;
inline constexpr uint64_t __FLOAT_POW5_INV_SPLIT[31] = {
  576460752303423489u, 461168601842738791u, 368934881474191033u, 295147905179352826u,
  472236648286964522u, 377789318629571618u, 302231454903657294u, 483570327845851670u,
  386856262276681336u, 309485009821345069u, 495176015714152110u, 396140812571321688u,
  316912650057057351u, 507060240091291761u, 405648192073033409u, 324518553658426727u,
  519229685853482763u, 415383748682786211u, 332306998946228969u, 531691198313966350u,
  425352958651173080u, 340282366920938464u, 544451787073501542u, 435561429658801234u,
  348449143727040987u, 557518629963265579u, 446014903970612463u, 356811923176489971u,
  570899077082383953u, 456719261665907162u, 365375409332725730u
};
inline constexpr int __FLOAT_POW5_BITCOUNT = 61;
inline constexpr uint64_t __FLOAT_POW5_SPLIT[47] = {
  1152921504606846976u, 1441151880758558720u, 1801439850948198400u, 2251799813685248000u,
  1407374883553280000u, 1759218604441600000u, 2199023255552000000u, 1374389534720000000u,
  1717986918400000000u, 2147483648000000000u, 1342177280000000000u, 1677721600000000000u,
  2097152000000000000u, 1310720000000000000u, 1638400000000000000u, 2048000000000000000u,
  1280000000000000000u, 1600000000000000000u, 2000000000000000000u, 1250000000000000000u,
  1562500000000000000u, 1953125000000000000u, 1220703125000000000u, 1525878906250000000u,
  1907348632812500000u, 1192092895507812500u, 1490116119384765625u, 1862645149230957031u,
  1164153218269348144u, 1455191522836685180u, 1818989403545856475u, 2273736754432320594u,
  1421085471520200371u, 1776356839400250464u, 2220446049250313080u, 1387778780781445675u,
  1734723475976807094u, 2168404344971008868u, 1355252715606880542u, 1694065894508600678u,
  2117582368135750847u, 1323488980084844279u, 1654361225106055349u, 2067951531382569187u,
  1292469707114105741u, 1615587133892632177u, 2019483917365790221u
};

 inline uint32_t __pow5Factor(uint32_t __value) {
  uint32_t __count = 0;
  for (;;) {
    ;
    const uint32_t __q = __value / 5;
    const uint32_t __r = __value % 5;
    if (__r != 0) {
      break;
    }
    __value = __q;
    ++__count;
  }
  return __count;
}

  inline bool __multipleOfPowerOf5(const uint32_t __value, const uint32_t __p) {
  return __pow5Factor(__value) >= __p;
}

  inline bool __multipleOfPowerOf2(const uint32_t __value, const uint32_t __p) {
  ;
  ;
     return (__value & ((1u << __p) - 1)) == 0;
}

 inline uint32_t __mulShift(const uint32_t __m, const uint64_t __factor, const int32_t __shift) {
  ;

        const uint32_t __factorLo = static_cast<uint32_t>(__factor);
  const uint32_t __factorHi = static_cast<uint32_t>(__factor >> 32);
  const uint64_t __bits0 = static_cast<uint64_t>(__m) * __factorLo;
  const uint64_t __bits1 = static_cast<uint64_t>(__m) * __factorHi;

  const uint64_t __sum = (__bits0 >> 32) + __bits1;
  const uint64_t __shiftedSum = __sum >> (__shift - 32);
  ;
  return static_cast<uint32_t>(__shiftedSum);
}

 inline uint32_t __mulPow5InvDivPow2(const uint32_t __m, const uint32_t __q, const int32_t __j) {
  return __mulShift(__m, __FLOAT_POW5_INV_SPLIT[__q], __j);
}

 inline uint32_t __mulPow5divPow2(const uint32_t __m, const uint32_t __i, const int32_t __j) {
  return __mulShift(__m, __FLOAT_POW5_SPLIT[__i], __j);
}

 struct __floating_decimal_32 {
  uint32_t __mantissa;
  int32_t __exponent;
};

 inline __floating_decimal_32 __f2d(const uint32_t __ieeeMantissa, const uint32_t __ieeeExponent) {
  int32_t __e2;
  uint32_t __m2;
  if (__ieeeExponent == 0) {
         __e2 = 1 - __FLOAT_BIAS - __FLOAT_MANTISSA_BITS - 2;
    __m2 = __ieeeMantissa;
  } else {
    __e2 = static_cast<int32_t>(__ieeeExponent) - __FLOAT_BIAS - __FLOAT_MANTISSA_BITS - 2;
    __m2 = (1u << __FLOAT_MANTISSA_BITS) | __ieeeMantissa;
  }
  const bool __even = (__m2 & 1) == 0;
  const bool __acceptBounds = __even;

     const uint32_t __mv = 4 * __m2;
  const uint32_t __mp = 4 * __m2 + 2;
     const uint32_t __mmShift = __ieeeMantissa != 0 || __ieeeExponent <= 1;
  const uint32_t __mm = 4 * __m2 - 1 - __mmShift;

     uint32_t __vr, __vp, __vm;
  int32_t __e10;
  bool __vmIsTrailingZeros = false;
  bool __vrIsTrailingZeros = false;
  uint8_t __lastRemovedDigit = 0;
  if (__e2 >= 0) {
    const uint32_t __q = __log10Pow2(__e2);
    __e10 = static_cast<int32_t>(__q);
    const int32_t __k = __FLOAT_POW5_INV_BITCOUNT + __pow5bits(static_cast<int32_t>(__q)) - 1;
    const int32_t __i = -__e2 + static_cast<int32_t>(__q) + __k;
    __vr = __mulPow5InvDivPow2(__mv, __q, __i);
    __vp = __mulPow5InvDivPow2(__mp, __q, __i);
    __vm = __mulPow5InvDivPow2(__mm, __q, __i);
    if (__q != 0 && (__vp - 1) / 10 <= __vm / 10) {
                           const int32_t __l = __FLOAT_POW5_INV_BITCOUNT + __pow5bits(static_cast<int32_t>(__q - 1)) - 1;
      __lastRemovedDigit = static_cast<uint8_t>(__mulPow5InvDivPow2(__mv, __q - 1,
        -__e2 + static_cast<int32_t>(__q) - 1 + __l) % 10);
    }
    if (__q <= 9) {
                    if (__mv % 5 == 0) {
        __vrIsTrailingZeros = __multipleOfPowerOf5(__mv, __q);
      } else if (__acceptBounds) {
        __vmIsTrailingZeros = __multipleOfPowerOf5(__mm, __q);
      } else {
        __vp -= __multipleOfPowerOf5(__mp, __q);
      }
    }
  } else {
    const uint32_t __q = __log10Pow5(-__e2);
    __e10 = static_cast<int32_t>(__q) + __e2;
    const int32_t __i = -__e2 - static_cast<int32_t>(__q);
    const int32_t __k = __pow5bits(__i) - __FLOAT_POW5_BITCOUNT;
    int32_t __j = static_cast<int32_t>(__q) - __k;
    __vr = __mulPow5divPow2(__mv, static_cast<uint32_t>(__i), __j);
    __vp = __mulPow5divPow2(__mp, static_cast<uint32_t>(__i), __j);
    __vm = __mulPow5divPow2(__mm, static_cast<uint32_t>(__i), __j);
    if (__q != 0 && (__vp - 1) / 10 <= __vm / 10) {
      __j = static_cast<int32_t>(__q) - 1 - (__pow5bits(__i + 1) - __FLOAT_POW5_BITCOUNT);
      __lastRemovedDigit = static_cast<uint8_t>(__mulPow5divPow2(__mv, static_cast<uint32_t>(__i + 1), __j) % 10);
    }
    if (__q <= 1) {
                    __vrIsTrailingZeros = true;
      if (__acceptBounds) {
                 __vmIsTrailingZeros = __mmShift == 1;
      } else {
                 --__vp;
      }
    } else if (__q < 31) {        __vrIsTrailingZeros = __multipleOfPowerOf2(__mv, __q - 1);
    }
  }

     int32_t __removed = 0;
  uint32_t _Output;
  if (__vmIsTrailingZeros || __vrIsTrailingZeros) {
         while (__vp / 10 > __vm / 10) {
      __vmIsTrailingZeros &= __vm % 10 == 0;
      __vrIsTrailingZeros &= __lastRemovedDigit == 0;
      __lastRemovedDigit = static_cast<uint8_t>(__vr % 10);
      __vr /= 10;
      __vp /= 10;
      __vm /= 10;
      ++__removed;
    }
    if (__vmIsTrailingZeros) {
      while (__vm % 10 == 0) {
        __vrIsTrailingZeros &= __lastRemovedDigit == 0;
        __lastRemovedDigit = static_cast<uint8_t>(__vr % 10);
        __vr /= 10;
        __vp /= 10;
        __vm /= 10;
        ++__removed;
      }
    }
    if (__vrIsTrailingZeros && __lastRemovedDigit == 5 && __vr % 2 == 0) {
             __lastRemovedDigit = 4;
    }
         _Output = __vr + ((__vr == __vm && (!__acceptBounds || !__vmIsTrailingZeros)) || __lastRemovedDigit >= 5);
  } else {
                   while (__vp / 10 > __vm / 10) {
      __lastRemovedDigit = static_cast<uint8_t>(__vr % 10);
      __vr /= 10;
      __vp /= 10;
      __vm /= 10;
      ++__removed;
    }
         _Output = __vr + (__vr == __vm || __lastRemovedDigit >= 5);
  }
  const int32_t __exp = __e10 + __removed;

  __floating_decimal_32 __fd;
  __fd.__exponent = __exp;
  __fd.__mantissa = _Output;
  return __fd;
}

template <class _CharT>
 pair<_CharT*, errc> _Large_integer_to_chars(_CharT* const _First, _CharT* const _Last,
  const uint32_t _Mantissa2, const int32_t _Exponent2) {

   
               
      
      
  ;
  ;  
            
               
  constexpr uint32_t _Data_size = 4;
  uint32_t _Data[_Data_size]{};

     uint32_t _Maxidx = ((24 + static_cast<uint32_t>(_Exponent2) + 31) / 32) - 1;
  ;

  const uint32_t _Bit_shift = static_cast<uint32_t>(_Exponent2) % 32;
  if (_Bit_shift <= 8) {      _Data[_Maxidx] = _Mantissa2 << _Bit_shift;
  } else {      _Data[_Maxidx - 1] = _Mantissa2 << _Bit_shift;
    _Data[_Maxidx] = _Mantissa2 >> (32 - _Bit_shift);
  }

        uint32_t _Blocks[4];
  int32_t _Filled_blocks = 0;
            
  if (_Maxidx != 0) {                             for (;;) {
       
      const uint32_t _Most_significant_elem = _Data[_Maxidx];
      const uint32_t _Initial_remainder = _Most_significant_elem % 1000000000;
      const uint32_t _Initial_quotient = _Most_significant_elem / 1000000000;
      _Data[_Maxidx] = _Initial_quotient;
      uint64_t _Remainder = _Initial_remainder;

             uint32_t _Idx = _Maxidx;
      do {
        --_Idx;  
                 _Remainder = (_Remainder << 32) | _Data[_Idx];

                 const uint32_t _Quotient = static_cast<uint32_t>(__div1e9(_Remainder));

                          _Remainder = static_cast<uint32_t>(_Remainder) - 1000000000u * _Quotient;

        _Data[_Idx] = _Quotient;
      } while (_Idx != 0);

             _Blocks[_Filled_blocks++] = static_cast<uint32_t>(_Remainder);

      if (_Initial_quotient == 0) {          --_Maxidx;          if (_Maxidx == 0) {
          break;          }
      }
    }
  }

  ;
  for (uint32_t _Idx = 1; _Idx < _Data_size; ++_Idx) {
    ;
  }

  const uint32_t _Data_olength = _Data[0] >= 1000000000 ? 10 : __decimalLength9(_Data[0]);
  const uint32_t _Total_fixed_length = _Data_olength + 9 * _Filled_blocks;

  if (_Last - _First < static_cast<ptrdiff_t>(_Total_fixed_length)) {
    return { _Last, errc::value_too_large };
  }

  _CharT* _Result = _First;

        __append_n_digits(_Data_olength, _Data[0], _Result);
  _Result += _Data_olength;

     for (int32_t _Idx = _Filled_blocks - 1; _Idx >= 0; --_Idx) {
    __append_nine_digits(_Blocks[_Idx], _Result);
    _Result += 9;
  }

  return { _Result, errc{} };
}

template <class _CharT>
 pair<_CharT*, errc> __to_chars(_CharT* const _First, _CharT* const _Last, const __floating_decimal_32 __v,
  chars_format _Fmt, const uint32_t __ieeeMantissa, const uint32_t __ieeeExponent) {
     uint32_t _Output = __v.__mantissa;
  int32_t _Ryu_exponent = __v.__exponent;
  const uint32_t __olength = __decimalLength9(_Output);
  int32_t _Scientific_exponent = _Ryu_exponent + static_cast<int32_t>(__olength) - 1;

  if (_Fmt == chars_format{}) {
    int32_t _Lower;
    int32_t _Upper;

    if (__olength == 1) {
                           _Lower = -3;
      _Upper = 4;
    } else {
                           _Lower = -static_cast<int32_t>(__olength + 3);
      _Upper = 5;
    }

    if (_Lower <= _Ryu_exponent && _Ryu_exponent <= _Upper) {
      _Fmt = chars_format::fixed;
    } else {
      _Fmt = chars_format::scientific;
    }
  } else if (_Fmt == chars_format::general) {
                             if (-4 <= _Scientific_exponent && _Scientific_exponent < 6) {
      _Fmt = chars_format::fixed;
    } else {
      _Fmt = chars_format::scientific;
    }
  }

  if (_Fmt == chars_format::fixed) {
     
                                                                      
    const int32_t _Whole_digits = static_cast<int32_t>(__olength) + _Ryu_exponent;

    uint32_t _Total_fixed_length;
    if (_Ryu_exponent >= 0) {        _Total_fixed_length = static_cast<uint32_t>(_Whole_digits);
      if (_Output == 1) {
                                   static constexpr uint8_t _Adjustment[39] = {
          0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1 };
        _Total_fixed_length -= _Adjustment[_Ryu_exponent];
               }
    } else if (_Whole_digits > 0) {        _Total_fixed_length = __olength + 1;
    } else {        _Total_fixed_length = static_cast<uint32_t>(2 - _Ryu_exponent);
    }

    if (_Last - _First < static_cast<ptrdiff_t>(_Total_fixed_length)) {
      return { _Last, errc::value_too_large };
    }

    _CharT* _Mid;
    if (_Ryu_exponent > 0) {        bool _Can_use_ryu;

      if (_Ryu_exponent > 10) {          _Can_use_ryu = false;
      } else {
                           
                                             
         
                           
                           
                 static constexpr uint32_t _Max_shifted_mantissa[11] = {
          16777215, 3355443, 671088, 134217, 26843, 5368, 1073, 214, 42, 8, 1 };

        unsigned long _Trailing_zero_bits;
        (void) _BitScanForward(&_Trailing_zero_bits, __v.__mantissa);          const uint32_t _Shifted_mantissa = __v.__mantissa >> _Trailing_zero_bits;
        _Can_use_ryu = _Shifted_mantissa <= _Max_shifted_mantissa[_Ryu_exponent];
      }

      if (!_Can_use_ryu) {
        const uint32_t _Mantissa2 = __ieeeMantissa | (1u << __FLOAT_MANTISSA_BITS);          const int32_t _Exponent2 = static_cast<int32_t>(__ieeeExponent)
          - __FLOAT_BIAS - __FLOAT_MANTISSA_BITS;  
                 return _Large_integer_to_chars(_First, _Last, _Mantissa2, _Exponent2);
      }

                    _Mid = _First + __olength;
    } else {               _Mid = _First + _Total_fixed_length;
    }

    while (_Output >= 10000) {
      const uint32_t __c = _Output % 10000;
      _Output /= 10000;
      const uint32_t __c0 = (__c % 100) << 1;
      const uint32_t __c1 = (__c / 100) << 1;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    }
    if (_Output >= 100) {
      const uint32_t __c = (_Output % 100) << 1;
      _Output /= 100;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    }
    if (_Output >= 10) {
      const uint32_t __c = _Output << 1;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    } else {
      *--_Mid = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + _Output);
    }

    if (_Ryu_exponent > 0) {               ::std:: fill_n(_First + __olength, _Ryu_exponent, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    } else if (_Ryu_exponent == 0) {             } else if (_Whole_digits > 0) {               :: memmove(_First, _First + 1, static_cast<size_t>(_Whole_digits) * sizeof(_CharT));
      _First[_Whole_digits] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
    } else {               _First[0] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
      _First[1] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
      ::std:: fill_n(_First + 2, -_Whole_digits, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    }

    return { _First + _Total_fixed_length, errc{} };
  }

  const uint32_t _Total_scientific_length =
    __olength + (__olength > 1) + 4;    if (_Last - _First < static_cast<ptrdiff_t>(_Total_scientific_length)) {
    return { _Last, errc::value_too_large };
  }
  _CharT* const __result = _First;

     uint32_t __i = 0;
  while (_Output >= 10000) {
    const uint32_t __c = _Output % 10000;
    _Output /= 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    :: memcpy(__result + __olength - __i - 1, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 3, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    __i += 4;
  }
  if (_Output >= 100) {
    const uint32_t __c = (_Output % 100) << 1;
    _Output /= 100;
    :: memcpy(__result + __olength - __i - 1, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    __i += 2;
  }
  if (_Output >= 10) {
    const uint32_t __c = _Output << 1;
         __result[2] = __DIGIT_TABLE<_CharT>[__c + 1];
    __result[0] = __DIGIT_TABLE<_CharT>[__c];
  } else {
    __result[0] = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + _Output);
  }

     uint32_t __index;
  if (__olength > 1) {
    __result[1] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
    __index = __olength + 1;
  } else {
    __index = 1;
  }

     __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? 'e' : L'e');
  if (_Scientific_exponent < 0) {
    __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '-' : L'-');
    _Scientific_exponent = -_Scientific_exponent;
  } else {
    __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '+' : L'+');
  }

  :: memcpy(__result + __index, __DIGIT_TABLE<_CharT> + 2 * _Scientific_exponent, 2 * sizeof(_CharT));
  __index += 2;

  return { _First + _Total_scientific_length, errc{} };
}

 inline to_chars_result _Convert_to_chars_result(const pair<char*, errc>& _Pair) {
    return {_Pair.first, _Pair.second};
}

template <class _CharT>
 pair<_CharT*, errc> __f2s_buffered_n(_CharT* const _First, _CharT* const _Last, const float __f,
  const chars_format _Fmt) {

     const uint32_t __bits = __float_to_bits(__f);

     if (__bits == 0) {
    if (_Fmt == chars_format::scientific) {
      if (_Last - _First < 5) {
        return { _Last, errc::value_too_large };
      }

      if constexpr (is_same_v<_CharT, char>) {
        :: memcpy(_First, "0e+00", 5);
      } else {
        :: memcpy(_First, L"0e+00", 5 * sizeof(wchar_t));
      }

      return { _First + 5, errc{} };
    }

         if (_First == _Last) {
      return { _Last, errc::value_too_large };
    }

    *_First = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');

    return { _First + 1, errc{} };
  }

     const uint32_t __ieeeMantissa = __bits & ((1u << __FLOAT_MANTISSA_BITS) - 1);
  const uint32_t __ieeeExponent = __bits >> __FLOAT_MANTISSA_BITS;

        if (_Fmt == chars_format::fixed) {
    const uint32_t _Mantissa2 = __ieeeMantissa | (1u << __FLOAT_MANTISSA_BITS);      const int32_t _Exponent2 = static_cast<int32_t>(__ieeeExponent)
      - __FLOAT_BIAS - __FLOAT_MANTISSA_BITS;  
          
    if (_Exponent2 > 0) {
      return _Large_integer_to_chars(_First, _Last, _Mantissa2, _Exponent2);
    }
  }

  const __floating_decimal_32 __v = __f2d(__ieeeMantissa, __ieeeExponent);
  return __to_chars(_First, _Last, __v, _Fmt, __ieeeMantissa, __ieeeExponent);
}

 
 
                                     
 inline uint64_t __mulShift(const uint64_t __m, const uint64_t* const __mul, const int32_t __j) {
     uint64_t __high1;                                                  const uint64_t __low1 = __ryu_umul128(__m, __mul[1], &__high1);    uint64_t __high0;                                                  (void) __ryu_umul128(__m, __mul[0], &__high0);                     const uint64_t __sum = __high0 + __low1;
  if (__sum < __high0) {
    ++__high1;    }
  return __ryu_shiftright128(__sum, __high1, static_cast<uint32_t>(__j - 64));
}

 inline uint64_t __mulShiftAll(const uint64_t __m, const uint64_t* const __mul, const int32_t __j,
  uint64_t* const __vp, uint64_t* const __vm, const uint32_t __mmShift) {
  *__vp = __mulShift(4 * __m + 2, __mul, __j);
  *__vm = __mulShift(4 * __m - 1 - __mmShift, __mul, __j);
  return __mulShift(4 * __m, __mul, __j);
}


 inline uint32_t __decimalLength17(const uint64_t __v) {
              ;
  if (__v >= 10000000000000000u) { return 17; }
  if (__v >= 1000000000000000u) { return 16; }
  if (__v >= 100000000000000u) { return 15; }
  if (__v >= 10000000000000u) { return 14; }
  if (__v >= 1000000000000u) { return 13; }
  if (__v >= 100000000000u) { return 12; }
  if (__v >= 10000000000u) { return 11; }
  if (__v >= 1000000000u) { return 10; }
  if (__v >= 100000000u) { return 9; }
  if (__v >= 10000000u) { return 8; }
  if (__v >= 1000000u) { return 7; }
  if (__v >= 100000u) { return 6; }
  if (__v >= 10000u) { return 5; }
  if (__v >= 1000u) { return 4; }
  if (__v >= 100u) { return 3; }
  if (__v >= 10u) { return 2; }
  return 1;
}

 struct __floating_decimal_64 {
  uint64_t __mantissa;
  int32_t __exponent;
};

 inline __floating_decimal_64 __d2d(const uint64_t __ieeeMantissa, const uint32_t __ieeeExponent) {
  int32_t __e2;
  uint64_t __m2;
  if (__ieeeExponent == 0) {
         __e2 = 1 - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS - 2;
    __m2 = __ieeeMantissa;
  } else {
    __e2 = static_cast<int32_t>(__ieeeExponent) - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS - 2;
    __m2 = (1ull << __DOUBLE_MANTISSA_BITS) | __ieeeMantissa;
  }
  const bool __even = (__m2 & 1) == 0;
  const bool __acceptBounds = __even;

     const uint64_t __mv = 4 * __m2;
     const uint32_t __mmShift = __ieeeMantissa != 0 || __ieeeExponent <= 1;
         
     uint64_t __vr, __vp, __vm;
  int32_t __e10;
  bool __vmIsTrailingZeros = false;
  bool __vrIsTrailingZeros = false;
  if (__e2 >= 0) {
              const uint32_t __q = __log10Pow2(__e2) - (__e2 > 3);
    __e10 = static_cast<int32_t>(__q);
    const int32_t __k = __DOUBLE_POW5_INV_BITCOUNT + __pow5bits(static_cast<int32_t>(__q)) - 1;
    const int32_t __i = -__e2 + static_cast<int32_t>(__q) + __k;
    __vr = __mulShiftAll(__m2, __DOUBLE_POW5_INV_SPLIT[__q], __i, &__vp, &__vm, __mmShift);
    if (__q <= 21) {
                           const uint32_t __mvMod5 = static_cast<uint32_t>(__mv) - 5 * static_cast<uint32_t>(__div5(__mv));
      if (__mvMod5 == 0) {
        __vrIsTrailingZeros = __multipleOfPowerOf5(__mv, __q);
      } else if (__acceptBounds) {
                                   __vmIsTrailingZeros = __multipleOfPowerOf5(__mv - 1 - __mmShift, __q);
      } else {
                 __vp -= __multipleOfPowerOf5(__mv + 2, __q);
      }
    }
  } else {
         const uint32_t __q = __log10Pow5(-__e2) - (-__e2 > 1);
    __e10 = static_cast<int32_t>(__q) + __e2;
    const int32_t __i = -__e2 - static_cast<int32_t>(__q);
    const int32_t __k = __pow5bits(__i) - __DOUBLE_POW5_BITCOUNT;
    const int32_t __j = static_cast<int32_t>(__q) - __k;
    __vr = __mulShiftAll(__m2, __DOUBLE_POW5_SPLIT[__i], __j, &__vp, &__vm, __mmShift);
    if (__q <= 1) {
                    __vrIsTrailingZeros = true;
      if (__acceptBounds) {
                 __vmIsTrailingZeros = __mmShift == 1;
      } else {
                 --__vp;
      }
    } else if (__q < 63) {                                           __vrIsTrailingZeros = __multipleOfPowerOf2(__mv, __q - 1);
    }
  }

     int32_t __removed = 0;
  uint8_t __lastRemovedDigit = 0;
  uint64_t _Output;
     if (__vmIsTrailingZeros || __vrIsTrailingZeros) {
         for (;;) {
      const uint64_t __vpDiv10 = __div10(__vp);
      const uint64_t __vmDiv10 = __div10(__vm);
      if (__vpDiv10 <= __vmDiv10) {
        break;
      }
      const uint32_t __vmMod10 = static_cast<uint32_t>(__vm) - 10 * static_cast<uint32_t>(__vmDiv10);
      const uint64_t __vrDiv10 = __div10(__vr);
      const uint32_t __vrMod10 = static_cast<uint32_t>(__vr) - 10 * static_cast<uint32_t>(__vrDiv10);
      __vmIsTrailingZeros &= __vmMod10 == 0;
      __vrIsTrailingZeros &= __lastRemovedDigit == 0;
      __lastRemovedDigit = static_cast<uint8_t>(__vrMod10);
      __vr = __vrDiv10;
      __vp = __vpDiv10;
      __vm = __vmDiv10;
      ++__removed;
    }
    if (__vmIsTrailingZeros) {
      for (;;) {
        const uint64_t __vmDiv10 = __div10(__vm);
        const uint32_t __vmMod10 = static_cast<uint32_t>(__vm) - 10 * static_cast<uint32_t>(__vmDiv10);
        if (__vmMod10 != 0) {
          break;
        }
        const uint64_t __vpDiv10 = __div10(__vp);
        const uint64_t __vrDiv10 = __div10(__vr);
        const uint32_t __vrMod10 = static_cast<uint32_t>(__vr) - 10 * static_cast<uint32_t>(__vrDiv10);
        __vrIsTrailingZeros &= __lastRemovedDigit == 0;
        __lastRemovedDigit = static_cast<uint8_t>(__vrMod10);
        __vr = __vrDiv10;
        __vp = __vpDiv10;
        __vm = __vmDiv10;
        ++__removed;
      }
    }
    if (__vrIsTrailingZeros && __lastRemovedDigit == 5 && __vr % 2 == 0) {
             __lastRemovedDigit = 4;
    }
         _Output = __vr + ((__vr == __vm && (!__acceptBounds || !__vmIsTrailingZeros)) || __lastRemovedDigit >= 5);
  } else {
         bool __roundUp = false;
    const uint64_t __vpDiv100 = __div100(__vp);
    const uint64_t __vmDiv100 = __div100(__vm);
    if (__vpDiv100 > __vmDiv100) {        const uint64_t __vrDiv100 = __div100(__vr);
      const uint32_t __vrMod100 = static_cast<uint32_t>(__vr) - 100 * static_cast<uint32_t>(__vrDiv100);
      __roundUp = __vrMod100 >= 50;
      __vr = __vrDiv100;
      __vp = __vpDiv100;
      __vm = __vmDiv100;
      __removed += 2;
    }
                        for (;;) {
      const uint64_t __vpDiv10 = __div10(__vp);
      const uint64_t __vmDiv10 = __div10(__vm);
      if (__vpDiv10 <= __vmDiv10) {
        break;
      }
      const uint64_t __vrDiv10 = __div10(__vr);
      const uint32_t __vrMod10 = static_cast<uint32_t>(__vr) - 10 * static_cast<uint32_t>(__vrDiv10);
      __roundUp = __vrMod10 >= 5;
      __vr = __vrDiv10;
      __vp = __vpDiv10;
      __vm = __vmDiv10;
      ++__removed;
    }
         _Output = __vr + (__vr == __vm || __roundUp);
  }
  const int32_t __exp = __e10 + __removed;

  __floating_decimal_64 __fd;
  __fd.__exponent = __exp;
  __fd.__mantissa = _Output;
  return __fd;
}

template <class _CharT>
 pair<_CharT*, errc> __to_chars(_CharT* const _First, _CharT* const _Last, const __floating_decimal_64 __v,
  chars_format _Fmt, const double __f) {
     uint64_t _Output = __v.__mantissa;
  int32_t _Ryu_exponent = __v.__exponent;
  const uint32_t __olength = __decimalLength17(_Output);
  int32_t _Scientific_exponent = _Ryu_exponent + static_cast<int32_t>(__olength) - 1;

  if (_Fmt == chars_format{}) {
    int32_t _Lower;
    int32_t _Upper;

    if (__olength == 1) {
                           _Lower = -3;
      _Upper = 4;
    } else {
                           _Lower = -static_cast<int32_t>(__olength + 3);
      _Upper = 5;
    }

    if (_Lower <= _Ryu_exponent && _Ryu_exponent <= _Upper) {
      _Fmt = chars_format::fixed;
    } else {
      _Fmt = chars_format::scientific;
    }
  } else if (_Fmt == chars_format::general) {
                             if (-4 <= _Scientific_exponent && _Scientific_exponent < 6) {
      _Fmt = chars_format::fixed;
    } else {
      _Fmt = chars_format::scientific;
    }
  }

  if (_Fmt == chars_format::fixed) {
     
                                                                      
    const int32_t _Whole_digits = static_cast<int32_t>(__olength) + _Ryu_exponent;

    uint32_t _Total_fixed_length;
    if (_Ryu_exponent >= 0) {        _Total_fixed_length = static_cast<uint32_t>(_Whole_digits);
      if (_Output == 1) {
                                   static constexpr uint8_t _Adjustment[309] = {
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,0,0,
          1,1,0,0,1,0,1,1,1,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,1,1,
          1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,
          1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,
          0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,0,1,
          1,1,0,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1,1,0,
          0,1,0,1,1,1,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0 };
        _Total_fixed_length -= _Adjustment[_Ryu_exponent];
               }
    } else if (_Whole_digits > 0) {        _Total_fixed_length = __olength + 1;
    } else {        _Total_fixed_length = static_cast<uint32_t>(2 - _Ryu_exponent);
    }

    if (_Last - _First < static_cast<ptrdiff_t>(_Total_fixed_length)) {
      return { _Last, errc::value_too_large };
    }

    _CharT* _Mid;
    if (_Ryu_exponent > 0) {        bool _Can_use_ryu;

      if (_Ryu_exponent > 22) {          _Can_use_ryu = false;
      } else {
                           
                                             
         
                           
                           
                 static constexpr uint64_t _Max_shifted_mantissa[23] = {
          9007199254740991u, 1801439850948198u, 360287970189639u, 72057594037927u, 14411518807585u,
          2882303761517u, 576460752303u, 115292150460u, 23058430092u, 4611686018u, 922337203u, 184467440u,
          36893488u, 7378697u, 1475739u, 295147u, 59029u, 11805u, 2361u, 472u, 94u, 18u, 3u };

        unsigned long _Trailing_zero_bits;
        (void) _BitScanForward64(&_Trailing_zero_bits, __v.__mantissa);          const uint64_t _Shifted_mantissa = __v.__mantissa >> _Trailing_zero_bits;
        _Can_use_ryu = _Shifted_mantissa <= _Max_shifted_mantissa[_Ryu_exponent];
      }

      if (!_Can_use_ryu) {
                                   return __d2fixed_buffered_n(_First, _Last, __f, 0);
      }

                    _Mid = _First + __olength;
    } else {               _Mid = _First + _Total_fixed_length;
    }

                        if ((_Output >> 32) != 0) {
             const uint64_t __q = __div1e8(_Output);
      uint32_t __output2 = static_cast<uint32_t>(_Output - 100000000 * __q);
      _Output = __q;

      const uint32_t __c = __output2 % 10000;
      __output2 /= 10000;
      const uint32_t __d = __output2 % 10000;
      const uint32_t __c0 = (__c % 100) << 1;
      const uint32_t __c1 = (__c / 100) << 1;
      const uint32_t __d0 = (__d % 100) << 1;
      const uint32_t __d1 = (__d / 100) << 1;

      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __d0, 2 * sizeof(_CharT));
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __d1, 2 * sizeof(_CharT));
    }
    uint32_t __output2 = static_cast<uint32_t>(_Output);
    while (__output2 >= 10000) {
      const uint32_t __c = __output2 % 10000;
      __output2 /= 10000;
      const uint32_t __c0 = (__c % 100) << 1;
      const uint32_t __c1 = (__c / 100) << 1;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    }
    if (__output2 >= 100) {
      const uint32_t __c = (__output2 % 100) << 1;
      __output2 /= 100;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    }
    if (__output2 >= 10) {
      const uint32_t __c = __output2 << 1;
      :: memcpy(_Mid -= 2, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    } else {
      *--_Mid = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + __output2);
    }

    if (_Ryu_exponent > 0) {               ::std:: fill_n(_First + __olength, _Ryu_exponent, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    } else if (_Ryu_exponent == 0) {             } else if (_Whole_digits > 0) {               :: memmove(_First, _First + 1, static_cast<size_t>(_Whole_digits) * sizeof(_CharT));
      _First[_Whole_digits] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
    } else {               _First[0] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');
      _First[1] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
      ::std:: fill_n(_First + 2, -_Whole_digits, static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0'));
    }

    return { _First + _Total_fixed_length, errc{} };
  }

  const uint32_t _Total_scientific_length = __olength + (__olength > 1)      + (-100 < _Scientific_exponent && _Scientific_exponent < 100 ? 4 : 5);    if (_Last - _First < static_cast<ptrdiff_t>(_Total_scientific_length)) {
    return { _Last, errc::value_too_large };
  }
  _CharT* const __result = _First;

     uint32_t __i = 0;
              if ((_Output >> 32) != 0) {
         const uint64_t __q = __div1e8(_Output);
    uint32_t __output2 = static_cast<uint32_t>(_Output) - 100000000 * static_cast<uint32_t>(__q);
    _Output = __q;

    const uint32_t __c = __output2 % 10000;
    __output2 /= 10000;
    const uint32_t __d = __output2 % 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    const uint32_t __d0 = (__d % 100) << 1;
    const uint32_t __d1 = (__d / 100) << 1;
    :: memcpy(__result + __olength - __i - 1, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 3, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 5, __DIGIT_TABLE<_CharT> + __d0, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 7, __DIGIT_TABLE<_CharT> + __d1, 2 * sizeof(_CharT));
    __i += 8;
  }
  uint32_t __output2 = static_cast<uint32_t>(_Output);
  while (__output2 >= 10000) {
    const uint32_t __c = __output2 % 10000;
    __output2 /= 10000;
    const uint32_t __c0 = (__c % 100) << 1;
    const uint32_t __c1 = (__c / 100) << 1;
    :: memcpy(__result + __olength - __i - 1, __DIGIT_TABLE<_CharT> + __c0, 2 * sizeof(_CharT));
    :: memcpy(__result + __olength - __i - 3, __DIGIT_TABLE<_CharT> + __c1, 2 * sizeof(_CharT));
    __i += 4;
  }
  if (__output2 >= 100) {
    const uint32_t __c = (__output2 % 100) << 1;
    __output2 /= 100;
    :: memcpy(__result + __olength - __i - 1, __DIGIT_TABLE<_CharT> + __c, 2 * sizeof(_CharT));
    __i += 2;
  }
  if (__output2 >= 10) {
    const uint32_t __c = __output2 << 1;
         __result[2] = __DIGIT_TABLE<_CharT>[__c + 1];
    __result[0] = __DIGIT_TABLE<_CharT>[__c];
  } else {
    __result[0] = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + __output2);
  }

     uint32_t __index;
  if (__olength > 1) {
    __result[1] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '.' : L'.');
    __index = __olength + 1;
  } else {
    __index = 1;
  }

     __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? 'e' : L'e');
  if (_Scientific_exponent < 0) {
    __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '-' : L'-');
    _Scientific_exponent = -_Scientific_exponent;
  } else {
    __result[__index++] = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '+' : L'+');
  }

  if (_Scientific_exponent >= 100) {
    const int32_t __c = _Scientific_exponent % 10;
    :: memcpy(__result + __index, __DIGIT_TABLE<_CharT> + 2 * (_Scientific_exponent / 10), 2 * sizeof(_CharT));
    __result[__index + 2] = static_cast<_CharT>(static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0') + __c);
    __index += 3;
  } else {
    :: memcpy(__result + __index, __DIGIT_TABLE<_CharT> + 2 * _Scientific_exponent, 2 * sizeof(_CharT));
    __index += 2;
  }

  return { _First + _Total_scientific_length, errc{} };
}

 inline bool __d2d_small_int(const uint64_t __ieeeMantissa, const uint32_t __ieeeExponent,
  __floating_decimal_64* const __v) {
  const uint64_t __m2 = (1ull << __DOUBLE_MANTISSA_BITS) | __ieeeMantissa;
  const int32_t __e2 = static_cast<int32_t>(__ieeeExponent) - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;

  if (__e2 > 0) {
              return false;
  }

  if (__e2 < -52) {
         return false;
  }

        const uint64_t __mask = (1ull << -__e2) - 1;
  const uint64_t __fraction = __m2 & __mask;
  if (__fraction != 0) {
    return false;
  }

           __v->__mantissa = __m2 >> -__e2;
  __v->__exponent = 0;
  return true;
}

template <class _CharT>
 pair<_CharT*, errc> __d2s_buffered_n(_CharT* const _First, _CharT* const _Last, const double __f,
  const chars_format _Fmt) {

     const uint64_t __bits = __double_to_bits(__f);

     if (__bits == 0) {
    if (_Fmt == chars_format::scientific) {
      if (_Last - _First < 5) {
        return { _Last, errc::value_too_large };
      }

      if constexpr (is_same_v<_CharT, char>) {
        :: memcpy(_First, "0e+00", 5);
      } else {
        :: memcpy(_First, L"0e+00", 5 * sizeof(wchar_t));
      }

      return { _First + 5, errc{} };
    }

         if (_First == _Last) {
      return { _Last, errc::value_too_large };
    }

    *_First = static_cast<_TYPE>(is_same_v<_TYPE, char> ? '0' : L'0');

    return { _First + 1, errc{} };
  }

     const uint64_t __ieeeMantissa = __bits & ((1ull << __DOUBLE_MANTISSA_BITS) - 1);
  const uint32_t __ieeeExponent = static_cast<uint32_t>(__bits >> __DOUBLE_MANTISSA_BITS);

  if (_Fmt == chars_format::fixed) {
         const int32_t _Exponent2 = static_cast<int32_t>(__ieeeExponent)
      - __DOUBLE_BIAS - __DOUBLE_MANTISSA_BITS;  
          
                         
                        if (_Exponent2 > 0) {
      return __d2fixed_buffered_n(_First, _Last, __f, 0);
    }
  }

  __floating_decimal_64 __v;
  const bool __isSmallInt = __d2d_small_int(__ieeeMantissa, __ieeeExponent, &__v);
  if (__isSmallInt) {
                        for (;;) {
      const uint64_t __q = __div10(__v.__mantissa);
      const uint32_t __r = static_cast<uint32_t>(__v.__mantissa) - 10 * static_cast<uint32_t>(__q);
      if (__r != 0) {
        break;
      }
      __v.__mantissa = __q;
      ++__v.__exponent;
    }
  } else {
    __v = __d2d(__ieeeMantissa, __ieeeExponent);
  }

  return __to_chars(_First, _Last, __v, _Fmt, __f);
}

 
 
template <class _Floating>
 to_chars_result _Floating_to_chars_ryu(
    char* const _First, char* const _Last, const _Floating _Value, const chars_format _Fmt) noexcept {
    if constexpr (is_same_v<_Floating, float>) {
        return _Convert_to_chars_result(__f2s_buffered_n(_First, _Last, _Value, _Fmt));
    } else {
        return _Convert_to_chars_result(__d2s_buffered_n(_First, _Last, _Value, _Fmt));
    }
}

template <class _Floating>
 to_chars_result _Floating_to_chars_scientific_precision(
    char* const _First, char* const _Last, const _Floating _Value, int _Precision) noexcept {

               
    if (_Precision < 0) {
        _Precision = 6;
    } else if (_Precision < 1'000'000'000) {
             } else {
                          return {_Last, errc::value_too_large};
    }

    return __d2exp_buffered_n(_First, _Last, _Value, static_cast<uint32_t>(_Precision));
}

template <class _Floating>
 to_chars_result _Floating_to_chars_fixed_precision(
    char* const _First, char* const _Last, const _Floating _Value, int _Precision) noexcept {

               
    if (_Precision < 0) {
        _Precision = 6;
    } else if (_Precision < 1'000'000'000) {
             } else {
                          return {_Last, errc::value_too_large};
    }

    return _Convert_to_chars_result(__d2fixed_buffered_n(_First, _Last, _Value, static_cast<uint32_t>(_Precision)));
}

}




 
  



 
namespace std {
inline constexpr char _Charconv_digits[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e',
    'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
static_assert(::std:: size(_Charconv_digits) == 36);

 template <class _RawTy>
 to_chars_result _Integer_to_chars(
    char* _First, char* const _Last, const _RawTy _Raw_value, const int _Base) noexcept {
    _Adl_verify_range(_First, _Last);
    ;

    using _Unsigned = make_unsigned_t<_RawTy>;

    _Unsigned _Value = static_cast<_Unsigned>(_Raw_value);

    if constexpr (is_signed_v<_RawTy>) {
        if (_Raw_value < 0) {
            if (_First == _Last) {
                return {_Last, errc::value_too_large};
            }

            *_First++ = '-';

            _Value = static_cast<_Unsigned>(0 - _Value);
        }
    }

    constexpr size_t _Buff_size = sizeof(_Unsigned) * 8;      char _Buff[_Buff_size];
    char* const _Buff_end = _Buff + _Buff_size;
    char* _RNext          = _Buff_end;

    switch (_Base) {
    case 10:
        {                           constexpr bool _Use_chunks = sizeof(_Unsigned) > sizeof(size_t);

            if constexpr (_Use_chunks) {                                                            while (_Value > 0xFFFF'FFFFU) {
                                         unsigned long _Chunk = static_cast<unsigned long>(_Value % 1'000'000'000);
                    _Value               = static_cast<_Unsigned>(_Value / 1'000'000'000);

                    for (int _Idx = 0; _Idx != 9; ++_Idx) {
                        *--_RNext = static_cast<char>('0' + _Chunk % 10);
                        _Chunk /= 10;
                    }
                }
            }

            using _Truncated = conditional_t<_Use_chunks, unsigned long, _Unsigned>;

            _Truncated _Trunc = static_cast<_Truncated>(_Value);

            do {
                *--_RNext = static_cast<char>('0' + _Trunc % 10);
                _Trunc /= 10;
            } while (_Trunc != 0);
            break;
        }

    case 2:
        do {
            *--_RNext = static_cast<char>('0' + (_Value & 0b1));
            _Value >>= 1;
        } while (_Value != 0);
        break;

    case 4:
        do {
            *--_RNext = static_cast<char>('0' + (_Value & 0b11));
            _Value >>= 2;
        } while (_Value != 0);
        break;

    case 8:
        do {
            *--_RNext = static_cast<char>('0' + (_Value & 0b111));
            _Value >>= 3;
        } while (_Value != 0);
        break;

    case 16:
        do {
            *--_RNext = _Charconv_digits[_Value & 0b1111];
            _Value >>= 4;
        } while (_Value != 0);
        break;

    case 32:
        do {
            *--_RNext = _Charconv_digits[_Value & 0b11111];
            _Value >>= 5;
        } while (_Value != 0);
        break;

    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
        do {
            *--_RNext = static_cast<char>('0' + _Value % _Base);
            _Value    = static_cast<_Unsigned>(_Value / _Base);
        } while (_Value != 0);
        break;

    default:
        do {
            *--_RNext = _Charconv_digits[_Value % _Base];
            _Value    = static_cast<_Unsigned>(_Value / _Base);
        } while (_Value != 0);
        break;
    }

    const ptrdiff_t _Digits_written = _Buff_end - _RNext;

    if (_Last - _First < _Digits_written) {
        return {_Last, errc::value_too_large};
    }

    :: memcpy(_First, _RNext, static_cast<size_t>(_Digits_written));

    return {_First + _Digits_written, errc{}};
}

inline to_chars_result to_chars(char* const _First, char* const _Last, const char _Value, const int _Base = 10) noexcept
  {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(
    char* const _First, char* const _Last, const signed char _Value, const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const unsigned char _Value,
    const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(
    char* const _First, char* const _Last, const short _Value, const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const unsigned short _Value,
    const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const int _Value, const int _Base = 10) noexcept
  {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const unsigned int _Value,
    const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const long _Value, const int _Base = 10) noexcept
  {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const unsigned long _Value,
    const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(
    char* const _First, char* const _Last, const long long _Value, const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const unsigned long long _Value,
    const int _Base = 10) noexcept   {
    return _Integer_to_chars(_First, _Last, _Value, _Base);
}

to_chars_result to_chars(char* _First, char* _Last, bool _Value, int _Base = 10) = delete;


 struct from_chars_result {
    const char* ptr;
    errc ec;
     friend bool operator==(const from_chars_result&, const from_chars_result&) = default;
};

  inline unsigned char _Digit_from_char(const char _Ch) noexcept {
         static constexpr unsigned char _Digit_from_byte[] = {255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255,
        255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
        32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
        255, 255, 255, 255, 255, 255, 255, 255, 255};
    static_assert(::std:: size(_Digit_from_byte) == 256);

    return _Digit_from_byte[static_cast<unsigned char>(_Ch)];
}

template <class _RawTy>
 from_chars_result _Integer_from_chars(
    const char* const _First, const char* const _Last, _RawTy& _Raw_value, const int _Base) noexcept {
    _Adl_verify_range(_First, _Last);
    ;

    bool _Minus_sign = false;

    const char* _Next = _First;

    if constexpr (is_signed_v<_RawTy>) {
        if (_Next != _Last && *_Next == '-') {
            _Minus_sign = true;
            ++_Next;
        }
    }

    using _Unsigned = make_unsigned_t<_RawTy>;

    constexpr _Unsigned _Uint_max    = static_cast<_Unsigned>(-1);
    constexpr _Unsigned _Int_max     = static_cast<_Unsigned>(_Uint_max >> 1);
    constexpr _Unsigned _Abs_int_min = static_cast<_Unsigned>(_Int_max + 1);

    _Unsigned _Risky_val;
    _Unsigned _Max_digit;

    if constexpr (is_signed_v<_RawTy>) {
        if (_Minus_sign) {
            _Risky_val = static_cast<_Unsigned>(_Abs_int_min / _Base);
            _Max_digit = static_cast<_Unsigned>(_Abs_int_min % _Base);
        } else {
            _Risky_val = static_cast<_Unsigned>(_Int_max / _Base);
            _Max_digit = static_cast<_Unsigned>(_Int_max % _Base);
        }
    } else {
        _Risky_val = static_cast<_Unsigned>(_Uint_max / _Base);
        _Max_digit = static_cast<_Unsigned>(_Uint_max % _Base);
    }

    _Unsigned _Value = 0;

    bool _Overflowed = false;

    for (; _Next != _Last; ++_Next) {
        const unsigned char _Digit = _Digit_from_char(*_Next);

        if (_Digit >= _Base) {
            break;
        }

        if (_Value < _Risky_val              || (_Value == _Risky_val && _Digit <= _Max_digit)) {              _Value = static_cast<_Unsigned>(_Value * _Base + _Digit);
        } else {              _Overflowed = true;          }
    }

    if (_Next - _First == static_cast<ptrdiff_t>(_Minus_sign)) {
        return {_First, errc::invalid_argument};
    }

    if (_Overflowed) {
        return {_Next, errc::result_out_of_range};
    }

    if constexpr (is_signed_v<_RawTy>) {
        if (_Minus_sign) {
            _Value = static_cast<_Unsigned>(0 - _Value);
        }
    }

    _Raw_value = static_cast<_RawTy>(_Value);  
    return {_Next, errc{}};
}

inline from_chars_result from_chars(
    const char* const _First, const char* const _Last, char& _Value, const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, signed char& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, unsigned char& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, short& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, unsigned short& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(
    const char* const _First, const char* const _Last, int& _Value, const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, unsigned int& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(
    const char* const _First, const char* const _Last, long& _Value, const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, unsigned long& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, long long& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, unsigned long long& _Value,
    const int _Base = 10) noexcept   {
    return _Integer_from_chars(_First, _Last, _Value, _Base);
}

 
  
    
    
                      struct _Big_integer_flt {
    _Big_integer_flt() noexcept : _Myused(0) {}

    _Big_integer_flt(const _Big_integer_flt& _Other) noexcept : _Myused(_Other._Myused) {
        :: memcpy(_Mydata, _Other._Mydata, _Other._Myused * sizeof(uint32_t));
    }

    _Big_integer_flt& operator=(const _Big_integer_flt& _Other) noexcept {
        _Myused = _Other._Myused;
        :: memmove(_Mydata, _Other._Mydata, _Other._Myused * sizeof(uint32_t));
        return *this;
    }

     bool operator<(const _Big_integer_flt& _Rhs) const noexcept {
        if (_Myused != _Rhs._Myused) {
            return _Myused < _Rhs._Myused;
        }

        for (uint32_t _Ix = _Myused - 1; _Ix != static_cast<uint32_t>(-1); --_Ix) {
            if (_Mydata[_Ix] != _Rhs._Mydata[_Ix]) {
                return _Mydata[_Ix] < _Rhs._Mydata[_Ix];
            }
        }

        return false;
    }

    static constexpr uint32_t _Maximum_bits = 1074                                              + 2552                                              + 54;  
    static constexpr uint32_t _Element_bits = 32;

    static constexpr uint32_t _Element_count = (_Maximum_bits + _Element_bits - 1) / _Element_bits;

    uint32_t _Myused;      uint32_t _Mydata[_Element_count];  };

 inline _Big_integer_flt _Make_big_integer_flt_one() noexcept {
    _Big_integer_flt _Xval{};
    _Xval._Mydata[0] = 1;
    _Xval._Myused    = 1;
    return _Xval;
}

 inline _Big_integer_flt _Make_big_integer_flt_u32(const uint32_t _Value) noexcept {
    _Big_integer_flt _Xval{};
    _Xval._Mydata[0] = _Value;
    _Xval._Myused    = 1;
    return _Xval;
}

 inline _Big_integer_flt _Make_big_integer_flt_u64(const uint64_t _Value) noexcept {
    _Big_integer_flt _Xval{};
    _Xval._Mydata[0] = static_cast<uint32_t>(_Value);
    _Xval._Mydata[1] = static_cast<uint32_t>(_Value >> 32);
    _Xval._Myused    = _Xval._Mydata[1] == 0 ? 1u : 2u;
    return _Xval;
}

 inline _Big_integer_flt _Make_big_integer_flt_power_of_two(const uint32_t _Power) noexcept {
    const uint32_t _Element_index = _Power / _Big_integer_flt::_Element_bits;
    const uint32_t _Bit_index     = _Power % _Big_integer_flt::_Element_bits;

    _Big_integer_flt _Xval{};
    :: memset(_Xval._Mydata, 0, _Element_index * sizeof(uint32_t));
    _Xval._Mydata[_Element_index] = 1u << _Bit_index;
    _Xval._Myused                 = _Element_index + 1;
    return _Xval;
}

 inline uint32_t _Bit_scan_reverse(const _Big_integer_flt& _Xval) noexcept {
    if (_Xval._Myused == 0) {
        return 0;
    }

    const uint32_t _Bx = _Xval._Myused - 1;

    ;  
    unsigned long _Index;  
    _BitScanReverse(&_Index, _Xval._Mydata[_Bx]);  
    return _Index + 1 + _Bx * _Big_integer_flt::_Element_bits;
}

   inline bool _Shift_left(_Big_integer_flt& _Xval, const uint32_t _Nx) noexcept {
    if (_Xval._Myused == 0) {
        return true;
    }

    const uint32_t _Unit_shift = _Nx / _Big_integer_flt::_Element_bits;
    const uint32_t _Bit_shift  = _Nx % _Big_integer_flt::_Element_bits;

    if (_Xval._Myused + _Unit_shift > _Big_integer_flt::_Element_count) {
                 _Xval._Myused = 0;
        return false;
    }

    if (_Bit_shift == 0) {
        :: memmove(_Xval._Mydata + _Unit_shift, _Xval._Mydata, _Xval._Myused * sizeof(uint32_t));
        _Xval._Myused += _Unit_shift;
    } else {
        const bool _Bit_shifts_into_next_unit =
            _Bit_shift > (_Big_integer_flt::_Element_bits - _Bit_scan_reverse(_Xval._Mydata[_Xval._Myused - 1]));

        const uint32_t _New_used = _Xval._Myused + _Unit_shift + static_cast<uint32_t>(_Bit_shifts_into_next_unit);

        if (_New_used > _Big_integer_flt::_Element_count) {
                         _Xval._Myused = 0;
            return false;
        }

        const uint32_t _Msb_bits = _Bit_shift;
        const uint32_t _Lsb_bits = _Big_integer_flt::_Element_bits - _Msb_bits;

        const uint32_t _Lsb_mask = (1UL << _Lsb_bits) - 1UL;
        const uint32_t _Msb_mask = ~_Lsb_mask;

                 for (uint32_t _Dest_index = _New_used - 1; _Dest_index != _Unit_shift - 1; --_Dest_index) {
             
                         const uint32_t _Upper_source_index = _Dest_index - _Unit_shift;

                         const uint32_t _Lower_source_index = _Dest_index - _Unit_shift - 1;

            const uint32_t _Upper_source = _Upper_source_index < _Xval._Myused ? _Xval._Mydata[_Upper_source_index] : 0;
            const uint32_t _Lower_source = _Lower_source_index < _Xval._Myused ? _Xval._Mydata[_Lower_source_index] : 0;

            const uint32_t _Shifted_upper_source = (_Upper_source & _Lsb_mask) << _Msb_bits;
            const uint32_t _Shifted_lower_source = (_Lower_source & _Msb_mask) >> _Lsb_bits;

            const uint32_t _Combined_shifted_source = _Shifted_upper_source | _Shifted_lower_source;

            _Xval._Mydata[_Dest_index] = _Combined_shifted_source;
        }

        _Xval._Myused = _New_used;
    }

    :: memset(_Xval._Mydata, 0, _Unit_shift * sizeof(uint32_t));

    return true;
}

   inline bool _Add(_Big_integer_flt& _Xval, const uint32_t _Value) noexcept {
    if (_Value == 0) {
        return true;
    }

    uint32_t _Carry = _Value;
    for (uint32_t _Ix = 0; _Ix != _Xval._Myused; ++_Ix) {
        const uint64_t _Result = static_cast<uint64_t>(_Xval._Mydata[_Ix]) + _Carry;
        _Xval._Mydata[_Ix]     = static_cast<uint32_t>(_Result);
        _Carry                 = static_cast<uint32_t>(_Result >> 32);
    }

    if (_Carry != 0) {
        if (_Xval._Myused < _Big_integer_flt::_Element_count) {
            _Xval._Mydata[_Xval._Myused] = _Carry;
            ++_Xval._Myused;
        } else {
            _Xval._Myused = 0;
            return false;
        }
    }

    return true;
}

 inline uint32_t _Add_carry(uint32_t& _Ux1, const uint32_t _Ux2, const uint32_t _U_carry) noexcept {
    const uint64_t _Uu = static_cast<uint64_t>(_Ux1) + _Ux2 + _U_carry;
    _Ux1               = static_cast<uint32_t>(_Uu);
    return static_cast<uint32_t>(_Uu >> 32);
}

 inline uint32_t _Add_multiply_carry(
    uint32_t& _U_add, const uint32_t _U_mul_1, const uint32_t _U_mul_2, const uint32_t _U_carry) noexcept {
    const uint64_t _Uu_res = static_cast<uint64_t>(_U_mul_1) * _U_mul_2 + _U_add + _U_carry;
    _U_add                 = static_cast<uint32_t>(_Uu_res);
    return static_cast<uint32_t>(_Uu_res >> 32);
}

 inline uint32_t _Multiply_core(
    uint32_t* const _Multiplicand, const uint32_t _Multiplicand_count, const uint32_t _Multiplier) noexcept {
    uint32_t _Carry = 0;
    for (uint32_t _Ix = 0; _Ix != _Multiplicand_count; ++_Ix) {
        const uint64_t _Result = static_cast<uint64_t>(_Multiplicand[_Ix]) * _Multiplier + _Carry;
        _Multiplicand[_Ix]     = static_cast<uint32_t>(_Result);
        _Carry                 = static_cast<uint32_t>(_Result >> 32);
    }

    return _Carry;
}

   inline bool _Multiply(_Big_integer_flt& _Multiplicand, const uint32_t _Multiplier) noexcept {
    if (_Multiplier == 0) {
        _Multiplicand._Myused = 0;
        return true;
    }

    if (_Multiplier == 1) {
        return true;
    }

    if (_Multiplicand._Myused == 0) {
        return true;
    }

    const uint32_t _Carry = _Multiply_core(_Multiplicand._Mydata, _Multiplicand._Myused, _Multiplier);
    if (_Carry != 0) {
        if (_Multiplicand._Myused < _Big_integer_flt::_Element_count) {
            _Multiplicand._Mydata[_Multiplicand._Myused] = _Carry;
            ++_Multiplicand._Myused;
        } else {
            _Multiplicand._Myused = 0;
            return false;
        }
    }

    return true;
}

     inline bool _Multiply(_Big_integer_flt& _Multiplicand, const _Big_integer_flt& _Multiplier) noexcept {
    if (_Multiplicand._Myused == 0) {
        return true;
    }

    if (_Multiplier._Myused == 0) {
        _Multiplicand._Myused = 0;
        return true;
    }

    if (_Multiplier._Myused == 1) {
        return _Multiply(_Multiplicand, _Multiplier._Mydata[0]);      }

    if (_Multiplicand._Myused == 1) {
        const uint32_t _Small_multiplier = _Multiplicand._Mydata[0];
        _Multiplicand                    = _Multiplier;
        return _Multiply(_Multiplicand, _Small_multiplier);      }

         const bool _Multiplier_is_shorter = _Multiplier._Myused < _Multiplicand._Myused;
    const uint32_t* const _Rgu1       = _Multiplier_is_shorter ? _Multiplier._Mydata : _Multiplicand._Mydata;
    const uint32_t* const _Rgu2       = _Multiplier_is_shorter ? _Multiplicand._Mydata : _Multiplier._Mydata;

    const uint32_t _Cu1 = _Multiplier_is_shorter ? _Multiplier._Myused : _Multiplicand._Myused;
    const uint32_t _Cu2 = _Multiplier_is_shorter ? _Multiplicand._Myused : _Multiplier._Myused;

    _Big_integer_flt _Result{};
    for (uint32_t _Iu1 = 0; _Iu1 != _Cu1; ++_Iu1) {
        const uint32_t _U_cur = _Rgu1[_Iu1];
        if (_U_cur == 0) {
            if (_Iu1 == _Result._Myused) {
                _Result._Mydata[_Iu1] = 0;
                _Result._Myused       = _Iu1 + 1;
            }

            continue;
        }

        uint32_t _U_carry = 0;
        uint32_t _Iu_res  = _Iu1;
        for (uint32_t _Iu2 = 0; _Iu2 != _Cu2 && _Iu_res != _Big_integer_flt::_Element_count; ++_Iu2, ++_Iu_res) {
            if (_Iu_res == _Result._Myused) {
                _Result._Mydata[_Iu_res] = 0;
                _Result._Myused          = _Iu_res + 1;
            }

            _U_carry = _Add_multiply_carry(_Result._Mydata[_Iu_res], _U_cur, _Rgu2[_Iu2], _U_carry);
        }

        while (_U_carry != 0 && _Iu_res != _Big_integer_flt::_Element_count) {
            if (_Iu_res == _Result._Myused) {
                _Result._Mydata[_Iu_res] = 0;
                _Result._Myused          = _Iu_res + 1;
            }

            _U_carry = _Add_carry(_Result._Mydata[_Iu_res++], 0, _U_carry);
        }

        if (_Iu_res == _Big_integer_flt::_Element_count) {
            _Multiplicand._Myused = 0;
            return false;
        }
    }

         _Multiplicand = _Result;
    return true;
}

   inline bool _Multiply_by_power_of_ten(_Big_integer_flt& _Xval, const uint32_t _Power) noexcept {
                         
          
    static constexpr uint32_t _Large_power_data[] = {0x540be400, 0x00000002, 0x63100000, 0x6bc75e2d, 0x00000005,
        0x40000000, 0x4674edea, 0x9f2c9cd0, 0x0000000c, 0xb9f56100, 0x5ca4bfab, 0x6329f1c3, 0x0000001d, 0xb5640000,
        0xc40534fd, 0x926687d2, 0x6c3b15f9, 0x00000044, 0x10000000, 0x946590d9, 0xd762422c, 0x9a224501, 0x4f272617,
        0x0000009f, 0x07950240, 0x245689c1, 0xc5faa71c, 0x73c86d67, 0xebad6ddc, 0x00000172, 0xcec10000, 0x63a22764,
        0xefa418ca, 0xcdd17b25, 0x6bdfef70, 0x9dea3e1f, 0x0000035f, 0xe4000000, 0xcdc3fe6e, 0x66bc0c6a, 0x2e391f32,
        0x5a450203, 0x71d2f825, 0xc3c24a56, 0x000007da, 0xa82e8f10, 0xaab24308, 0x8e211a7c, 0xf38ace40, 0x84c4ce0b,
        0x7ceb0b27, 0xad2594c3, 0x00001249, 0xdd1a4000, 0xcc9f54da, 0xdc5961bf, 0xc75cabab, 0xf505440c, 0xd1bc1667,
        0xfbb7af52, 0x608f8d29, 0x00002a94, 0x21000000, 0x17bb8a0c, 0x56af8ea4, 0x06479fa9, 0x5d4bb236, 0x80dc5fe0,
        0xf0feaa0a, 0xa88ed940, 0x6b1a80d0, 0x00006323, 0x324c3864, 0x8357c796, 0xe44a42d5, 0xd9a92261, 0xbd3c103d,
        0x91e5f372, 0xc0591574, 0xec1da60d, 0x102ad96c, 0x0000e6d3, 0x1e851000, 0x6e4f615b, 0x187b2a69, 0x0450e21c,
        0x2fdd342b, 0x635027ee, 0xa6c97199, 0x8e4ae916, 0x17082e28, 0x1a496e6f, 0x0002196e, 0x32400000, 0x04ad4026,
        0xf91e7250, 0x2994d1d5, 0x665bcdbb, 0xa23b2e96, 0x65fa7ddb, 0x77de53ac, 0xb020a29b, 0xc6bff953, 0x4b9425ab,
        0x0004e34d, 0xfbc32d81, 0x5222d0f4, 0xb70f2850, 0x5713f2f3, 0xdc421413, 0xd6395d7d, 0xf8591999, 0x0092381c,
        0x86b314d6, 0x7aa577b9, 0x12b7fe61, 0x000b616a, 0x1d11e400, 0x56c3678d, 0x3a941f20, 0x9b09368b, 0xbd706908,
        0x207665be, 0x9b26c4eb, 0x1567e89d, 0x9d15096e, 0x7132f22b, 0xbe485113, 0x45e5a2ce, 0x001a7f52, 0xbb100000,
        0x02f79478, 0x8c1b74c0, 0xb0f05d00, 0xa9dbc675, 0xe2d9b914, 0x650f72df, 0x77284b4c, 0x6df6e016, 0x514391c2,
        0x2795c9cf, 0xd6e2ab55, 0x9ca8e627, 0x003db1a6, 0x40000000, 0xf4ecd04a, 0x7f2388f0, 0x580a6dc5, 0x43bf046f,
        0xf82d5dc3, 0xee110848, 0xfaa0591c, 0xcdf4f028, 0x192ea53f, 0xbcd671a0, 0x7d694487, 0x10f96e01, 0x791a569d,
        0x008fa475, 0xb9b2e100, 0x8288753c, 0xcd3f1693, 0x89b43a6b, 0x089e87de, 0x684d4546, 0xfddba60c, 0xdf249391,
        0x3068ec13, 0x99b44427, 0xb68141ee, 0x5802cac3, 0xd96851f1, 0x7d7625a2, 0x014e718d, 0xfb640000, 0xf25a83e6,
        0x9457ad0f, 0x0080b511, 0x2029b566, 0xd7c5d2cf, 0xa53f6d7d, 0xcdb74d1c, 0xda9d70de, 0xb716413d, 0x71d0ca4e,
        0xd7e41398, 0x4f403a90, 0xf9ab3fe2, 0x264d776f, 0x030aafe6, 0x10000000, 0x09ab5531, 0xa60c58d2, 0x566126cb,
        0x6a1c8387, 0x7587f4c1, 0x2c44e876, 0x41a047cf, 0xc908059e, 0xa0ba063e, 0xe7cfc8e8, 0xe1fac055, 0xef0144b2,
        0x24207eb0, 0xd1722573, 0xe4b8f981, 0x071505ae, 0x7a3b6240, 0xcea45d4f, 0x4fe24133, 0x210f6d6d, 0xe55633f2,
        0x25c11356, 0x28ebd797, 0xd396eb84, 0x1e493b77, 0x471f2dae, 0x96ad3820, 0x8afaced1, 0x4edecddb, 0x5568c086,
        0xb2695da1, 0x24123c89, 0x107d4571, 0x1c410000, 0x6e174a27, 0xec62ae57, 0xef2289aa, 0xb6a2fbdd, 0x17e1efe4,
        0x3366bdf2, 0x37b48880, 0xbfb82c3e, 0x19acde91, 0xd4f46408, 0x35ff6a4e, 0x67566a0e, 0x40dbb914, 0x782a3bca,
        0x6b329b68, 0xf5afc5d9, 0x266469bc, 0xe4000000, 0xfb805ff4, 0xed55d1af, 0x9b4a20a8, 0xab9757f8, 0x01aefe0a,
        0x4a2ca67b, 0x1ebf9569, 0xc7c41c29, 0xd8d5d2aa, 0xd136c776, 0x93da550c, 0x9ac79d90, 0x254bcba8, 0x0df07618,
        0xf7a88809, 0x3a1f1074, 0xe54811fc, 0x59638ead, 0x97cbe710, 0x26d769e8, 0xb4e4723e, 0x5b90aa86, 0x9c333922,
        0x4b7a0775, 0x2d47e991, 0x9a6ef977, 0x160b40e7, 0x0c92f8c4, 0xf25ff010, 0x25c36c11, 0xc9f98b42, 0x730b919d,
        0x05ff7caf, 0xb0432d85, 0x2d2b7569, 0xa657842c, 0xd01fef10, 0xc77a4000, 0xe8b862e5, 0x10d8886a, 0xc8cd98e5,
        0x108955c5, 0xd059b655, 0x58fbbed4, 0x03b88231, 0x034c4519, 0x194dc939, 0x1fc500ac, 0x794cc0e2, 0x3bc980a1,
        0xe9b12dd1, 0x5e6d22f8, 0x7b38899a, 0xce7919d8, 0x78c67672, 0x79e5b99f, 0xe494034e, 0x00000001, 0xa1000000,
        0x6c5cd4e9, 0x9be47d6f, 0xf93bd9e7, 0x77626fa1, 0xc68b3451, 0xde2b59e8, 0xcf3cde58, 0x2246ff58, 0xa8577c15,
        0x26e77559, 0x17776753, 0xebe6b763, 0xe3fd0a5f, 0x33e83969, 0xa805a035, 0xf631b987, 0x211f0f43, 0xd85a43db,
        0xab1bf596, 0x683f19a2, 0x00000004, 0xbe7dfe64, 0x4bc9042f, 0xe1f5edb0, 0x8fa14eda, 0xe409db73, 0x674fee9c,
        0xa9159f0d, 0xf6b5b5d6, 0x7338960e, 0xeb49c291, 0x5f2b97cc, 0x0f383f95, 0x2091b3f6, 0xd1783714, 0xc1d142df,
        0x153e22de, 0x8aafdf57, 0x77f5e55f, 0xa3e7ca8b, 0x032f525b, 0x42e74f3d, 0x0000000a, 0xf4dd1000, 0x5d450952,
        0xaeb442e1, 0xa3b3342e, 0x3fcda36f, 0xb4287a6e, 0x4bc177f7, 0x67d2c8d0, 0xaea8f8e0, 0xadc93b67, 0x6cc856b3,
        0x959d9d0b, 0x5b48c100, 0x4abe8a3d, 0x52d936f4, 0x71dbe84d, 0xf91c21c5, 0x4a458109, 0xd7aad86a, 0x08e14c7c,
        0x759ba59c, 0xe43c8800, 0x00000017, 0x92400000, 0x04f110d4, 0x186472be, 0x8736c10c, 0x1478abfb, 0xfc51af29,
        0x25eb9739, 0x4c2b3015, 0xa1030e0b, 0x28fe3c3b, 0x7788fcba, 0xb89e4358, 0x733de4a4, 0x7c46f2c2, 0x8f746298,
        0xdb19210f, 0x2ea3b6ae, 0xaa5014b2, 0xea39ab8d, 0x97963442, 0x01dfdfa9, 0xd2f3d3fe, 0xa0790280, 0x00000037,
        0x509c9b01, 0xc7dcadf1, 0x383dad2c, 0x73c64d37, 0xea6d67d0, 0x519ba806, 0xc403f2f8, 0xa052e1a2, 0xd710233a,
        0x448573a9, 0xcf12d9ba, 0x70871803, 0x52dc3a9b, 0xe5b252e8, 0x0717fb4e, 0xbe4da62f, 0x0aabd7e1, 0x8c62ed4f,
        0xceb9ec7b, 0xd4664021, 0xa1158300, 0xcce375e6, 0x842f29f2, 0x00000081, 0x7717e400, 0xd3f5fb64, 0xa0763d71,
        0x7d142fe9, 0x33f44c66, 0xf3b8f12e, 0x130f0d8e, 0x734c9469, 0x60260fa8, 0x3c011340, 0xcc71880a, 0x37a52d21,
        0x8adac9ef, 0x42bb31b4, 0xd6f94c41, 0xc88b056c, 0xe20501b8, 0x5297ed7c, 0x62c361c4, 0x87dad8aa, 0xb833eade,
        0x94f06861, 0x13cc9abd, 0x8dc1d56a, 0x0000012d, 0x13100000, 0xc67a36e8, 0xf416299e, 0xf3493f0a, 0x77a5a6cf,
        0xa4be23a3, 0xcca25b82, 0x3510722f, 0xbe9d447f, 0xa8c213b8, 0xc94c324e, 0xbc9e33ad, 0x76acfeba, 0x2e4c2132,
        0x3e13cd32, 0x70fe91b4, 0xbb5cd936, 0x42149785, 0x46cc1afd, 0xe638ddf8, 0x690787d2, 0x1a02d117, 0x3eb5f1fe,
        0xc3b9abae, 0x1c08ee6f, 0x000002be, 0x40000000, 0x8140c2aa, 0x2cf877d9, 0x71e1d73d, 0xd5e72f98, 0x72516309,
        0xafa819dd, 0xd62a5a46, 0x2a02dcce, 0xce46ddfe, 0x2713248d, 0xb723d2ad, 0xc404bb19, 0xb706cc2b, 0x47b1ebca,
        0x9d094bdc, 0xc5dc02ca, 0x31e6518e, 0x8ec35680, 0x342f58a8, 0x8b041e42, 0xfebfe514, 0x05fffc13, 0x6763790f,
        0x66d536fd, 0xb9e15076, 0x00000662, 0x67b06100, 0xd2010a1a, 0xd005e1c0, 0xdb12733b, 0xa39f2e3f, 0x61b29de2,
        0x2a63dce2, 0x942604bc, 0x6170d59b, 0xc2e32596, 0x140b75b9, 0x1f1d2c21, 0xb8136a60, 0x89d23ba2, 0x60f17d73,
        0xc6cad7df, 0x0669df2b, 0x24b88737, 0x669306ed, 0x19496eeb, 0x938ddb6f, 0x5e748275, 0xc56e9a36, 0x3690b731,
        0xc82842c5, 0x24ae798e, 0x00000ede, 0x41640000, 0xd5889ac1, 0xd9432c99, 0xa280e71a, 0x6bf63d2e, 0x8249793d,
        0x79e7a943, 0x22fde64a, 0xe0d6709a, 0x05cacfef, 0xbd8da4d7, 0xe364006c, 0xa54edcb3, 0xa1a8086e, 0x748f459e,
        0xfc8e54c8, 0xcc74c657, 0x42b8c3d4, 0x57d9636e, 0x35b55bcc, 0x6c13fee9, 0x1ac45161, 0xb595badb, 0xa1f14e9d,
        0xdcf9e750, 0x07637f71, 0xde2f9f2b, 0x0000229d, 0x10000000, 0x3c5ebd89, 0xe3773756, 0x3dcba338, 0x81d29e4f,
        0xa4f79e2c, 0xc3f9c774, 0x6a1ce797, 0xac5fe438, 0x07f38b9c, 0xd588ecfa, 0x3e5ac1ac, 0x85afccce, 0x9d1f3f70,
        0xe82d6dd3, 0x177d180c, 0x5e69946f, 0x648e2ce1, 0x95a13948, 0x340fe011, 0xb4173c58, 0x2748f694, 0x7c2657bd,
        0x758bda2e, 0x3b8090a0, 0x2ddbb613, 0x6dcf4890, 0x24e4047e, 0x00005099};

    struct _Unpack_index {
        uint16_t _Offset;          uint8_t _Zeroes;          uint8_t _Size;      };

    static constexpr _Unpack_index _Large_power_indices[] = {{0, 0, 2}, {2, 0, 3}, {5, 0, 4}, {9, 1, 4}, {13, 1, 5},
        {18, 1, 6}, {24, 2, 6}, {30, 2, 7}, {37, 2, 8}, {45, 3, 8}, {53, 3, 9}, {62, 3, 10}, {72, 4, 10}, {82, 4, 11},
        {93, 4, 12}, {105, 5, 12}, {117, 5, 13}, {130, 5, 14}, {144, 5, 15}, {159, 6, 15}, {174, 6, 16}, {190, 6, 17},
        {207, 7, 17}, {224, 7, 18}, {242, 7, 19}, {261, 8, 19}, {280, 8, 21}, {301, 8, 22}, {323, 9, 22}, {345, 9, 23},
        {368, 9, 24}, {392, 10, 24}, {416, 10, 25}, {441, 10, 26}, {467, 10, 27}, {494, 11, 27}, {521, 11, 28},
        {549, 11, 29}};

    for (uint32_t _Large_power = _Power / 10; _Large_power != 0;) {
        const uint32_t _Current_power =
            (::std:: min)(_Large_power, static_cast<uint32_t>(::std:: size(_Large_power_indices)));

        const _Unpack_index& _Index = _Large_power_indices[_Current_power - 1];
        _Big_integer_flt _Multiplier{};
        _Multiplier._Myused = static_cast<uint32_t>(_Index._Size + _Index._Zeroes);

        const uint32_t* const _Source = _Large_power_data + _Index._Offset;

        :: memset(_Multiplier._Mydata, 0, _Index._Zeroes * sizeof(uint32_t));
        :: memcpy(_Multiplier._Mydata + _Index._Zeroes, _Source, _Index._Size * sizeof(uint32_t));

        if (!_Multiply(_Xval, _Multiplier)) {              return false;
        }

        _Large_power -= _Current_power;
    }

    static constexpr uint32_t _Small_powers_of_ten[9] = {
        10, 100, 1'000, 10'000, 100'000, 1'000'000, 10'000'000, 100'000'000, 1'000'000'000};

    const uint32_t _Small_power = _Power % 10;

    if (_Small_power == 0) {
        return true;
    }

    return _Multiply(_Xval, _Small_powers_of_ten[_Small_power - 1]);  }

   
  inline uint32_t _Count_sequential_high_zeroes(const uint32_t _Ux) noexcept {
    unsigned long _Index;      return _BitScanReverse(&_Index, _Ux) ? 31 - _Index : 32;
}

     inline uint64_t _Divide(_Big_integer_flt& _Numerator, const _Big_integer_flt& _Denominator) noexcept {
         if (_Numerator._Myused == 0) {
        return 0;
    }

         ;  
    uint32_t _Max_numerator_element_index         = _Numerator._Myused - 1;
    const uint32_t _Max_denominator_element_index = _Denominator._Myused - 1;

              if (_Max_denominator_element_index == 0) {
        const uint32_t _Small_denominator = _Denominator._Mydata[0];

        if (_Max_numerator_element_index == 0) {
            const uint32_t _Small_numerator = _Numerator._Mydata[0];

            if (_Small_denominator == 1) {
                _Numerator._Myused = 0;
                return _Small_numerator;
            }

            _Numerator._Mydata[0] = _Small_numerator % _Small_denominator;
            _Numerator._Myused    = _Numerator._Mydata[0] > 0 ? 1u : 0u;
            return _Small_numerator / _Small_denominator;
        }

        if (_Small_denominator == 1) {
            uint64_t _Quotient = _Numerator._Mydata[1];
            _Quotient <<= 32;
            _Quotient |= _Numerator._Mydata[0];
            _Numerator._Myused = 0;
            return _Quotient;
        }

                 uint64_t _Quotient = 0;

        uint64_t _Uu = 0;
        for (uint32_t _Iv = _Max_numerator_element_index; _Iv != static_cast<uint32_t>(-1); --_Iv) {
            _Uu       = (_Uu << 32) | _Numerator._Mydata[_Iv];
            _Quotient = (_Quotient << 32) + static_cast<uint32_t>(_Uu / _Small_denominator);
            _Uu %= _Small_denominator;
        }

        _Numerator._Mydata[1] = static_cast<uint32_t>(_Uu >> 32);
        _Numerator._Mydata[0] = static_cast<uint32_t>(_Uu);
        _Numerator._Myused    = _Numerator._Mydata[1] > 0 ? 2u : 1u;
        return _Quotient;
    }

    if (_Max_denominator_element_index > _Max_numerator_element_index) {
        return 0;
    }

    const uint32_t _Cu_den = _Max_denominator_element_index + 1;
    const int32_t _Cu_diff = static_cast<int32_t>(_Max_numerator_element_index - _Max_denominator_element_index);

         int32_t _Cu_quo = _Cu_diff;
    for (int32_t _Iu = static_cast<int32_t>(_Max_numerator_element_index);; --_Iu) {
        if (_Iu < _Cu_diff) {
            ++_Cu_quo;
            break;
        }

        if (_Denominator._Mydata[_Iu - _Cu_diff] != _Numerator._Mydata[_Iu]) {
            if (_Denominator._Mydata[_Iu - _Cu_diff] < _Numerator._Mydata[_Iu]) {
                ++_Cu_quo;
            }

            break;
        }
    }

    if (_Cu_quo == 0) {
        return 0;
    }

         uint32_t _U_den      = _Denominator._Mydata[_Cu_den - 1];
    uint32_t _U_den_next = _Denominator._Mydata[_Cu_den - 2];

    const uint32_t _Cbit_shift_left  = _Count_sequential_high_zeroes(_U_den);
    const uint32_t _Cbit_shift_right = 32 - _Cbit_shift_left;
    if (_Cbit_shift_left > 0) {
        _U_den = (_U_den << _Cbit_shift_left) | (_U_den_next >> _Cbit_shift_right);
        _U_den_next <<= _Cbit_shift_left;

        if (_Cu_den > 2) {
            _U_den_next |= _Denominator._Mydata[_Cu_den - 3] >> _Cbit_shift_right;
        }
    }

    uint64_t _Quotient = 0;
    for (int32_t _Iu = _Cu_quo; --_Iu >= 0;) {
                 const uint32_t _U_num_hi =
            (_Iu + _Cu_den <= _Max_numerator_element_index) ? _Numerator._Mydata[_Iu + _Cu_den] : 0;

        uint64_t _Uu_num =
            (static_cast<uint64_t>(_U_num_hi) << 32) | static_cast<uint64_t>(_Numerator._Mydata[_Iu + _Cu_den - 1]);

        uint32_t _U_num_next = _Numerator._Mydata[_Iu + _Cu_den - 2];
        if (_Cbit_shift_left > 0) {
            _Uu_num = (_Uu_num << _Cbit_shift_left) | (_U_num_next >> _Cbit_shift_right);
            _U_num_next <<= _Cbit_shift_left;

            if (_Iu + _Cu_den >= 3) {
                _U_num_next |= _Numerator._Mydata[_Iu + _Cu_den - 3] >> _Cbit_shift_right;
            }
        }

                 uint64_t _Uu_quo = _Uu_num / _U_den;
        uint64_t _Uu_rem = static_cast<uint32_t>(_Uu_num % _U_den);

        if (_Uu_quo > 0xffffffffui32) {
            _Uu_rem += _U_den * (_Uu_quo - 0xffffffffui32);
            _Uu_quo = 0xffffffffui32;
        }

        while (_Uu_rem <= 0xffffffffui32 && _Uu_quo * _U_den_next > ((_Uu_rem << 32) | _U_num_next)) {
            --_Uu_quo;
            _Uu_rem += _U_den;
        }

                          if (_Uu_quo > 0) {
            uint64_t _Uu_borrow = 0;

            for (uint32_t _Iu2 = 0; _Iu2 < _Cu_den; ++_Iu2) {
                _Uu_borrow += _Uu_quo * _Denominator._Mydata[_Iu2];

                const uint32_t _U_sub = static_cast<uint32_t>(_Uu_borrow);
                _Uu_borrow >>= 32;
                if (_Numerator._Mydata[_Iu + _Iu2] < _U_sub) {
                    ++_Uu_borrow;
                }

                _Numerator._Mydata[_Iu + _Iu2] -= _U_sub;
            }

            if (_U_num_hi < _Uu_borrow) {
                                 uint32_t _U_carry = 0;
                for (uint32_t _Iu2 = 0; _Iu2 < _Cu_den; ++_Iu2) {
                    const uint64_t _Sum = static_cast<uint64_t>(_Numerator._Mydata[_Iu + _Iu2])
                                        + static_cast<uint64_t>(_Denominator._Mydata[_Iu2]) + _U_carry;

                    _Numerator._Mydata[_Iu + _Iu2] = static_cast<uint32_t>(_Sum);
                    _U_carry                       = static_cast<uint32_t>(_Sum >> 32);
                }

                --_Uu_quo;
            }

            _Max_numerator_element_index = _Iu + _Cu_den - 1;
        }

        _Quotient = (_Quotient << 32) + static_cast<uint32_t>(_Uu_quo);
    }

         for (uint32_t _Ix = _Max_numerator_element_index + 1; _Ix < _Numerator._Myused; ++_Ix) {
        _Numerator._Mydata[_Ix] = 0;
    }

    uint32_t _Used = _Max_numerator_element_index + 1;

    while (_Used != 0 && _Numerator._Mydata[_Used - 1] == 0) {
        --_Used;
    }

    _Numerator._Myused = _Used;

    return _Quotient;
}

 

 
  
 
    
     
 struct _Floating_point_string {
    bool _Myis_negative;
    int32_t _Myexponent;
    uint32_t _Mymantissa_count;
    uint8_t _Mymantissa[768];
};

 template <class _FloatingType>
void _Assemble_floating_point_zero(const bool _Is_negative, _FloatingType& _Result) noexcept {
    using _Floating_traits = _Floating_type_traits<_FloatingType>;
    using _Uint_type       = typename _Floating_traits::_Uint_type;

    _Uint_type _Sign_component = _Is_negative;
    _Sign_component <<= _Floating_traits::_Sign_shift;

    _Result = _Bit_cast<_FloatingType>(_Sign_component);
}

 template <class _FloatingType>
void _Assemble_floating_point_infinity(const bool _Is_negative, _FloatingType& _Result) noexcept {
    using _Floating_traits = _Floating_type_traits<_FloatingType>;
    using _Uint_type       = typename _Floating_traits::_Uint_type;

    _Uint_type _Sign_component = _Is_negative;
    _Sign_component <<= _Floating_traits::_Sign_shift;

    const _Uint_type _Exponent_component = _Floating_traits::_Shifted_exponent_mask;

    _Result = _Bit_cast<_FloatingType>(_Sign_component | _Exponent_component);
}

   
 
    inline bool _Should_round_up(
    const bool _Lsb_bit, const bool _Round_bit, const bool _Has_tail_bits) noexcept {
                         
                        return _Round_bit && (_Has_tail_bits || _Lsb_bit);
}

    inline uint64_t _Right_shift_with_rounding(
    const uint64_t _Value, const uint32_t _Shift, const bool _Has_zero_tail) noexcept {
    constexpr uint32_t _Total_number_of_bits = 64;
    if (_Shift >= _Total_number_of_bits) {
        if (_Shift == _Total_number_of_bits) {
            constexpr uint64_t _Extra_bits_mask = (1ULL << (_Total_number_of_bits - 1)) - 1;
            constexpr uint64_t _Round_bit_mask  = (1ULL << (_Total_number_of_bits - 1));

            const bool _Round_bit = (_Value & _Round_bit_mask) != 0;
            const bool _Tail_bits = !_Has_zero_tail || (_Value & _Extra_bits_mask) != 0;

                                      return static_cast<uint64_t>(_Round_bit && _Tail_bits);
        } else {
                         return 0;
        }
    }

                    
               
     
                    
              const uint64_t _Lsb_bit = _Value;

              const uint64_t _Round_bit = _Value << 1;

                         
                        const uint64_t _Has_tail_bits = _Round_bit - static_cast<uint64_t>(_Has_zero_tail);

              const uint64_t _Should_round = ((_Round_bit & (_Has_tail_bits | _Lsb_bit)) >> _Shift) & uint64_t{1};

         return (_Value >> _Shift) + _Should_round;
}

       
  template <class _FloatingType>
void _Assemble_floating_point_value_no_shift(const bool _Is_negative, const int32_t _Exponent,
    const typename _Floating_type_traits<_FloatingType>::_Uint_type _Mantissa, _FloatingType& _Result) noexcept {
                                   
                                                 using _Floating_traits = _Floating_type_traits<_FloatingType>;
    using _Uint_type       = typename _Floating_traits::_Uint_type;

    _Uint_type _Sign_component = _Is_negative;
    _Sign_component <<= _Floating_traits::_Sign_shift;

    _Uint_type _Exponent_component = static_cast<uint32_t>(_Exponent + (_Floating_traits::_Exponent_bias - 1));
    _Exponent_component <<= _Floating_traits::_Exponent_shift;

    _Result = _Bit_cast<_FloatingType>(_Sign_component | (_Exponent_component + _Mantissa));
}

     
  
    template <class _FloatingType>
 errc _Assemble_floating_point_value(const uint64_t _Initial_mantissa, const int32_t _Initial_exponent,
    const bool _Is_negative, const bool _Has_zero_tail, _FloatingType& _Result) noexcept {
    using _Traits = _Floating_type_traits<_FloatingType>;

                   const uint32_t _Initial_mantissa_bits = _Bit_scan_reverse(_Initial_mantissa);
    const int32_t _Normal_mantissa_shift  = static_cast<int32_t>(_Traits::_Mantissa_bits - _Initial_mantissa_bits);
    const int32_t _Normal_exponent        = _Initial_exponent - _Normal_mantissa_shift;

    if (_Normal_exponent > _Traits::_Maximum_binary_exponent) {
                 _Assemble_floating_point_infinity(_Is_negative, _Result);
        return errc::result_out_of_range;      }

    uint64_t _Mantissa = _Initial_mantissa;
    int32_t _Exponent  = _Normal_exponent;
    errc _Error_code{};

    if (_Normal_exponent < _Traits::_Minimum_binary_exponent) {
                  
                          _Exponent = _Traits::_Minimum_binary_exponent;

                 const int32_t _Denormal_mantissa_shift = _Initial_exponent - _Exponent;

        if (_Denormal_mantissa_shift < 0) {
            _Mantissa =
                _Right_shift_with_rounding(_Mantissa, static_cast<uint32_t>(-_Denormal_mantissa_shift), _Has_zero_tail);

                                      if (_Mantissa == 0) {
                _Error_code = errc::result_out_of_range;              }

                                                                              
                          
                                  } else {
            _Mantissa <<= _Denormal_mantissa_shift;
        }
    } else {
        if (_Normal_mantissa_shift < 0) {
            _Mantissa =
                _Right_shift_with_rounding(_Mantissa, static_cast<uint32_t>(-_Normal_mantissa_shift), _Has_zero_tail);

                                       
                                      if (_Mantissa > _Traits::_Normal_mantissa_mask && _Exponent == _Traits::_Maximum_binary_exponent) {
                _Error_code = errc::result_out_of_range;                                                                        }
        } else {
            _Mantissa <<= _Normal_mantissa_shift;
        }
    }

         using _Uint_type = typename _Traits::_Uint_type;

    _Assemble_floating_point_value_no_shift(_Is_negative, _Exponent, static_cast<_Uint_type>(_Mantissa), _Result);

    return _Error_code;
}

    template <class _FloatingType>
 errc _Assemble_floating_point_value_from_big_integer_flt(const _Big_integer_flt& _Integer_value,
    const uint32_t _Integer_bits_of_precision, const bool _Is_negative, const bool _Has_nonzero_fractional_part,
    _FloatingType& _Result) noexcept {
    using _Traits = _Floating_type_traits<_FloatingType>;

    const int32_t _Base_exponent = _Traits::_Mantissa_bits - 1;

              if (_Integer_bits_of_precision <= 64) {
        const int32_t _Exponent = _Base_exponent;

        const uint32_t _Mantissa_low  = _Integer_value._Myused > 0 ? _Integer_value._Mydata[0] : 0;
        const uint32_t _Mantissa_high = _Integer_value._Myused > 1 ? _Integer_value._Mydata[1] : 0;
        const uint64_t _Mantissa      = _Mantissa_low + (static_cast<uint64_t>(_Mantissa_high) << 32);

        return _Assemble_floating_point_value(
            _Mantissa, _Exponent, _Is_negative, !_Has_nonzero_fractional_part, _Result);
    }

    const uint32_t _Top_element_bits  = _Integer_bits_of_precision % 32;
    const uint32_t _Top_element_index = _Integer_bits_of_precision / 32;

    const uint32_t _Middle_element_index = _Top_element_index - 1;
    const uint32_t _Bottom_element_index = _Top_element_index - 2;

         if (_Top_element_bits == 0) {
        const int32_t _Exponent = static_cast<int32_t>(_Base_exponent + _Bottom_element_index * 32);

        const uint64_t _Mantissa = _Integer_value._Mydata[_Bottom_element_index]
                                 + (static_cast<uint64_t>(_Integer_value._Mydata[_Middle_element_index]) << 32);

        bool _Has_zero_tail = !_Has_nonzero_fractional_part;
        for (uint32_t _Ix = 0; _Has_zero_tail && _Ix != _Bottom_element_index; ++_Ix) {
            _Has_zero_tail = _Integer_value._Mydata[_Ix] == 0;
        }

        return _Assemble_floating_point_value(_Mantissa, _Exponent, _Is_negative, _Has_zero_tail, _Result);
    }

         const uint32_t _Top_element_mask  = (1u << _Top_element_bits) - 1;
    const uint32_t _Top_element_shift = 64 - _Top_element_bits;  
    const uint32_t _Middle_element_shift = _Top_element_shift - 32;  
    const uint32_t _Bottom_element_bits  = 32 - _Top_element_bits;
    const uint32_t _Bottom_element_mask  = ~_Top_element_mask;
    const uint32_t _Bottom_element_shift = 32 - _Bottom_element_bits;  
    const int32_t _Exponent = static_cast<int32_t>(_Base_exponent + _Bottom_element_index * 32 + _Top_element_bits);

    const uint64_t _Mantissa =
        (static_cast<uint64_t>(_Integer_value._Mydata[_Top_element_index] & _Top_element_mask) << _Top_element_shift)
        + (static_cast<uint64_t>(_Integer_value._Mydata[_Middle_element_index]) << _Middle_element_shift)
        + (static_cast<uint64_t>(_Integer_value._Mydata[_Bottom_element_index] & _Bottom_element_mask)
            >> _Bottom_element_shift);

    bool _Has_zero_tail =
        !_Has_nonzero_fractional_part && (_Integer_value._Mydata[_Bottom_element_index] & _Top_element_mask) == 0;

    for (uint32_t _Ix = 0; _Has_zero_tail && _Ix != _Bottom_element_index; ++_Ix) {
        _Has_zero_tail = _Integer_value._Mydata[_Ix] == 0;
    }

    return _Assemble_floating_point_value(_Mantissa, _Exponent, _Is_negative, _Has_zero_tail, _Result);
}

  inline void _Accumulate_decimal_digits_into_big_integer_flt(
    const uint8_t* const _First_digit, const uint8_t* const _Last_digit, _Big_integer_flt& _Result) noexcept {
              uint32_t _Accumulator       = 0;
    uint32_t _Accumulator_count = 0;
    for (const uint8_t* _It = _First_digit; _It != _Last_digit; ++_It) {
        if (_Accumulator_count == 9) {
            [[maybe_unused]] const bool _Success1 = _Multiply(_Result, 1'000'000'000);              ;
            [[maybe_unused]] const bool _Success2 = _Add(_Result, _Accumulator);              ;

            _Accumulator       = 0;
            _Accumulator_count = 0;
        }

        _Accumulator *= 10;
        _Accumulator += *_It;
        ++_Accumulator_count;
    }

    if (_Accumulator_count != 0) {
        [[maybe_unused]] const bool _Success3 =
            _Multiply_by_power_of_ten(_Result, _Accumulator_count);          ;
        [[maybe_unused]] const bool _Success4 = _Add(_Result, _Accumulator);          ;
    }
}

   template <class _FloatingType>
 errc _Convert_decimal_string_to_floating_type(
    const _Floating_point_string& _Data, _FloatingType& _Result, bool _Has_zero_tail) noexcept {
    using _Traits = _Floating_type_traits<_FloatingType>;

                   const uint32_t _Required_bits_of_precision = static_cast<uint32_t>(_Traits::_Mantissa_bits + 1);

                             const uint32_t _Positive_exponent      = static_cast<uint32_t>((::std:: max)(0, _Data._Myexponent));
    const uint32_t _Integer_digits_present = (::std:: min)(_Positive_exponent, _Data._Mymantissa_count);
    const uint32_t _Integer_digits_missing = _Positive_exponent - _Integer_digits_present;
    const uint8_t* const _Integer_first    = _Data._Mymantissa;
    const uint8_t* const _Integer_last     = _Data._Mymantissa + _Integer_digits_present;

    const uint8_t* const _Fractional_first    = _Integer_last;
    const uint8_t* const _Fractional_last     = _Data._Mymantissa + _Data._Mymantissa_count;
    const uint32_t _Fractional_digits_present = static_cast<uint32_t>(_Fractional_last - _Fractional_first);

         _Big_integer_flt _Integer_value{};
    _Accumulate_decimal_digits_into_big_integer_flt(_Integer_first, _Integer_last, _Integer_value);

    if (_Integer_digits_missing > 0) {
        if (!_Multiply_by_power_of_ten(_Integer_value, _Integer_digits_missing)) {
            _Assemble_floating_point_infinity(_Data._Myis_negative, _Result);
            return errc::result_out_of_range;          }
    }

                   const uint32_t _Integer_bits_of_precision = _Bit_scan_reverse(_Integer_value);
    {
        const bool _Has_zero_fractional_part = _Fractional_digits_present == 0 && _Has_zero_tail;

        if (_Integer_bits_of_precision >= _Required_bits_of_precision || _Has_zero_fractional_part) {
            return _Assemble_floating_point_value_from_big_integer_flt(
                _Integer_value, _Integer_bits_of_precision, _Data._Myis_negative, !_Has_zero_fractional_part, _Result);
        }
    }

                             _Big_integer_flt _Fractional_numerator{};
    _Accumulate_decimal_digits_into_big_integer_flt(_Fractional_first, _Fractional_last, _Fractional_numerator);

    const uint32_t _Fractional_denominator_exponent =
        _Data._Myexponent < 0 ? _Fractional_digits_present + static_cast<uint32_t>(-_Data._Myexponent)
                              : _Fractional_digits_present;

    _Big_integer_flt _Fractional_denominator = _Make_big_integer_flt_one();
    if (!_Multiply_by_power_of_ten(_Fractional_denominator, _Fractional_denominator_exponent)) {
                          _Assemble_floating_point_zero(_Data._Myis_negative, _Result);
        return errc::result_out_of_range;      }

                        const uint32_t _Fractional_numerator_bits   = _Bit_scan_reverse(_Fractional_numerator);
    const uint32_t _Fractional_denominator_bits = _Bit_scan_reverse(_Fractional_denominator);

    const uint32_t _Fractional_shift = _Fractional_denominator_bits > _Fractional_numerator_bits
                                         ? _Fractional_denominator_bits - _Fractional_numerator_bits
                                         : 0;

    if (_Fractional_shift > 0) {
        [[maybe_unused]] const bool _Shift_success1 =
            _Shift_left(_Fractional_numerator, _Fractional_shift);          ;
    }

    const uint32_t _Required_fractional_bits_of_precision = _Required_bits_of_precision - _Integer_bits_of_precision;

    uint32_t _Remaining_bits_of_precision_required = _Required_fractional_bits_of_precision;
    if (_Integer_bits_of_precision > 0) {
                                    
                                            if (_Fractional_shift > _Remaining_bits_of_precision_required) {
            return _Assemble_floating_point_value_from_big_integer_flt(_Integer_value, _Integer_bits_of_precision,
                _Data._Myis_negative, _Fractional_digits_present != 0 || !_Has_zero_tail, _Result);
        }

        _Remaining_bits_of_precision_required -= _Fractional_shift;
    }

                   const uint32_t _Fractional_exponent =
        _Fractional_numerator < _Fractional_denominator ? _Fractional_shift + 1 : _Fractional_shift;

    [[maybe_unused]] const bool _Shift_success2 =
        _Shift_left(_Fractional_numerator, _Remaining_bits_of_precision_required);      ;

    uint64_t _Fractional_mantissa = _Divide(_Fractional_numerator, _Fractional_denominator);

    _Has_zero_tail = _Has_zero_tail && _Fractional_numerator._Myused == 0;

         const uint32_t _Fractional_mantissa_bits = _Bit_scan_reverse(_Fractional_mantissa);
    if (_Fractional_mantissa_bits > _Required_fractional_bits_of_precision) {
        const uint32_t _Shift = _Fractional_mantissa_bits - _Required_fractional_bits_of_precision;
        _Has_zero_tail        = _Has_zero_tail && (_Fractional_mantissa & ((1ULL << _Shift) - 1)) == 0;
        _Fractional_mantissa >>= _Shift;
    }

         const uint32_t _Integer_mantissa_low  = _Integer_value._Myused > 0 ? _Integer_value._Mydata[0] : 0;
    const uint32_t _Integer_mantissa_high = _Integer_value._Myused > 1 ? _Integer_value._Mydata[1] : 0;
    const uint64_t _Integer_mantissa = _Integer_mantissa_low + (static_cast<uint64_t>(_Integer_mantissa_high) << 32);

    const uint64_t _Complete_mantissa =
        (_Integer_mantissa << _Required_fractional_bits_of_precision) + _Fractional_mantissa;

                                       const int32_t _Final_exponent = _Integer_bits_of_precision > 0
                                      ? static_cast<int32_t>(_Integer_bits_of_precision - 2)
                                      : -static_cast<int32_t>(_Fractional_exponent) - 1;

    return _Assemble_floating_point_value(
        _Complete_mantissa, _Final_exponent, _Data._Myis_negative, _Has_zero_tail, _Result);
}

template <class _FloatingType>
 errc _Convert_hexadecimal_string_to_floating_type(
    const _Floating_point_string& _Data, _FloatingType& _Result, bool _Has_zero_tail) noexcept {
    using _Traits = _Floating_type_traits<_FloatingType>;

    uint64_t _Mantissa = 0;
    int32_t _Exponent  = _Data._Myexponent + _Traits::_Mantissa_bits - 1;

         const uint8_t* const _Mantissa_last = _Data._Mymantissa + _Data._Mymantissa_count;
    const uint8_t* _Mantissa_it         = _Data._Mymantissa;
    while (_Mantissa_it != _Mantissa_last && _Mantissa <= _Traits::_Normal_mantissa_mask) {
        _Mantissa *= 16;
        _Mantissa += *_Mantissa_it++;
        _Exponent -= 4;      }

    while (_Has_zero_tail && _Mantissa_it != _Mantissa_last) {
        _Has_zero_tail = *_Mantissa_it++ == 0;
    }

    return _Assemble_floating_point_value(_Mantissa, _Exponent, _Data._Myis_negative, _Has_zero_tail, _Result);
}

 

 
   
   
   
   
   
  
   
   
   
   
   
   
template <class _Floating>
 from_chars_result _Ordinary_floating_from_chars(const char* const _First, const char* const _Last,
    _Floating& _Value, const chars_format _Fmt, const bool _Minus_sign, const char* _Next) noexcept {
     
    const bool _Is_hexadecimal = _Fmt == chars_format::hex;
    const int _Base{_Is_hexadecimal ? 16 : 10};

              _Floating_point_string _Fp_string;

         _Fp_string._Myis_negative = _Minus_sign;

    uint8_t* const _Mantissa_first = _Fp_string._Mymantissa;
    uint8_t* const _Mantissa_last  = ::std:: end(_Fp_string._Mymantissa);
    uint8_t* _Mantissa_it          = _Mantissa_first;

         const char* const _Whole_begin = _Next;

         for (; _Next != _Last && *_Next == '0'; ++_Next) {
    }
    const char* const _Leading_zero_end = _Next;

         for (; _Next != _Last; ++_Next) {
        const unsigned char _Digit_value = _Digit_from_char(*_Next);

        if (_Digit_value >= _Base) {
            break;
        }

        if (_Mantissa_it != _Mantissa_last) {
            *_Mantissa_it++ = _Digit_value;
        }
    }
    const char* const _Whole_end = _Next;

         constexpr ptrdiff_t _Maximum_adjustment = 1'000'000;
    constexpr ptrdiff_t _Minimum_adjustment = -1'000'000;

                             int _Exponent_adjustment = static_cast<int>((::std:: min)(_Whole_end - _Leading_zero_end, _Maximum_adjustment));

         if (_Next != _Last && *_Next == '.') {
        ++_Next;
    }
    const char* const _Dot_end = _Next;

     
              if (_Exponent_adjustment == 0) {
        for (; _Next != _Last && *_Next == '0'; ++_Next) {
        }

        _Exponent_adjustment = static_cast<int>((::std:: max)(_Dot_end - _Next, _Minimum_adjustment));
    }

         bool _Has_zero_tail = true;

    for (; _Next != _Last; ++_Next) {
        const unsigned char _Digit_value = _Digit_from_char(*_Next);

        if (_Digit_value >= _Base) {
            break;
        }

        if (_Mantissa_it != _Mantissa_last) {
            *_Mantissa_it++ = _Digit_value;
        } else {
            _Has_zero_tail = _Has_zero_tail && _Digit_value == 0;
        }
    }
    const char* const _Frac_end = _Next;

         if (_Whole_begin == _Whole_end && _Dot_end == _Frac_end) {
        return {_First, errc::invalid_argument};
    }

    const char _Exponent_prefix{_Is_hexadecimal ? 'p' : 'e'};

    bool _Exponent_is_negative = false;
    int _Exponent              = 0;

    constexpr int _Maximum_temporary_decimal_exponent = 5200;
    constexpr int _Minimum_temporary_decimal_exponent = -5200;

    if (_Fmt != chars_format::fixed                                                                                    && _Next != _Last && (static_cast<unsigned char>(*_Next) | 0x20) == _Exponent_prefix) {          const char* _Unread = _Next + 1;

        if (_Unread != _Last && (*_Unread == '+' || *_Unread == '-')) {              _Exponent_is_negative = *_Unread == '-';
            ++_Unread;
        }

        while (_Unread != _Last) {
            const unsigned char _Digit_value = _Digit_from_char(*_Unread);

            if (_Digit_value >= 10) {
                break;
            }

             
            if (_Exponent <= _Maximum_temporary_decimal_exponent) {
                _Exponent = _Exponent * 10 + _Digit_value;
            }

            ++_Unread;
            _Next = _Unread;          }

        if (_Exponent_is_negative) {
            _Exponent = -_Exponent;
        }
    }

         const char* const _Exponent_end = _Next;

    if (_Fmt == chars_format::scientific
        && _Frac_end == _Exponent_end) {                                                                                              return {_First, errc::invalid_argument};
    }

         while (_Mantissa_it != _Mantissa_first && *(_Mantissa_it - 1) == 0) {
        --_Mantissa_it;
    }

                        if (_Mantissa_it == _Mantissa_first) {
        ;
        _Assemble_floating_point_zero(_Fp_string._Myis_negative, _Value);
        return {_Next, errc{}};
    }

              if (_Exponent > _Maximum_temporary_decimal_exponent) {
        _Assemble_floating_point_infinity(_Fp_string._Myis_negative, _Value);
        return {_Next, errc::result_out_of_range};      }

    if (_Exponent < _Minimum_temporary_decimal_exponent) {
        _Assemble_floating_point_zero(_Fp_string._Myis_negative, _Value);
        return {_Next, errc::result_out_of_range};      }

                   const int _Exponent_adjustment_multiplier{_Is_hexadecimal ? 4 : 1};

    _Exponent += _Exponent_adjustment * _Exponent_adjustment_multiplier;

              if (_Exponent > _Maximum_temporary_decimal_exponent) {
        _Assemble_floating_point_infinity(_Fp_string._Myis_negative, _Value);
        return {_Next, errc::result_out_of_range};      }

    if (_Exponent < _Minimum_temporary_decimal_exponent) {
        _Assemble_floating_point_zero(_Fp_string._Myis_negative, _Value);
        return {_Next, errc::result_out_of_range};      }

    _Fp_string._Myexponent       = _Exponent;
    _Fp_string._Mymantissa_count = static_cast<uint32_t>(_Mantissa_it - _Mantissa_first);

    if (_Is_hexadecimal) {
        const errc _Ec = _Convert_hexadecimal_string_to_floating_type(_Fp_string, _Value, _Has_zero_tail);
        return {_Next, _Ec};
    } else {
        const errc _Ec = _Convert_decimal_string_to_floating_type(_Fp_string, _Value, _Has_zero_tail);
        return {_Next, _Ec};
    }

     }

 inline bool _Starts_with_case_insensitive(
    const char* _First, const char* const _Last, const char* _Lowercase) noexcept {
         for (; _First != _Last && *_Lowercase != '\0'; ++_First, ++_Lowercase) {
        if ((static_cast<unsigned char>(*_First) | 0x20) != *_Lowercase) {
            return false;
        }
    }

    return *_Lowercase == '\0';
}

template <class _Floating>
 from_chars_result _Infinity_from_chars(const char* const _First, const char* const _Last, _Floating& _Value,
    const bool _Minus_sign, const char* _Next) noexcept {
         if (!_Starts_with_case_insensitive(_Next + 1, _Last, "nf")) {          return {_First, errc::invalid_argument};
    }

         _Next += 3;

    if (_Starts_with_case_insensitive(_Next, _Last, "inity")) {          _Next += 5;
    }

    _Assemble_floating_point_infinity(_Minus_sign, _Value);

    return {_Next, errc{}};
}

template <class _Floating>
 from_chars_result _Nan_from_chars(const char* const _First, const char* const _Last, _Floating& _Value,
    bool _Minus_sign, const char* _Next) noexcept {
         if (!_Starts_with_case_insensitive(_Next + 1, _Last, "an")) {          return {_First, errc::invalid_argument};
    }

         _Next += 3;

    bool _Quiet = true;

    if (_Next != _Last && *_Next == '(') {          const char* const _Seq_begin = _Next + 1;

        for (const char* _Temp = _Seq_begin; _Temp != _Last; ++_Temp) {
            if (*_Temp == ')') {                  _Next = _Temp + 1;

                if (_Temp - _Seq_begin == 3
                    && _Starts_with_case_insensitive(_Seq_begin, _Temp, "ind")) {                                                                _Minus_sign = true;
                } else if (_Temp - _Seq_begin == 4
                           && _Starts_with_case_insensitive(_Seq_begin, _Temp, "snan")) {                      _Quiet = false;
                }

                break;
            } else if (*_Temp == '_' || ('0' <= *_Temp && *_Temp <= '9') || ('A' <= *_Temp && *_Temp <= 'Z')
                       || ('a' <= *_Temp && *_Temp <= 'z')) {              } else {                  break;
            }
        }
    }

                    
    using _Traits    = _Floating_type_traits<_Floating>;
    using _Uint_type = typename _Traits::_Uint_type;

    _Uint_type _Uint_value = _Traits::_Shifted_exponent_mask;

    if (_Minus_sign) {
        _Uint_value |= _Traits::_Shifted_sign_mask;
    }

    if (_Quiet) {
        _Uint_value |= _Traits::_Special_nan_mantissa_mask;
    } else {
        _Uint_value |= 1;
    }

    _Value = _Bit_cast<_Floating>(_Uint_value);

    return {_Next, errc{}};
}

template <class _Floating>
 from_chars_result _Floating_from_chars(
    const char* const _First, const char* const _Last, _Floating& _Value, const chars_format _Fmt) noexcept {
    _Adl_verify_range(_First, _Last);

    ;

    bool _Minus_sign = false;

    const char* _Next = _First;

    if (_Next == _Last) {
        return {_First, errc::invalid_argument};
    }

    if (*_Next == '-') {
        _Minus_sign = true;
        ++_Next;

        if (_Next == _Last) {
            return {_First, errc::invalid_argument};
        }
    }

                                                 const unsigned char _Folded_start = static_cast<unsigned char>(static_cast<unsigned char>(*_Next) | 0x20);

    if (_Folded_start <= 'f') {          return _Ordinary_floating_from_chars(_First, _Last, _Value, _Fmt, _Minus_sign, _Next);
    } else if (_Folded_start == 'i') {          return _Infinity_from_chars(_First, _Last, _Value, _Minus_sign, _Next);
    } else if (_Folded_start == 'n') {          return _Nan_from_chars(_First, _Last, _Value, _Minus_sign, _Next);
    } else {          return {_First, errc::invalid_argument};
    }
}

inline from_chars_result from_chars(const char* const _First, const char* const _Last, float& _Value,
    const chars_format _Fmt = chars_format::general) noexcept   {
    return _Floating_from_chars(_First, _Last, _Value, _Fmt);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, double& _Value,
    const chars_format _Fmt = chars_format::general) noexcept   {
    return _Floating_from_chars(_First, _Last, _Value, _Fmt);
}
inline from_chars_result from_chars(const char* const _First, const char* const _Last, long double& _Value,
    const chars_format _Fmt = chars_format::general) noexcept   {
    double _Dbl;      const from_chars_result _Result = _Floating_from_chars(_First, _Last, _Dbl, _Fmt);

    if (_Result.ec == errc{}) {
        _Value = _Dbl;
    }

    return _Result;
}

 template <class _Floating>
 to_chars_result _Floating_to_chars_hex_precision(
    char* _First, char* const _Last, const _Floating _Value, int _Precision) noexcept {

          
                   constexpr int _Full_precision         = is_same_v<_Floating, float> ? 6 : 13;
    constexpr int _Adjusted_explicit_bits = _Full_precision * 4;

    if (_Precision < 0) {
                                   _Precision = _Full_precision;
    }

         using _Traits    = _Floating_type_traits<_Floating>;
    using _Uint_type = typename _Traits::_Uint_type;

    const _Uint_type _Uint_value    = _Bit_cast<_Uint_type>(_Value);
    const _Uint_type _Ieee_mantissa = _Uint_value & _Traits::_Denormal_mantissa_mask;
    const int32_t _Ieee_exponent    = static_cast<int32_t>(_Uint_value >> _Traits::_Exponent_shift);

                   _Uint_type _Adjusted_mantissa;

    if constexpr (is_same_v<_Floating, float>) {
        _Adjusted_mantissa = _Ieee_mantissa << 1;      } else {
        _Adjusted_mantissa = _Ieee_mantissa;      }

    int32_t _Unbiased_exponent;

    if (_Ieee_exponent == 0) {           
        if (_Ieee_mantissa == 0) {                           _Unbiased_exponent = 0;
        } else {              _Unbiased_exponent = 1 - _Traits::_Exponent_bias;
        }
    } else {          _Adjusted_mantissa |= _Uint_type{1} << _Adjusted_explicit_bits;          _Unbiased_exponent = _Ieee_exponent - _Traits::_Exponent_bias;
    }

     
         char _Sign_character;
    uint32_t _Absolute_exponent;

    if (_Unbiased_exponent < 0) {
        _Sign_character    = '-';
        _Absolute_exponent = static_cast<uint32_t>(-_Unbiased_exponent);
    } else {
        _Sign_character    = '+';
        _Absolute_exponent = static_cast<uint32_t>(_Unbiased_exponent);
    }

     
         {
        int32_t _Exponent_length;

        if (_Absolute_exponent < 10) {
            _Exponent_length = 1;
        } else if (_Absolute_exponent < 100) {
            _Exponent_length = 2;
        } else if constexpr (is_same_v<_Floating, float>) {
            _Exponent_length = 3;
        } else if (_Absolute_exponent < 1000) {
            _Exponent_length = 3;
        } else {
            _Exponent_length = 4;
        }

                 ptrdiff_t _Buffer_size = _Last - _First;

        if (_Buffer_size < _Precision) {
            return {_Last, errc::value_too_large};
        }

        _Buffer_size -= _Precision;

        const int32_t _Length_excluding_precision = 1                                                    + static_cast<int32_t>(_Precision > 0)                                                                                                       + 2                                                    + _Exponent_length;  
        if (_Buffer_size < _Length_excluding_precision) {
            return {_Last, errc::value_too_large};
        }
    }

         if (_Precision < _Full_precision) {
         
                 const int _Dropped_bits = (_Full_precision - _Precision) * 4;

         
                           
                           
                                                      
                                    
                          const _Uint_type _Lsb_bit = _Adjusted_mantissa;

                          const _Uint_type _Round_bit = _Adjusted_mantissa << 1;

                                             
                          const _Uint_type _Has_tail_bits = _Round_bit - 1;

                          const _Uint_type _Should_round = _Round_bit & (_Has_tail_bits | _Lsb_bit) & (_Uint_type{1} << _Dropped_bits);

                 _Adjusted_mantissa += _Should_round;
    }

         {
        const uint32_t _Nibble = static_cast<uint32_t>(_Adjusted_mantissa >> _Adjusted_explicit_bits);
        ;
        const char _Leading_hexit = static_cast<char>('0' + _Nibble);

        *_First++ = _Leading_hexit;

        constexpr _Uint_type _Mask = (_Uint_type{1} << _Adjusted_explicit_bits) - 1;
        _Adjusted_mantissa &= _Mask;
    }

     
              if (_Precision > 0) {
        *_First++ = '.';

        int32_t _Number_of_bits_remaining = _Adjusted_explicit_bits;  
        for (;;) {
            ;
            ;
            _Number_of_bits_remaining -= 4;

            const uint32_t _Nibble = static_cast<uint32_t>(_Adjusted_mantissa >> _Number_of_bits_remaining);
            ;
            const char _Hexit = _Charconv_digits[_Nibble];

            *_First++ = _Hexit;

                         --_Precision;
            if (_Precision == 0) {
                break;              }
             
            if (_Number_of_bits_remaining == 0) {
                                 :: memset(_First, '0', static_cast<size_t>(_Precision));
                _First += _Precision;
                break;
            }

                                      const _Uint_type _Mask = (_Uint_type{1} << _Number_of_bits_remaining) - 1;
            _Adjusted_mantissa &= _Mask;
        }
    }

     
          
     
    *_First++ = 'p';
    *_First++ = _Sign_character;

         return ::std:: to_chars(_First, _Last, _Absolute_exponent);
}

template <class _Floating>
 to_chars_result _Floating_to_chars_hex_shortest(
    char* _First, char* const _Last, const _Floating _Value) noexcept {

                         
    using _Traits    = _Floating_type_traits<_Floating>;
    using _Uint_type = typename _Traits::_Uint_type;

    const _Uint_type _Uint_value = _Bit_cast<_Uint_type>(_Value);

    if (_Uint_value == 0) {                            const char* const _Str = "0p+0";
        const size_t _Len      = 4;

        if (_Last - _First < static_cast<ptrdiff_t>(_Len)) {
            return {_Last, errc::value_too_large};
        }

        :: memcpy(_First, _Str, _Len);

        return {_First + _Len, errc{}};
    }

    const _Uint_type _Ieee_mantissa = _Uint_value & _Traits::_Denormal_mantissa_mask;
    const int32_t _Ieee_exponent    = static_cast<int32_t>(_Uint_value >> _Traits::_Exponent_shift);

    char _Leading_hexit;      int32_t _Unbiased_exponent;

    if (_Ieee_exponent == 0) {          _Leading_hexit     = '0';
        _Unbiased_exponent = 1 - _Traits::_Exponent_bias;
    } else {          _Leading_hexit     = '1';
        _Unbiased_exponent = _Ieee_exponent - _Traits::_Exponent_bias;
    }

     
    if (_First == _Last) {
        return {_Last, errc::value_too_large};
    }

    *_First++ = _Leading_hexit;

    if (_Ieee_mantissa == 0) {
             } else {
        if (_First == _Last) {
            return {_Last, errc::value_too_large};
        }

        *_First++ = '.';

                                   _Uint_type _Adjusted_mantissa;
        int32_t _Number_of_bits_remaining;

        if constexpr (is_same_v<_Floating, float>) {
            _Adjusted_mantissa        = _Ieee_mantissa << 1;              _Number_of_bits_remaining = 24;          } else {
            _Adjusted_mantissa        = _Ieee_mantissa;              _Number_of_bits_remaining = 52;          }

                                                     do {
            ;
            ;
            _Number_of_bits_remaining -= 4;

            const uint32_t _Nibble = static_cast<uint32_t>(_Adjusted_mantissa >> _Number_of_bits_remaining);
            ;
            const char _Hexit = _Charconv_digits[_Nibble];

            if (_First == _Last) {
                return {_Last, errc::value_too_large};
            }

            *_First++ = _Hexit;

            const _Uint_type _Mask = (_Uint_type{1} << _Number_of_bits_remaining) - 1;
            _Adjusted_mantissa &= _Mask;

        } while (_Adjusted_mantissa != 0);
    }

          
     
          
    if (_Last - _First < 2) {
        return {_Last, errc::value_too_large};
    }

    *_First++ = 'p';

    if (_Unbiased_exponent < 0) {
        *_First++          = '-';
        _Unbiased_exponent = -_Unbiased_exponent;
    } else {
        *_First++ = '+';
    }

         return ::std:: to_chars(_First, _Last, static_cast<uint32_t>(_Unbiased_exponent));
}

 
               
 
   
    
    
      
  
 
  
  
 
template <class _Floating>
struct _General_precision_tables;

template <>
struct _General_precision_tables<float> {
    static constexpr int _Max_special_P = 7;

    static constexpr uint32_t _Special_X_table[63] = {0x38C73ABCu, 0x3A79096Bu, 0x3C1BA5E3u, 0x3DC28F5Cu, 0x3F733333u,
        0x4117FFFFu, 0x38D0AAA7u, 0x3A826AA8u, 0x3C230553u, 0x3DCBC6A7u, 0x3F7EB851u, 0x411F3333u, 0x42C6FFFFu,
        0x38D19C3Fu, 0x3A8301A7u, 0x3C23C211u, 0x3DCCB295u, 0x3F7FDF3Bu, 0x411FEB85u, 0x42C7E666u, 0x4479DFFFu,
        0x38D1B468u, 0x3A8310C1u, 0x3C23D4F1u, 0x3DCCCA2Du, 0x3F7FFCB9u, 0x411FFDF3u, 0x42C7FD70u, 0x4479FCCCu,
        0x461C3DFFu, 0x38D1B6D2u, 0x3A831243u, 0x3C23D6D4u, 0x3DCCCC89u, 0x3F7FFFACu, 0x411FFFCBu, 0x42C7FFBEu,
        0x4479FFAEu, 0x461C3FCCu, 0x47C34FBFu, 0x38D1B710u, 0x3A83126Au, 0x3C23D704u, 0x3DCCCCC6u, 0x3F7FFFF7u,
        0x411FFFFAu, 0x42C7FFF9u, 0x4479FFF7u, 0x461C3FFAu, 0x47C34FF9u, 0x497423F7u, 0x38D1B716u, 0x3A83126Eu,
        0x3C23D709u, 0x3DCCCCCCu, 0x3F7FFFFFu, 0x411FFFFFu, 0x42C7FFFFu, 0x4479FFFFu, 0x461C3FFFu, 0x47C34FFFu,
        0x497423FFu, 0x4B18967Fu};

    static constexpr int _Max_P = 39;

    static constexpr uint32_t _Ordinary_X_table[44] = {0x38D1B717u, 0x3A83126Eu, 0x3C23D70Au, 0x3DCCCCCCu, 0x3F7FFFFFu,
        0x411FFFFFu, 0x42C7FFFFu, 0x4479FFFFu, 0x461C3FFFu, 0x47C34FFFu, 0x497423FFu, 0x4B18967Fu, 0x4CBEBC1Fu,
        0x4E6E6B27u, 0x501502F8u, 0x51BA43B7u, 0x5368D4A5u, 0x551184E7u, 0x56B5E620u, 0x58635FA9u, 0x5A0E1BC9u,
        0x5BB1A2BCu, 0x5D5E0B6Bu, 0x5F0AC723u, 0x60AD78EBu, 0x6258D726u, 0x64078678u, 0x65A96816u, 0x6753C21Bu,
        0x69045951u, 0x6AA56FA5u, 0x6C4ECB8Fu, 0x6E013F39u, 0x6FA18F07u, 0x7149F2C9u, 0x72FC6F7Cu, 0x749DC5ADu,
        0x76453719u, 0x77F684DFu, 0x799A130Bu, 0x7B4097CEu, 0x7CF0BDC2u, 0x7E967699u, 0x7F7FFFFFu};
};

template <>
struct _General_precision_tables<double> {
    static constexpr int _Max_special_P = 15;

    static constexpr uint64_t _Special_X_table[195] = {0x3F18E757928E0C9Du, 0x3F4F212D77318FC5u, 0x3F8374BC6A7EF9DBu,
        0x3FB851EB851EB851u, 0x3FEE666666666666u, 0x4022FFFFFFFFFFFFu, 0x3F1A1554FBDAD751u, 0x3F504D551D68C692u,
        0x3F8460AA64C2F837u, 0x3FB978D4FDF3B645u, 0x3FEFD70A3D70A3D7u, 0x4023E66666666666u, 0x4058DFFFFFFFFFFFu,
        0x3F1A3387ECC8EB96u, 0x3F506034F3FD933Eu, 0x3F84784230FCF80Du, 0x3FB99652BD3C3611u, 0x3FEFFBE76C8B4395u,
        0x4023FD70A3D70A3Du, 0x4058FCCCCCCCCCCCu, 0x408F3BFFFFFFFFFFu, 0x3F1A368D04E0BA6Au, 0x3F506218230C7482u,
        0x3F847A9E2BCF91A3u, 0x3FB99945B6C3760Bu, 0x3FEFFF972474538Eu, 0x4023FFBE76C8B439u, 0x4058FFAE147AE147u,
        0x408F3F9999999999u, 0x40C387BFFFFFFFFFu, 0x3F1A36DA54164F19u, 0x3F506248748DF16Fu, 0x3F847ADA91B16DCBu,
        0x3FB99991361DC93Eu, 0x3FEFFFF583A53B8Eu, 0x4023FFF972474538u, 0x4058FFF7CED91687u, 0x408F3FF5C28F5C28u,
        0x40C387F999999999u, 0x40F869F7FFFFFFFFu, 0x3F1A36E20F35445Du, 0x3F50624D49814ABAu, 0x3F847AE09BE19D69u,
        0x3FB99998C2DA04C3u, 0x3FEFFFFEF39085F4u, 0x4023FFFF583A53B8u, 0x4058FFFF2E48E8A7u, 0x408F3FFEF9DB22D0u,
        0x40C387FF5C28F5C2u, 0x40F869FF33333333u, 0x412E847EFFFFFFFFu, 0x3F1A36E2D51EC34Bu, 0x3F50624DC5333A0Eu,
        0x3F847AE136800892u, 0x3FB9999984200AB7u, 0x3FEFFFFFE5280D65u, 0x4023FFFFEF39085Fu, 0x4058FFFFEB074A77u,
        0x408F3FFFE5C91D14u, 0x40C387FFEF9DB22Du, 0x40F869FFEB851EB8u, 0x412E847FE6666666u, 0x416312CFEFFFFFFFu,
        0x3F1A36E2E8E94FFCu, 0x3F50624DD191D1FDu, 0x3F847AE145F6467Du, 0x3FB999999773D81Cu, 0x3FEFFFFFFD50CE23u,
        0x4023FFFFFE5280D6u, 0x4058FFFFFDE7210Bu, 0x408F3FFFFD60E94Eu, 0x40C387FFFE5C91D1u, 0x40F869FFFDF3B645u,
        0x412E847FFD70A3D7u, 0x416312CFFE666666u, 0x4197D783FDFFFFFFu, 0x3F1A36E2EAE3F7A7u, 0x3F50624DD2CE7AC8u,
        0x3F847AE14782197Bu, 0x3FB9999999629FD9u, 0x3FEFFFFFFFBB47D0u, 0x4023FFFFFFD50CE2u, 0x4058FFFFFFCA501Au,
        0x408F3FFFFFBCE421u, 0x40C387FFFFD60E94u, 0x40F869FFFFCB923Au, 0x412E847FFFBE76C8u, 0x416312CFFFD70A3Du,
        0x4197D783FFCCCCCCu, 0x41CDCD64FFBFFFFFu, 0x3F1A36E2EB16A205u, 0x3F50624DD2EE2543u, 0x3F847AE147A9AE94u,
        0x3FB9999999941A39u, 0x3FEFFFFFFFF920C8u, 0x4023FFFFFFFBB47Du, 0x4058FFFFFFFAA19Cu, 0x408F3FFFFFF94A03u,
        0x40C387FFFFFBCE42u, 0x40F869FFFFFAC1D2u, 0x412E847FFFF97247u, 0x416312CFFFFBE76Cu, 0x4197D783FFFAE147u,
        0x41CDCD64FFF99999u, 0x4202A05F1FFBFFFFu, 0x3F1A36E2EB1BB30Fu, 0x3F50624DD2F14FE9u, 0x3F847AE147ADA3E3u,
        0x3FB9999999990CDCu, 0x3FEFFFFFFFFF5014u, 0x4023FFFFFFFF920Cu, 0x4058FFFFFFFF768Fu, 0x408F3FFFFFFF5433u,
        0x40C387FFFFFF94A0u, 0x40F869FFFFFF79C8u, 0x412E847FFFFF583Au, 0x416312CFFFFF9724u, 0x4197D783FFFF7CEDu,
        0x41CDCD64FFFF5C28u, 0x4202A05F1FFF9999u, 0x42374876E7FF7FFFu, 0x3F1A36E2EB1C34C3u, 0x3F50624DD2F1A0FAu,
        0x3F847AE147AE0938u, 0x3FB9999999998B86u, 0x3FEFFFFFFFFFEE68u, 0x4023FFFFFFFFF501u, 0x4058FFFFFFFFF241u,
        0x408F3FFFFFFFEED1u, 0x40C387FFFFFFF543u, 0x40F869FFFFFFF294u, 0x412E847FFFFFEF39u, 0x416312CFFFFFF583u,
        0x4197D783FFFFF2E4u, 0x41CDCD64FFFFEF9Du, 0x4202A05F1FFFF5C2u, 0x42374876E7FFF333u, 0x426D1A94A1FFEFFFu,
        0x3F1A36E2EB1C41BBu, 0x3F50624DD2F1A915u, 0x3F847AE147AE135Au, 0x3FB9999999999831u, 0x3FEFFFFFFFFFFE3Du,
        0x4023FFFFFFFFFEE6u, 0x4058FFFFFFFFFEA0u, 0x408F3FFFFFFFFE48u, 0x40C387FFFFFFFEEDu, 0x40F869FFFFFFFEA8u,
        0x412E847FFFFFFE52u, 0x416312CFFFFFFEF3u, 0x4197D783FFFFFEB0u, 0x41CDCD64FFFFFE5Cu, 0x4202A05F1FFFFEF9u,
        0x42374876E7FFFEB8u, 0x426D1A94A1FFFE66u, 0x42A2309CE53FFEFFu, 0x3F1A36E2EB1C4307u, 0x3F50624DD2F1A9E4u,
        0x3F847AE147AE145Eu, 0x3FB9999999999975u, 0x3FEFFFFFFFFFFFD2u, 0x4023FFFFFFFFFFE3u, 0x4058FFFFFFFFFFDCu,
        0x408F3FFFFFFFFFD4u, 0x40C387FFFFFFFFE4u, 0x40F869FFFFFFFFDDu, 0x412E847FFFFFFFD5u, 0x416312CFFFFFFFE5u,
        0x4197D783FFFFFFDEu, 0x41CDCD64FFFFFFD6u, 0x4202A05F1FFFFFE5u, 0x42374876E7FFFFDFu, 0x426D1A94A1FFFFD7u,
        0x42A2309CE53FFFE6u, 0x42D6BCC41E8FFFDFu, 0x3F1A36E2EB1C4328u, 0x3F50624DD2F1A9F9u, 0x3F847AE147AE1477u,
        0x3FB9999999999995u, 0x3FEFFFFFFFFFFFFBu, 0x4023FFFFFFFFFFFDu, 0x4058FFFFFFFFFFFCu, 0x408F3FFFFFFFFFFBu,
        0x40C387FFFFFFFFFDu, 0x40F869FFFFFFFFFCu, 0x412E847FFFFFFFFBu, 0x416312CFFFFFFFFDu, 0x4197D783FFFFFFFCu,
        0x41CDCD64FFFFFFFBu, 0x4202A05F1FFFFFFDu, 0x42374876E7FFFFFCu, 0x426D1A94A1FFFFFBu, 0x42A2309CE53FFFFDu,
        0x42D6BCC41E8FFFFCu, 0x430C6BF52633FFFBu};

    static constexpr int _Max_P = 309;

    static constexpr uint64_t _Ordinary_X_table[314] = {0x3F1A36E2EB1C432Cu, 0x3F50624DD2F1A9FBu, 0x3F847AE147AE147Au,
        0x3FB9999999999999u, 0x3FEFFFFFFFFFFFFFu, 0x4023FFFFFFFFFFFFu, 0x4058FFFFFFFFFFFFu, 0x408F3FFFFFFFFFFFu,
        0x40C387FFFFFFFFFFu, 0x40F869FFFFFFFFFFu, 0x412E847FFFFFFFFFu, 0x416312CFFFFFFFFFu, 0x4197D783FFFFFFFFu,
        0x41CDCD64FFFFFFFFu, 0x4202A05F1FFFFFFFu, 0x42374876E7FFFFFFu, 0x426D1A94A1FFFFFFu, 0x42A2309CE53FFFFFu,
        0x42D6BCC41E8FFFFFu, 0x430C6BF52633FFFFu, 0x4341C37937E07FFFu, 0x4376345785D89FFFu, 0x43ABC16D674EC7FFu,
        0x43E158E460913CFFu, 0x4415AF1D78B58C3Fu, 0x444B1AE4D6E2EF4Fu, 0x4480F0CF064DD591u, 0x44B52D02C7E14AF6u,
        0x44EA784379D99DB4u, 0x45208B2A2C280290u, 0x4554ADF4B7320334u, 0x4589D971E4FE8401u, 0x45C027E72F1F1281u,
        0x45F431E0FAE6D721u, 0x46293E5939A08CE9u, 0x465F8DEF8808B024u, 0x4693B8B5B5056E16u, 0x46C8A6E32246C99Cu,
        0x46FED09BEAD87C03u, 0x4733426172C74D82u, 0x476812F9CF7920E2u, 0x479E17B84357691Bu, 0x47D2CED32A16A1B1u,
        0x48078287F49C4A1Du, 0x483D6329F1C35CA4u, 0x48725DFA371A19E6u, 0x48A6F578C4E0A060u, 0x48DCB2D6F618C878u,
        0x4911EFC659CF7D4Bu, 0x49466BB7F0435C9Eu, 0x497C06A5EC5433C6u, 0x49B18427B3B4A05Bu, 0x49E5E531A0A1C872u,
        0x4A1B5E7E08CA3A8Fu, 0x4A511B0EC57E6499u, 0x4A8561D276DDFDC0u, 0x4ABABA4714957D30u, 0x4AF0B46C6CDD6E3Eu,
        0x4B24E1878814C9CDu, 0x4B5A19E96A19FC40u, 0x4B905031E2503DA8u, 0x4BC4643E5AE44D12u, 0x4BF97D4DF19D6057u,
        0x4C2FDCA16E04B86Du, 0x4C63E9E4E4C2F344u, 0x4C98E45E1DF3B015u, 0x4CCF1D75A5709C1Au, 0x4D03726987666190u,
        0x4D384F03E93FF9F4u, 0x4D6E62C4E38FF872u, 0x4DA2FDBB0E39FB47u, 0x4DD7BD29D1C87A19u, 0x4E0DAC74463A989Fu,
        0x4E428BC8ABE49F63u, 0x4E772EBAD6DDC73Cu, 0x4EACFA698C95390Bu, 0x4EE21C81F7DD43A7u, 0x4F16A3A275D49491u,
        0x4F4C4C8B1349B9B5u, 0x4F81AFD6EC0E1411u, 0x4FB61BCCA7119915u, 0x4FEBA2BFD0D5FF5Bu, 0x502145B7E285BF98u,
        0x50559725DB272F7Fu, 0x508AFCEF51F0FB5Eu, 0x50C0DE1593369D1Bu, 0x50F5159AF8044462u, 0x512A5B01B605557Au,
        0x516078E111C3556Cu, 0x5194971956342AC7u, 0x51C9BCDFABC13579u, 0x5200160BCB58C16Cu, 0x52341B8EBE2EF1C7u,
        0x526922726DBAAE39u, 0x529F6B0F092959C7u, 0x52D3A2E965B9D81Cu, 0x53088BA3BF284E23u, 0x533EAE8CAEF261ACu,
        0x53732D17ED577D0Bu, 0x53A7F85DE8AD5C4Eu, 0x53DDF67562D8B362u, 0x5412BA095DC7701Du, 0x5447688BB5394C25u,
        0x547D42AEA2879F2Eu, 0x54B249AD2594C37Cu, 0x54E6DC186EF9F45Cu, 0x551C931E8AB87173u, 0x5551DBF316B346E7u,
        0x558652EFDC6018A1u, 0x55BBE7ABD3781ECAu, 0x55F170CB642B133Eu, 0x5625CCFE3D35D80Eu, 0x565B403DCC834E11u,
        0x569108269FD210CBu, 0x56C54A3047C694FDu, 0x56FA9CBC59B83A3Du, 0x5730A1F5B8132466u, 0x5764CA732617ED7Fu,
        0x5799FD0FEF9DE8DFu, 0x57D03E29F5C2B18Bu, 0x58044DB473335DEEu, 0x583961219000356Au, 0x586FB969F40042C5u,
        0x58A3D3E2388029BBu, 0x58D8C8DAC6A0342Au, 0x590EFB1178484134u, 0x59435CEAEB2D28C0u, 0x59783425A5F872F1u,
        0x59AE412F0F768FADu, 0x59E2E8BD69AA19CCu, 0x5A17A2ECC414A03Fu, 0x5A4D8BA7F519C84Fu, 0x5A827748F9301D31u,
        0x5AB7151B377C247Eu, 0x5AECDA62055B2D9Du, 0x5B22087D4358FC82u, 0x5B568A9C942F3BA3u, 0x5B8C2D43B93B0A8Bu,
        0x5BC19C4A53C4E697u, 0x5BF6035CE8B6203Du, 0x5C2B843422E3A84Cu, 0x5C6132A095CE492Fu, 0x5C957F48BB41DB7Bu,
        0x5CCADF1AEA12525Au, 0x5D00CB70D24B7378u, 0x5D34FE4D06DE5056u, 0x5D6A3DE04895E46Cu, 0x5DA066AC2D5DAEC3u,
        0x5DD4805738B51A74u, 0x5E09A06D06E26112u, 0x5E400444244D7CABu, 0x5E7405552D60DBD6u, 0x5EA906AA78B912CBu,
        0x5EDF485516E7577Eu, 0x5F138D352E5096AFu, 0x5F48708279E4BC5Au, 0x5F7E8CA3185DEB71u, 0x5FB317E5EF3AB327u,
        0x5FE7DDDF6B095FF0u, 0x601DD55745CBB7ECu, 0x6052A5568B9F52F4u, 0x60874EAC2E8727B1u, 0x60BD22573A28F19Du,
        0x60F2357684599702u, 0x6126C2D4256FFCC2u, 0x615C73892ECBFBF3u, 0x6191C835BD3F7D78u, 0x61C63A432C8F5CD6u,
        0x61FBC8D3F7B3340Bu, 0x62315D847AD00087u, 0x6265B4E5998400A9u, 0x629B221EFFE500D3u, 0x62D0F5535FEF2084u,
        0x630532A837EAE8A5u, 0x633A7F5245E5A2CEu, 0x63708F936BAF85C1u, 0x63A4B378469B6731u, 0x63D9E056584240FDu,
        0x64102C35F729689Eu, 0x6444374374F3C2C6u, 0x647945145230B377u, 0x64AF965966BCE055u, 0x64E3BDF7E0360C35u,
        0x6518AD75D8438F43u, 0x654ED8D34E547313u, 0x6583478410F4C7ECu, 0x65B819651531F9E7u, 0x65EE1FBE5A7E7861u,
        0x6622D3D6F88F0B3Cu, 0x665788CCB6B2CE0Cu, 0x668D6AFFE45F818Fu, 0x66C262DFEEBBB0F9u, 0x66F6FB97EA6A9D37u,
        0x672CBA7DE5054485u, 0x6761F48EAF234AD3u, 0x679671B25AEC1D88u, 0x67CC0E1EF1A724EAu, 0x680188D357087712u,
        0x6835EB082CCA94D7u, 0x686B65CA37FD3A0Du, 0x68A11F9E62FE4448u, 0x68D56785FBBDD55Au, 0x690AC1677AAD4AB0u,
        0x6940B8E0ACAC4EAEu, 0x6974E718D7D7625Au, 0x69AA20DF0DCD3AF0u, 0x69E0548B68A044D6u, 0x6A1469AE42C8560Cu,
        0x6A498419D37A6B8Fu, 0x6A7FE52048590672u, 0x6AB3EF342D37A407u, 0x6AE8EB0138858D09u, 0x6B1F25C186A6F04Cu,
        0x6B537798F428562Fu, 0x6B88557F31326BBBu, 0x6BBE6ADEFD7F06AAu, 0x6BF302CB5E6F642Au, 0x6C27C37E360B3D35u,
        0x6C5DB45DC38E0C82u, 0x6C9290BA9A38C7D1u, 0x6CC734E940C6F9C5u, 0x6CFD022390F8B837u, 0x6D3221563A9B7322u,
        0x6D66A9ABC9424FEBu, 0x6D9C5416BB92E3E6u, 0x6DD1B48E353BCE6Fu, 0x6E0621B1C28AC20Bu, 0x6E3BAA1E332D728Eu,
        0x6E714A52DFFC6799u, 0x6EA59CE797FB817Fu, 0x6EDB04217DFA61DFu, 0x6F10E294EEBC7D2Bu, 0x6F451B3A2A6B9C76u,
        0x6F7A6208B5068394u, 0x6FB07D457124123Cu, 0x6FE49C96CD6D16CBu, 0x7019C3BC80C85C7Eu, 0x70501A55D07D39CFu,
        0x708420EB449C8842u, 0x70B9292615C3AA53u, 0x70EF736F9B3494E8u, 0x7123A825C100DD11u, 0x7158922F31411455u,
        0x718EB6BAFD91596Bu, 0x71C33234DE7AD7E2u, 0x71F7FEC216198DDBu, 0x722DFE729B9FF152u, 0x7262BF07A143F6D3u,
        0x72976EC98994F488u, 0x72CD4A7BEBFA31AAu, 0x73024E8D737C5F0Au, 0x7336E230D05B76CDu, 0x736C9ABD04725480u,
        0x73A1E0B622C774D0u, 0x73D658E3AB795204u, 0x740BEF1C9657A685u, 0x74417571DDF6C813u, 0x7475D2CE55747A18u,
        0x74AB4781EAD1989Eu, 0x74E10CB132C2FF63u, 0x75154FDD7F73BF3Bu, 0x754AA3D4DF50AF0Au, 0x7580A6650B926D66u,
        0x75B4CFFE4E7708C0u, 0x75EA03FDE214CAF0u, 0x7620427EAD4CFED6u, 0x7654531E58A03E8Bu, 0x768967E5EEC84E2Eu,
        0x76BFC1DF6A7A61BAu, 0x76F3D92BA28C7D14u, 0x7728CF768B2F9C59u, 0x775F03542DFB8370u, 0x779362149CBD3226u,
        0x77C83A99C3EC7EAFu, 0x77FE494034E79E5Bu, 0x7832EDC82110C2F9u, 0x7867A93A2954F3B7u, 0x789D9388B3AA30A5u,
        0x78D27C35704A5E67u, 0x79071B42CC5CF601u, 0x793CE2137F743381u, 0x79720D4C2FA8A030u, 0x79A6909F3B92C83Du,
        0x79DC34C70A777A4Cu, 0x7A11A0FC668AAC6Fu, 0x7A46093B802D578Bu, 0x7A7B8B8A6038AD6Eu, 0x7AB137367C236C65u,
        0x7AE585041B2C477Eu, 0x7B1AE64521F7595Eu, 0x7B50CFEB353A97DAu, 0x7B8503E602893DD1u, 0x7BBA44DF832B8D45u,
        0x7BF06B0BB1FB384Bu, 0x7C2485CE9E7A065Eu, 0x7C59A742461887F6u, 0x7C9008896BCF54F9u, 0x7CC40AABC6C32A38u,
        0x7CF90D56B873F4C6u, 0x7D2F50AC6690F1F8u, 0x7D63926BC01A973Bu, 0x7D987706B0213D09u, 0x7DCE94C85C298C4Cu,
        0x7E031CFD3999F7AFu, 0x7E37E43C8800759Bu, 0x7E6DDD4BAA009302u, 0x7EA2AA4F4A405BE1u, 0x7ED754E31CD072D9u,
        0x7F0D2A1BE4048F90u, 0x7F423A516E82D9BAu, 0x7F76C8E5CA239028u, 0x7FAC7B1F3CAC7433u, 0x7FE1CCF385EBC89Fu,
        0x7FEFFFFFFFFFFFFFu};
};

template <class _Floating>
 inline to_chars_result _Floating_to_chars_general_precision(
    char* _First, char* const _Last, const _Floating _Value, int _Precision) noexcept {

    using _Traits    = _Floating_type_traits<_Floating>;
    using _Uint_type = typename _Traits::_Uint_type;

    const _Uint_type _Uint_value = _Bit_cast<_Uint_type>(_Value);

    if (_Uint_value == 0) {          if (_First == _Last) {
            return {_Last, errc::value_too_large};
        }

        *_First++ = '0';

        return {_First, errc{}};
    }

                    
              if (_Precision < 0) {
        _Precision = 6;
    } else if (_Precision == 0) {
        _Precision = 1;
    } else if (_Precision < 1'000'000) {
             } else {
                                   _Precision = 1'000'000;
    }

     
               
          
    using _Tables = _General_precision_tables<_Floating>;

    const _Uint_type* _Table_begin;
    const _Uint_type* _Table_end;

    if (_Precision <= _Tables::_Max_special_P) {
        _Table_begin = _Tables::_Special_X_table + (_Precision - 1) * (_Precision + 10) / 2;
        _Table_end   = _Table_begin + _Precision + 5;
    } else {
        _Table_begin = _Tables::_Ordinary_X_table;
        _Table_end   = _Table_begin + (::std:: min)(_Precision, _Tables::_Max_P) + 5;
    }

              const _Uint_type* const _Table_lower_bound = [=] {
        if constexpr (!is_same_v<_Floating, float>) {
            if (_Precision > 155) {                  return ::std:: lower_bound(_Table_begin, _Table_end, _Uint_value, less{});
            }
        }

        return ::std:: find_if(_Table_begin, _Table_end, [=](const _Uint_type _Elem) { return _Uint_value <= _Elem; });
    }();

    const ptrdiff_t _Table_index     = _Table_lower_bound - _Table_begin;
    const int _Scientific_exponent_X = static_cast<int>(_Table_index - 5);
    const bool _Use_fixed_notation   = _Precision > _Scientific_exponent_X && _Scientific_exponent_X >= -4;

                              
    constexpr int _Max_output_length =
        is_same_v<_Floating, float> ? 117 : 773;      constexpr int _Max_fixed_precision =
        is_same_v<_Floating, float> ? 37 : 66;      constexpr int _Max_scientific_precision =
        is_same_v<_Floating, float> ? 111 : 766;  
               
    char _Buffer[_Max_output_length];
    const char* const _Significand_first = _Buffer;      const char* _Significand_last        = nullptr;
    const char* _Exponent_first          = nullptr;      const char* _Exponent_last           = nullptr;
    int _Effective_precision;  
              if (_Use_fixed_notation) {
        _Effective_precision = (::std:: min)(_Precision - (_Scientific_exponent_X + 1), _Max_fixed_precision);
        const to_chars_result _Buf_result =
            _Floating_to_chars_fixed_precision(_Buffer, ::std:: end(_Buffer), _Value, _Effective_precision);
        ;
        _Significand_last = _Buf_result.ptr;
    } else {
        _Effective_precision = (::std:: min)(_Precision - 1, _Max_scientific_precision);
        const to_chars_result _Buf_result =
            _Floating_to_chars_scientific_precision(_Buffer, ::std:: end(_Buffer), _Value, _Effective_precision);
        ;
        _Significand_last = ::std:: find(_Buffer, _Buf_result.ptr, 'e');
        _Exponent_first   = _Significand_last;
        _Exponent_last    = _Buf_result.ptr;
    }

         if (_Effective_precision > 0) {
        while (_Significand_last[-1] == '0') {              --_Significand_last;
        }

        if (_Significand_last[-1] == '.') {
            --_Significand_last;
        }
    }

         const ptrdiff_t _Significand_distance = _Significand_last - _Significand_first;
    if (_Last - _First < _Significand_distance) {
        return {_Last, errc::value_too_large};
    }
    :: memcpy(_First, _Significand_first, static_cast<size_t>(_Significand_distance));
    _First += _Significand_distance;

         if (!_Use_fixed_notation) {
        const ptrdiff_t _Exponent_distance = _Exponent_last - _Exponent_first;
        if (_Last - _First < _Exponent_distance) {
            return {_Last, errc::value_too_large};
        }
        :: memcpy(_First, _Exponent_first, static_cast<size_t>(_Exponent_distance));
        _First += _Exponent_distance;
    }

    return {_First, errc{}};
}

enum class _Floating_to_chars_overload { _Plain, _Format_only, _Format_precision };

template <_Floating_to_chars_overload _Overload, class _Floating>
 to_chars_result _Floating_to_chars(
    char* _First, char* const _Last, _Floating _Value, const chars_format _Fmt, const int _Precision) noexcept {
    _Adl_verify_range(_First, _Last);

    if constexpr (_Overload == _Floating_to_chars_overload::_Plain) {
        ;      } else {
        ;
    }

    using _Traits    = _Floating_type_traits<_Floating>;
    using _Uint_type = typename _Traits::_Uint_type;

    _Uint_type _Uint_value = _Bit_cast<_Uint_type>(_Value);

    const bool _Was_negative = (_Uint_value & _Traits::_Shifted_sign_mask) != 0;

    if (_Was_negative) {          if (_First == _Last) {
            return {_Last, errc::value_too_large};
        }

        *_First++ = '-';

        _Uint_value &= ~_Traits::_Shifted_sign_mask;
        _Value = _Bit_cast<_Floating>(_Uint_value);
    }

    if ((_Uint_value & _Traits::_Shifted_exponent_mask) == _Traits::_Shifted_exponent_mask) {
                 const char* _Str;
        size_t _Len;

        const _Uint_type _Mantissa = _Uint_value & _Traits::_Denormal_mantissa_mask;

        if (_Mantissa == 0) {
            _Str = "inf";
            _Len = 3;
        } else if (_Was_negative && _Mantissa == _Traits::_Special_nan_mantissa_mask) {
                                      _Str = "nan(ind)";
            _Len = 8;
        } else if ((_Mantissa & _Traits::_Special_nan_mantissa_mask) != 0) {
            _Str = "nan";
            _Len = 3;
        } else {
            _Str = "nan(snan)";
            _Len = 9;
        }

        if (_Last - _First < static_cast<ptrdiff_t>(_Len)) {
            return {_Last, errc::value_too_large};
        }

        :: memcpy(_First, _Str, _Len);

        return {_First + _Len, errc{}};
    }

    if constexpr (_Overload == _Floating_to_chars_overload::_Plain) {
        return _Floating_to_chars_ryu(_First, _Last, _Value, chars_format{});
    } else if constexpr (_Overload == _Floating_to_chars_overload::_Format_only) {
        if (_Fmt == chars_format::hex) {
            return _Floating_to_chars_hex_shortest(_First, _Last, _Value);
        }

        return _Floating_to_chars_ryu(_First, _Last, _Value, _Fmt);
    } else if constexpr (_Overload == _Floating_to_chars_overload::_Format_precision) {
        switch (_Fmt) {
        case chars_format::scientific:
            return _Floating_to_chars_scientific_precision(_First, _Last, _Value, _Precision);
        case chars_format::fixed:
            return _Floating_to_chars_fixed_precision(_First, _Last, _Value, _Precision);
        case chars_format::general:
            return _Floating_to_chars_general_precision(_First, _Last, _Value, _Precision);
        case chars_format::hex:
        default:              return _Floating_to_chars_hex_precision(_First, _Last, _Value, _Precision);
        }
    }
}

inline to_chars_result to_chars(char* const _First, char* const _Last, const float _Value) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Plain>(_First, _Last, _Value, chars_format{}, 0);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const double _Value) noexcept
  {
    return _Floating_to_chars<_Floating_to_chars_overload::_Plain>(_First, _Last, _Value, chars_format{}, 0);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const long double _Value) noexcept
  {
    return _Floating_to_chars<_Floating_to_chars_overload::_Plain>(
        _First, _Last, static_cast<double>(_Value), chars_format{}, 0);
}
inline to_chars_result to_chars(
    char* const _First, char* const _Last, const float _Value, const chars_format _Fmt) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_only>(_First, _Last, _Value, _Fmt, 0);
}
inline to_chars_result to_chars(
    char* const _First, char* const _Last, const double _Value, const chars_format _Fmt) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_only>(_First, _Last, _Value, _Fmt, 0);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const long double _Value,
    const chars_format _Fmt) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_only>(
        _First, _Last, static_cast<double>(_Value), _Fmt, 0);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const float _Value, const chars_format _Fmt,
    const int _Precision) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_precision>(_First, _Last, _Value, _Fmt, _Precision);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const double _Value, const chars_format _Fmt,
    const int _Precision) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_precision>(_First, _Last, _Value, _Fmt, _Precision);
}
inline to_chars_result to_chars(char* const _First, char* const _Last, const long double _Value,
    const chars_format _Fmt, const int _Precision) noexcept   {
    return _Floating_to_chars<_Floating_to_chars_overload::_Format_precision>(
        _First, _Last, static_cast<double>(_Value), _Fmt, _Precision);
}

}



