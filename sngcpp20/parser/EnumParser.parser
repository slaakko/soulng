// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/Enum.hpp>
[cpp]#include <sngcpp20/parser/AttributeParser.hpp>
[cpp]#include <sngcpp20/parser/ExpressionParser.hpp>
[cpp]#include <sngcpp20/parser/FunctionParser.hpp>
[cpp]#include <sngcpp20/parser/IdentifierParser.hpp>
[cpp]#include <sngcpp20/parser/StatementParser.hpp>
[cpp]#include <sngcpp20/parser/TypeParser.hpp>
[cpp]#include <sngcpp20/symbols/Enum.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) EnumParser
{
    uselexer CppLexer;
    state;

    using AttributeParser.AttributeSpecifierSeq;
    using ExpressionParser.ConstantExpression;
    using FunctionParser.Comma;
    using IdentifierParser.Identifier;
    using IdentifierParser.NestedNameSpecifier;
    using IdentifierParser.Unnamed;
    using StatementParser.Semicolon;
    using TypeParser.TypeSpecifierSeq;

    EnumName(sngcpp::symbols::Context* ctx) : Node*
        ::= Identifier(ctx):identifier{ return identifier; }
        ;

    EnumSpecifier(sngcpp::symbols::Context* ctx, var std::unique_ptr<EnumSpecifierNode> enumSpecifierNode, var SourcePos s, var SourcePos lbPos, var SourcePos rbPos) : Node*
        ::= 
        (
            EnumHead(ctx):enumHead{ s = sourcePos; } 
            LBRACE{ lbPos = sourcePos; enumSpecifierNode.reset(new EnumSpecifierNode(s, enumHead)); sngcpp::symbols::BeginEnumType(enumSpecifierNode.get(), ctx); } 
            (
                EnumeratorList(ctx, enumSpecifierNode.get()):el{ sngcpp::symbols::AddEnumerators(enumSpecifierNode.get(), ctx); } 
                (Comma:comma{ enumSpecifierNode->AddNode(comma); })?
            )?
            RBRACE{ rbPos = sourcePos; enumSpecifierNode->SetLBracePos(lbPos); enumSpecifierNode->SetRBracePos(rbPos); }
        )
        {
            sngcpp::symbols::EndEnumType(ctx);
            return enumSpecifierNode.release();
        }
        ;

    EnumHead(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<Node> name) : Node*
        ::= 
        (
            EnumKey:enumKey{ s = sourcePos; } AttributeSpecifierSeq(ctx):attributes? 
            (EnumHeadName(ctx):enumHeadName{ name.reset(enumHeadName); } | Unnamed:unnamed{ name.reset(unnamed); }) 
            EnumBase(ctx):enumBase?
        )
        {
            return new EnumHeadNode(s, enumKey, name.release(), enumBase, attributes);
        }
        ;

    EnumKey(var SourcePos s) : Node*
        ::= ENUM{ s = sourcePos; } CLASS{ return new EnumClassNode(s, sourcePos); }
        |   ENUM{ s = sourcePos; } STRUCT{ return new EnumStructNode(s, sourcePos); }
        |   ENUM{ return new EnumNode(sourcePos); }
        ;

    EnumHeadName(sngcpp::symbols::Context* ctx) : Node* 
        ::= NestedNameSpecifier(ctx):nns Identifier(ctx):identifier{ return new QualifiedIdNode(sourcePos, nns, identifier); }
        |   Identifier(ctx):identifier2{ return identifier2;}
        ;

    EnumBase(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            COLON{ s = sourcePos; } TypeSpecifierSeq(ctx):typeSpecifiers
        )
        {
            return new EnumBaseNode(s, typeSpecifiers);
        }
        ;

    EnumeratorList(sngcpp::symbols::Context* ctx, sngcpp::ast::Node* container)
        ::= EnumeratorDefinition(ctx):first{ container->AddNode(first); } (Comma:comma{ container->AddNode(comma); } EnumeratorDefinition(ctx):next{ container->AddNode(next); })*
        ;

    EnumeratorDefinition(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos assignPos) : Node*
        ::= 
        (
            Enumerator(ctx):enumerator{ s = sourcePos; } (ASSIGN{ assignPos = sourcePos; } ConstantExpression(ctx):value)?
        )
        {
            return new EnumeratorDefinitionNode(s, enumerator, value, assignPos);
        }
        ;

    Enumerator(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            Identifier(ctx):identifier{ s = sourcePos; } AttributeSpecifierSeq(ctx):attributes?
        )
        {
            return new EnumeratorNode(s, identifier, attributes);
        }
        ;


    ElaboratedEnumSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos nnsPos) : Node*
        ::= ENUM{ s = sourcePos; } 
        (   NestedNameSpecifier(ctx):nns{ nnsPos = sourcePos; } Identifier(ctx):identifier
            { 
                Node* node = new ElaboratedEnumSpecifierNode(s, new QualifiedIdNode(nnsPos, nns, identifier)); 
                sngcpp::symbols::BeginEnumType(node, ctx);
                return node;
            }
        |   Identifier(ctx):identifier2
            { 
                Node* node = new ElaboratedEnumSpecifierNode(s, identifier2); 
                sngcpp::symbols::BeginEnumType(node, ctx);
                return node;
            }
        )
        ;

    OpaqueEnumDeclaration(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (   
            EnumKey:enumKey{ s = sourcePos; }
            AttributeSpecifierSeq(ctx):attributes? 
            EnumHeadName(ctx):enumHeadName 
            EnumBase(ctx):enumBase? 
            Semicolon:semicolon
        )
        {

            Node* node = new OpaqueEnumDeclarationNode(s, enumKey, enumHeadName, enumBase, attributes, semicolon);
            sngcpp::symbols::BeginEnumType(node, ctx);
            sngcpp::symbols::EndEnumType(ctx);
            return node;
        }
        ;
}
