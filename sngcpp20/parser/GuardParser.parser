// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <soulng/parser/Match.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) GuardParser
{
    uselexer CppLexer;
    state;

    MemberFunctionTemplateGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = ctx->GetFlag(sngcpp::symbols::ContextFlags::parseMemberFunction | sngcpp::symbols::ContextFlags::parsingTemplateDeclaration); }
        ;

    SavedMemberFunctionBodyGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = ctx->GetFlag(sngcpp::symbols::ContextFlags::parseSavedMemberFunctionBody); }
        ;

    AssumeTypeGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = ctx->GetFlag(sngcpp::symbols::ContextFlags::assumeType); }
        ;

    NotDefiningTypeSpecifierGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = !ctx->GetFlag(sngcpp::symbols::ContextFlags::hasDefiningTypeSpecifier); }
        ;

    MSVCModeGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = ctx->GetFlag(sngcpp::symbols::ContextFlags::msvcMode); }
        ;

    ConceptGuard(sngcpp::symbols::Context* ctx)
        ::= empty{ pass = ctx->GetFlag(sngcpp::symbols::ContextFlags::parsingConceptDefinition); }
        ;
}
