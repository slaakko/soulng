// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/Lambda.hpp>
[cpp]#include <sngcpp20/Parser/AttributeParser.hpp>
[cpp]#include <sngcpp20/Parser/ConceptParser.hpp>
[cpp]#include <sngcpp20/Parser/DeclarationParser.hpp>
[cpp]#include <sngcpp20/Parser/ExpressionParser.hpp>
[cpp]#include <sngcpp20/Parser/FunctionParser.hpp>
[cpp]#include <sngcpp20/Parser/IdentifierParser.hpp>
[cpp]#include <sngcpp20/Parser/InitializationParser.hpp>
[cpp]#include <sngcpp20/Parser/StatementParser.hpp>
[cpp]#include <sngcpp20/Parser/TemplateParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) LambdaParser
{
    uselexer CppLexer;
    state;

    using AttributeParser.AttributeSpecifierSeq;
    using ConceptParser.RequiresClause;
    using DeclarationParser.DeclSpecifierSeq;
    using DeclarationParser.NoexceptSpecifier;
    using DeclarationParser.TrailingReturnType;
    using ExpressionParser.ConstantExpression;
    using ExpressionParser.Ellipsis;
    using FunctionParser.Comma;
    using FunctionParser.ParameterDeclarationClause;
    using IdentifierParser.Identifier;
    using InitializationParser.Initializer;
    using StatementParser.CompoundStatement;
    using TemplateParser.TemplateParameterList;

    LambdaExpression(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            LambdaIntroducer(ctx):introducer{ s = sourcePos; }
            LambdaTemplateParams(ctx):templateParams?
            LambdaDeclarator(ctx):declarator
            CompoundStatement(ctx):body
        )
        {
            return new LambdaExpressionNode(s, introducer, templateParams, declarator, body);
        }
        ;

    LambdaIntroducer(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos lbPos, var SourcePos rbPos) : Node*
        ::= 
        (   
            LBRACKET{ s = sourcePos; lbPos = sourcePos; }
            LambdaCapture(ctx):capture?
            RBRACKET{ rbPos = sourcePos; }
        )
        {
            return new LambdaIntroducerNode(s, capture, lbPos, rbPos);
        }
        ;

    LambdaCapture(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= empty{ node.reset(new LambdaCaptureNode(sourcePos)); }
        (   CaptureList(ctx, node.get()):captureList
        |   CaptureDefault:captureDefault{ node->AddNode(captureDefault); } 
            (Comma:comma{ node->AddNode(comma); } CaptureList(ctx, node.get()):captureList2)?
        )
        {
            return node.release();
        }
        ;

    CaptureDefault : Node*
        ::= AMP{ return new DefaultRefCaptureNode(sourcePos); }
        |   ASSIGN{ return new DefaultCopyCaptureNode(sourcePos); }
        ;

    CaptureList(sngcpp::symbols::Context* ctx, sngcpp::ast::Node* container) 
        ::= Capture(ctx):first{ container->AddNode(first); } (Comma:comma{ container->AddNode(comma); } Capture(ctx):next{ container->AddNode(next); })*
        ;

    Capture(sngcpp::symbols::Context* ctx) : Node*
        ::= InitCapture(ctx):initCapture{ return initCapture; }
        |   SimpleCapture(ctx):simpleCapture{ return simpleCapture; }
        ;

    InitCapture(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<Node> byRefCaptureNode) : Node*
        ::= 
        (
            (AMP{ s = sourcePos; byRefCaptureNode.reset(new ByRefCaptureNode(sourcePos)); })? 
            (Ellipsis:ellipsis{ if (!s.IsValid()) s = sourcePos; })? 
            Identifier(ctx):identifier{ if (!s.IsValid()) s = sourcePos; }
            Initializer(ctx):initializer
        )
        {
            return new InitCaptureNode(s, identifier, initializer, byRefCaptureNode.release(), ellipsis);
        }
        ;

    SimpleCapture(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos thisPos, var std::unique_ptr<Node> byRefCaptureNode) : Node*
        ::= 
        (
            STAR{ s = sourcePos; } THIS{ thisPos = sourcePos; return new CurrentObjectCopyCapture(s, thisPos); }
        |   THIS{ thisPos = sourcePos; return new CurrentObjectByRefCapture(s, thisPos); }
        |
            (
                (AMP{ s = sourcePos; byRefCaptureNode.reset(new ByRefCaptureNode(sourcePos)); })? 
                Identifier(ctx):identifier{ if (!s.IsValid()) s = sourcePos; }
                Ellipsis:ellipsis?
            )
            {
                return new SimpleCaptureNode(s, identifier, byRefCaptureNode.release(), ellipsis);
            }
        )
        ;

    LambdaDeclarator(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<ParameterListNode> parameterList, var SourcePos lpPos, var SourcePos rpPos) : Node*
        ::= 
        (
            (   LPAREN{ s = sourcePos; lpPos = sourcePos; parameterList.reset(new ParameterListNode(sourcePos)); } 
                ParameterDeclarationClause(ctx, parameterList.get()):params 
                RPAREN{ rpPos = sourcePos; parameterList->SetLParenPos(lpPos); parameterList->SetRParenPos(rpPos); }
            )?
            LambdaSpecifiers(ctx):specifiers{ if (!s.IsValid()) s = sourcePos; }
            RequiresClause(ctx):requiresClause?
        )
        {
            return new LambdaDeclaratorNode(s, parameterList.release(), specifiers, requiresClause);
        }
        ;

    LambdaSpecifiers(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            (DeclSpecifierSeq(ctx):declSpecifiers{ s = sourcePos; })?
            (NoexceptSpecifier(ctx):noexceptSpecifier{ if (!s.IsValid()) s = sourcePos; })?
            (AttributeSpecifierSeq(ctx):attributes{ if (!s.IsValid()) s = sourcePos; })?
            (TrailingReturnType(ctx):trailingReturnType{ if (!s.IsValid()) s = sourcePos; })?
        )
        {
            return new LambdaSpecifiersNode(s, declSpecifiers, noexceptSpecifier, attributes, trailingReturnType);
        }
        ;

    LambdaTemplateParams(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            TemplateParameterList(ctx):templateParams{ s = sourcePos; } RequiresClause(ctx):requiresClause?
        )
        {
            return new LambdaTemplateParamsNode(s, templateParams, requiresClause);
        }
        ;
}

