// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/Class.hpp>
[cpp]#include <sngcpp20/symbols/SymbolFactory.hpp>
[cpp]#include <sngcpp20/parser/AttributeParser.hpp>
[cpp]#include <sngcpp20/parser/ConceptParser.hpp>
[cpp]#include <sngcpp20/parser/DeclarationParser.hpp>
[cpp]#include <sngcpp20/parser/EnumParser.hpp>
[cpp]#include <sngcpp20/parser/ExpressionParser.hpp>
[cpp]#include <sngcpp20/parser/FunctionParser.hpp>
[cpp]#include <sngcpp20/parser/IdentifierParser.hpp>
[cpp]#include <sngcpp20/parser/InitializationParser.hpp>
[cpp]#include <sngcpp20/parser/StatementParser.hpp>
[cpp]#include <sngcpp20/parser/TemplateParser.hpp>
[cpp]#include <sngcpp20/parser/TypeParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) ClassParser
{
    uselexer CppLexer;
    state;

    using AttributeParser.AttributeSpecifierSeq;
    using ConceptParser.RequiresClause;
    using DeclarationParser.AliasDeclaration;
    using DeclarationParser.Declarator;
    using DeclarationParser.DeclSpecifierSeq;
    using DeclarationParser.EmptyDeclaration;
    using DeclarationParser.UsingEnumDeclaration;
    using DeclarationParser.UsingDeclaration;
    using DeclarationParser.StaticAssertDeclaration;
    using EnumParser.OpaqueEnumDeclaration;
    using ExpressionParser.Ellipses;
    using ExpressionParser.ExpressionList;
    using FunctionParser.Comma;
    using FunctionParser.FunctionDefinition;
    using IdentifierParser.Identifier;
    using IdentifierParser.NestedNameSpecifier;
    using IdentifierParser.Unnamed;
    using InitializationParser.BracedInitList;
    using InitializationParser.BraceOrEqualInitializer;
    using StatementParser.Semicolon;
    using TemplateParser.SimpleTemplateId;
    using TemplateParser.DeductionGuide;
    using TemplateParser.ExplicitSpecialization;
    using TemplateParser.Template;
    using TemplateParser.TemplateDeclaration;
    using TypeParser.DeclTypeSpecifier;
    using TypeParser.TypeName;

    ClassSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<ClassSpecifierNode> node, var SourcePos lbPos, var SourcePos rbPos) : Node*
        ::= 
        (
            ClassHead(ctx):classHead{ s = sourcePos; } 
            LBRACE{ lbPos = sourcePos; node.reset(new ClassSpecifierNode(s, classHead)); sngcpp::symbols::BeginClass(node.get(), ctx); } 
            MemberSpecification(ctx, node.get()):memberSpec? 
            RBRACE{ rbPos = sourcePos; }
        )
        {
            node->SetLBracePos(lbPos);
            node->SetRBracePos(rbPos);
            sngcpp::symbols::EndClass(ctx);
            return node.release();
        }
        ;

    ClassHead(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            ClassKey:classKey{ s = sourcePos; } AttributeSpecifierSeq(ctx):attributes? 
            (   (ClassHeadName(ctx):classHeadName ClassVirtSpecifier(ctx):classVirtSpecifier? BaseClause(ctx):baseClause?)
                {
                    return new ClassHeadNode(s, classKey, classHeadName, classVirtSpecifier, baseClause, attributes);
                }
            |   (Unnamed:unnamed BaseClause(ctx):baseClause2?)
                {
                    return new ClassHeadNode(s, classKey, unnamed, nullptr, baseClause2, attributes);
                }
            )
        )
        ;

    ClassHeadName(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= NestedNameSpecifier(ctx):nns{ s = sourcePos; } ClassName(ctx):className{ return new QualifiedIdNode(s, nns, className); }
        |   ClassName(ctx):className2{ return className2; }
        ;

    ClassName(sngcpp::symbols::Context* ctx) : Node*
        ::= SimpleTemplateId(ctx):templateId{ return templateId; }
        |   Identifier(ctx):identifier{ return identifier; }
        ;

    ClassKey : Node*
        ::= CLASS{ return new ClassNode(sourcePos); }
        |   STRUCT{ return new StructNode(sourcePos); }
        |   UNION{ return new UnionNode(sourcePos); }
        ;

    BaseClause(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= COLON{ s = sourcePos; } BaseSpecifierList(ctx):baseSpecifierList
        {
            return new BaseClauseNode(s, baseSpecifierList);
        }
        ;

    BaseSpecifierList(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (
            BaseSpecifier(ctx):first{ node.reset(new BaseSpecifierListNode(sourcePos)); node->AddNode(first); } 
            (Comma:comma{ node->AddNode(comma); } BaseSpecifier(ctx):next{ node->AddNode(next); })*
            (Ellipses:ellipses{ node->AddNode(ellipses); })?
        )
        {
            return node.release();
        }
        ;

    BaseSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<Node> accessSpecifierNode, var std::unique_ptr<Node> virtualSpecifier, var bool virtualFirst) : Node*
        ::= 
        (
            (AttributeSpecifierSeq(ctx):attributes{ s = sourcePos; })?
            (   VirtualSpecifier:virt{ if (!s.IsValid()) s = sourcePos; virtualSpecifier.reset(virt); virtualFirst = true; } 
                (AccessSpecifier:access{ if (!s.IsValid()) s = sourcePos; accessSpecifierNode.reset(access); })? 
            |   AccessSpecifier:access2{ if (!s.IsValid()) s = sourcePos; accessSpecifierNode.reset(access2); } 
                (VirtualSpecifier:virt2{ if (!s.IsValid()) s = sourcePos; virtualSpecifier.reset(virt2); })?
            |   empty
            )
            ClassOrDeclType(ctx):classOrDeclType{ if (!s.IsValid()) s = sourcePos; }
        )
        {
            return new BaseSpecifierNode(s, classOrDeclType, accessSpecifierNode.release(), virtualSpecifier.release(), attributes, virtualFirst);
        }
        ;

    ClassOrDeclType(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos tmpPos) : Node*
        ::= NestedNameSpecifier(ctx):nns{ s = sourcePos; } Template:tmp{ tmpPos = sourcePos; } SimpleTemplateId(ctx):simpleTemplateId
            { 
                return new QualifiedIdNode(s, nns, new PrefixNode(tmpPos, tmp, simpleTemplateId)); 
            }
        |   NestedNameSpecifier(ctx):nns2{ s = sourcePos; } TypeName(ctx):typeName
            { 
                return new QualifiedIdNode(s, nns2, typeName); 
            }
        |   TypeName(ctx):typeName2{ return typeName2; }
        |   DeclTypeSpecifier(ctx):declTypeSpecifier{ return declTypeSpecifier; }
        ;

    AccessSpecifier : Node*
        ::= PUBLIC{ return new PublicNode(sourcePos); }
        |   PROTECTED{ return new ProtectedNode(sourcePos); }
        |   Private:privat{ return privat; }
        ;

    Private : Node*
        ::= PRIVATE{ return new PrivateNode(sourcePos); }
        ;

    VirtualSpecifier : Node*
        ::= VIRTUAL{ return new VirtualNode(sourcePos); }
        ;

    ClassVirtSpecifier(sngcpp::symbols::Context* ctx) : Node*
        ::= FinalKeyword(ctx):finalKw{ return finalKw; }
        ;

    VirtSpecifierSeq(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (
            VirtSpecifier(ctx):first{ node.reset(new VirtSpecifierSequenceNode(sourcePos)); node->AddNode(first); } (VirtSpecifier(ctx):next{ node->AddNode(next); })*
        )
        {
            return node.release();
        }
        ;

    VirtSpecifier(sngcpp::symbols::Context* ctx) : Node*
        ::= OverrideKeyword(ctx):overrideKw{ return overrideKw; }
        |   FinalKeyword(ctx):finalKw{ return finalKw; }
        ;

    OverrideKeyword(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            Identifier(ctx):identifier{ s = sourcePos; std::u32string id = lexer.GetMatch(pos); pass = id == U"override"; }
        )
        {
            return new OverrideNode(s);
        }
        ;

    FinalKeyword(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            Identifier(ctx):identifier{ std::u32string id = lexer.GetMatch(pos); pass = id == U"final"; }
        )
        {
            return new FinalNode(s);
        }
        ;

    PureSpecifier(var SourcePos s, var SourcePos zeroPos) : Node*
        ::= 
        (
            ASSIGN{ s = sourcePos; } INTLIT{ zeroPos = sourcePos; std::u32string value = lexer.GetMatch(pos); pass = value == U"0"; }
        )
        {
            return new PureSpecifierNode(s, zeroPos);
        }
        ;

    MemberSpecification(sngcpp::symbols::Context* ctx, sngcpp::ast::Node* container, var SourcePos s, var SourcePos colonPos)
        ::= 
        (   AccessSpecifier:accessSpecifier{ s = sourcePos; } COLON{ colonPos = sourcePos; container->AddNode(new BeginAccessGroupNode(s, accessSpecifier, colonPos)); }
        |   MemberDeclaration(ctx):memberDeclaration{ container->AddNode(memberDeclaration); }
        )+
        ;

    MemberDeclaration(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= (AttributeSpecifierSeq(ctx):attributes{ s = sourcePos; })? 
            (DeclSpecifierSeq(ctx):declSpecifiers{ if (!s.IsValid()) s = sourcePos; })? 
            (MemberDeclaratorList(ctx):declarators{ if (!s.IsValid()) s = sourcePos; })? 
            (Semicolon:semicolon{ if (!s.IsValid()) s = sourcePos; })
            {
                return new MemberDeclarationNode(s, attributes, declSpecifiers, declarators, semicolon);
            }
        |   FunctionDefinition(ctx):functionDefinition{ return functionDefinition; }
        |   UsingDeclaration(ctx):usingDeclaration{ return usingDeclaration; }
        |   UsingEnumDeclaration(ctx):usingEnumDeclaration{ return usingEnumDeclaration; }
        |   StaticAssertDeclaration(ctx):staticAssertDeclaration{ return staticAssertDeclaration; }
        |   TemplateDeclaration(ctx):templateDeclaration{ return templateDeclaration; }
        |   ExplicitSpecialization(ctx):explicitSpecialization{ return explicitSpecialization; }
        |   DeductionGuide(ctx):deductionGuide{ return deductionGuide; }
        |   AliasDeclaration(ctx):aliasDeclaration{ return aliasDeclaration; }
        |   OpaqueEnumDeclaration(ctx):opaqueEnumDeclaration{ return opaqueEnumDeclaration; }
        |   EmptyDeclaration:emptyDeclaration{ return emptyDeclaration; }
        ;

    MemberDeclaratorList(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (
            MemberDeclarator(ctx):first{ node.reset(new MemberDeclaratorListNode(sourcePos)); node->AddNode(first); }
            (Comma:comma{ node->AddNode(comma); } MemberDeclarator(ctx):next{ node->AddNode(next); })*
        )
        {
            return node.release();
        }
        ;

    MemberDeclarator(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<TrailingQualifiersNode> trailingQualifiersNode) : Node*
        ::= 
        (
            Declarator(ctx):declarator{ s = sourcePos; } 
            (   RequiresClause(ctx):requiresClause{ return new InitDeclaratorNode(s, declarator, requiresClause); }
            |   BraceOrEqualInitializer(ctx):initializer{ return new InitDeclaratorNode(s, declarator, initializer); }
            |   empty{ trailingQualifiersNode.reset(new TrailingQualifiersNode(s, declarator)); }
            )
            (VirtSpecifierSeq(ctx):virtSpecifierSeq{ trailingQualifiersNode->AddNode(virtSpecifierSeq); })?
            (PureSpecifier:pureSpecifier{ trailingQualifiersNode->AddNode(pureSpecifier); })?
        )
        {
            if (trailingQualifiersNode->Nodes().IsEmpty())
            {
                return trailingQualifiersNode->ReleaseSubject();
            }
            else
            {
                return trailingQualifiersNode.release();
            }
        }
        ;    

    CtorInitializer(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= COLON{ s = sourcePos; } MemberInitializerList(ctx):memberInitializerList
        {
            return new ConstructorInitializerNode(s, memberInitializerList);
        }
        ;

    MemberInitializerList(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (   
            MemberInitializer(ctx):first{ node.reset(new MemberInitializerListNode(sourcePos)); node->AddNode(first); }
            (Comma:comma{ node->AddNode(comma); } MemberInitializer(ctx):next{ node->AddNode(next); })*
            (Ellipses:ellipses{ node->AddNode(ellipses); })
        )
        {
            return node.release();
        }
        ;

    MemberInitializer(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<ExpressionListNode> exprListNode, var std::unique_ptr<Node> node) : Node*
        ::= 
        (   MemberInitializerId(ctx):id{ s = sourcePos; }
            (
                LPAREN{ exprListNode.reset(new ExpressionListNode(sourcePos)); exprListNode->SetLParenPos(sourcePos); } 
                ExpressionList(ctx, exprListNode.get()):expressionList?
                RPAREN{ exprListNode->SetRParenPos(sourcePos); node.reset(exprListNode.release()); }
            |   BracedInitList(ctx):bracedInitList{ node.reset(bracedInitList); }
            )
        )
        {
            return new MemberInitializerNode(s, id, node.release());
        }
        ;

    MemberInitializerId(sngcpp::symbols::Context* ctx) : Node*
        ::= ClassOrDeclType(ctx):classOrDeclType{ return classOrDeclType; }
        |   Identifier(ctx):identifier{ return identifier; }
        ;
}
