// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/Type.hpp>
[cpp]#include <sngcpp20/ast/Qualifier.hpp>
[cpp]#include <sngcpp20/parser/AttributeParser.hpp>
[cpp]#include <sngcpp20/parser/ClassParser.hpp>
[cpp]#include <sngcpp20/parser/ConceptParser.hpp>
[cpp]#include <sngcpp20/parser/DeclarationParser.hpp>
[cpp]#include <sngcpp20/parser/EnumParser.hpp>
[cpp]#include <sngcpp20/parser/ExpressionParser.hpp>
[cpp]#include <sngcpp20/parser/GuardParser.hpp>
[cpp]#include <sngcpp20/parser/IdentifierParser.hpp>
[cpp]#include <sngcpp20/parser/SimpleTypeParser.hpp>
[cpp]#include <sngcpp20/parser/TemplateParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>
[cpp]#include <sngcpp20/symbols/Class.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) TypeParser
{
    uselexer CppLexer;
    state;

    using AttributeParser.AttributeSpecifierSeq;
    using ClassParser.ClassKey;
    using ClassParser.ClassSpecifier;
    using ConceptParser.TypeConstraint;
    using DeclarationParser.AbstractDeclarator;
    using DeclarationParser.CVQualifier;
    using EnumParser.EnumSpecifier;
    using EnumParser.ElaboratedEnumSpecifier;
    using GuardParser.NotSimpleTypeGuard;
    using ExpressionParser.Expression;
    using IdentifierParser.Identifier;
    using IdentifierParser.NestedNameSpecifier;
    using IdentifierParser.TypeIdentifier;
    using SimpleTypeParser.SimpleType;
    using TemplateParser.SimpleTemplateId;
    using TemplateParser.Template;

    TypeSpecifierSeq(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (
            TypeSpecifier(ctx):first{ node.reset(new TypeSpecifierSequenceNode(sourcePos)); node->AddNode(first); } 
            (TypeSpecifier(ctx):next{ node->AddNode(next); })*
            (AttributeSpecifierSeq(ctx):attributes{ node->AddNode(attributes); })?
        )
        {
            return node.release();
        }
        ;

    DefiningTypeId(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            DefiningTypeSpecifierSeq(ctx):definingTypeSpecifierSeq{ s = sourcePos; } AbstractDeclarator(ctx):abstractDeclararator?
        )
        {
            return new DefiningTypeIdNode(s, definingTypeSpecifierSeq, abstractDeclararator);
        }
        ;

    DefiningTypeSpecifierSeq(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (   
            DefiningTypeSpecifier(ctx):first{ node.reset(new DefiningTypeSpecifierSequenceNode(sourcePos)); node->AddNode(first); }
            (DefiningTypeSpecifier(ctx):next{ node->AddNode(next); })*
            (AttributeSpecifierSeq(ctx):attributes{ node->AddNode(attributes); })?
        )
        {
            return node.release();
        }
        ;

    DefiningTypeSpecifier(sngcpp::symbols::Context* ctx) : Node*
        ::= ClassSpecifier(ctx):classSpecifier{ return classSpecifier; }
        |   EnumSpecifier(ctx):enumSpecifier{ return enumSpecifier; }
        |   TypeSpecifier(ctx):typeSpecifier{ return typeSpecifier; }
        ;

    TypeSpecifier(sngcpp::symbols::Context* ctx) : Node*
        ::= ElaboratedTypeSpecifier(ctx):elaboratedTypeSpecifier{ return elaboratedTypeSpecifier; }
        |   SimpleTypeSpecifier(ctx):simpleTypeSpecifier{ return simpleTypeSpecifier; }
        |   TypenameSpecifier(ctx):typenameSpecifier{ return typenameSpecifier; }
        |   CVQualifier:cvQualifier{ return cvQualifier; }
        ;

    ElaboratedTypeSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos nnsPos, var SourcePos tmpPos) : Node*
        ::= ClassKey:classKey{ s = sourcePos; }
            AttributeSpecifierSeq(ctx):attributes?
            (
                NestedNameSpecifier(ctx):nns{ nnsPos = sourcePos; } 
                (   
                    Template:tmp{ tmpPos = sourcePos; }
                    SimpleTemplateId(ctx):simpleTemplateId
                    {
                        Node* node = new ElaboratedTypeSpecifierNode(s, classKey, new QualifiedIdNode(nnsPos, nns, new PrefixNode(tmpPos, tmp, simpleTemplateId)), nullptr);
                        sngcpp::symbols::BeginClass(node, ctx);
                        sngcpp::symbols::EndClass(ctx);
                        return node;
                    }
                |   SimpleTemplateId(ctx):simpleTemplateId2
                    {
                        Node* node = new ElaboratedTypeSpecifierNode(s, classKey, new QualifiedIdNode(nnsPos, nns, simpleTemplateId2), nullptr);
                        sngcpp::symbols::BeginClass(node, ctx);
                        sngcpp::symbols::EndClass(ctx);
                        return node;
                    }
                |   Identifier(ctx):identifier
                    {
                        Node* node = new ElaboratedTypeSpecifierNode(s, classKey, new QualifiedIdNode(nnsPos, nns, identifier), attributes);
                        sngcpp::symbols::BeginClass(node, ctx);
                        sngcpp::symbols::EndClass(ctx);
                        return node;
                    }
                )
            |   SimpleTemplateId(ctx):simpleTemplateId3
                {
                    Node* node = new ElaboratedTypeSpecifierNode(s, classKey, simpleTemplateId3, nullptr);
                    sngcpp::symbols::BeginClass(node, ctx);
                    sngcpp::symbols::EndClass(ctx);
                    return node;
                }
            |   Identifier(ctx):identifier2
                {
                    Node* node = new ElaboratedTypeSpecifierNode(s, classKey, identifier2, attributes);
                    sngcpp::symbols::BeginClass(node, ctx);
                    sngcpp::symbols::EndClass(ctx);
                    return node;
                }
            )
        |   ElaboratedEnumSpecifier(ctx):elaboratedEnumSpecifier{ return elaboratedEnumSpecifier; }
        ;

    SimpleTypeSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos tmpPos) : Node*
        ::= 
        (   SimpleType(ctx):simpleType{ ctx->SetFlag(sngcpp::symbols::ContextFlags::hasSimpleType); return simpleType; }
        |   NotSimpleTypeGuard(ctx):guard
            (
                (   NestedNameSpecifier(ctx):nns{ s = sourcePos; } Template:tmp{ tmpPos = sourcePos; } SimpleTemplateId(ctx):simpleTemplateId
                    { 
                        return new QualifiedIdNode(s, nns, new PrefixNode(tmpPos, tmp, simpleTemplateId)); 
                    }
                |   NestedNameSpecifier(ctx):nns2{ s = sourcePos; } TypeName(ctx):typeName
                    { 
                        return new QualifiedIdNode(s, nns2, typeName); 
                    }
                )
                |   TypeName(ctx):typeName2{ return typeName2; }
                |   DeclTypeSpecifier(ctx):declTypeSpecifier{ return declTypeSpecifier; }
                |   PlaceholderTypeSpecifier(ctx):placeholderTypeSpecifier{ return placeholderTypeSpecifier; }
            )
        )
        ;

    TypeName(sngcpp::symbols::Context* ctx) : Node*
        ::= SimpleTemplateId(ctx):templateId{ return templateId; }
        |   TypeIdentifier(ctx):typeIdentifier{ return typeIdentifier;  }        
        ;

    TypeId(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            TypeSpecifierSeq(ctx):typeSpecifiers{ s = sourcePos; } AbstractDeclarator(ctx):declarator?
        )
        {
            return new TypeIdNode(s, typeSpecifiers, declarator);
        }
        ;

    TypenameSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var std::unique_ptr<Node> templateNode) : Node*
        ::= TYPENAME{ s = sourcePos; } 
            NestedNameSpecifier(ctx):nns 
            (   (Template:t{ templateNode.reset(t); })?
                SimpleTemplateId(ctx):simpleTemplateId
                {
                    return new TypenameSpecifierNode(s, nns, simpleTemplateId, templateNode.release());
                }
            |   Identifier(ctx):identifier
                {
                    return new TypenameSpecifierNode(s, nns, identifier, nullptr);
                }
            )
        ;

    DeclTypeSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos lpPos, var SourcePos rpPos) : Node*
        ::= 
        (
            DECLTYPE{ s = sourcePos; } LPAREN{ lpPos = sourcePos; } Expression(ctx):expr RPAREN{ rpPos = sourcePos; }
        )
        {
            return new DeclTypeSpecifierNode(s, expr, lpPos, rpPos);
        }
        ;

    PlaceholderTypeSpecifier(sngcpp::symbols::Context* ctx, var SourcePos s, var SourcePos dtPos, var SourcePos autoPos, var SourcePos lpPos, var SourcePos rpPos) : Node*
        ::= 
        (
            (TypeConstraint(ctx):typeConstraint{ s = sourcePos; })? 
            (
                AUTO
                { 
                    if (!s.IsValid()) s = sourcePos; 
                    autoPos = sourcePos;
                    return new PlaceholderTypeSpecifierNode(s, typeConstraint, dtPos, autoPos, lpPos, rpPos);
                } 
            )
            |
            (
                (DECLTYPE{ dtPos = sourcePos; if (!s.IsValid()) s = sourcePos; } LPAREN{ lpPos = sourcePos; } AUTO{ autoPos = sourcePos; } RPAREN{ rpPos = sourcePos; })
                {
                    return new PlaceholderTypeSpecifierNode(s, typeConstraint, dtPos, autoPos, lpPos, rpPos);
                }
            )
        )
        ;
}
