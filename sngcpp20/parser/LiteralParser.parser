// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/parser/Context.hpp>
[hpp]#include <sngcpp20/ast/Literal.hpp>
[cpp]#include <sngcpp20/ast/Identifier.hpp>
[cpp]#include <sngcpp20/parser/LiteralTokenParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::par;
using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) LiteralParser
{
    uselexer CppLexer;

    Literal(sngcpp::par::Context* ctx) : Node*
        ::= UserDefinedLiteral(ctx):udLiteral{ return udLiteral; }
        |   INTLIT{ return sngcpp::par::ParseIntegerLiteral(sourcePos, lexer.FileName(), lexer.GetMatch(pos)); }
        |   FLOATLIT{ return sngcpp::par::ParseFloatingLiteral(sourcePos, lexer.FileName(), lexer.GetMatch(pos)); }
        |   CHARLIT{ return sngcpp::par::ParseCharacterLiteral(sourcePos, lexer.FileName(), lexer.GetMatch(pos)); }
        |   BEGINRAWSTRINGLIT{ return sngcpp::par::ParseRawStringLiteral(sourcePos, lexer); }
        |   STRINGLIT{ return sngcpp::par::ParseStringLiteral(sourcePos, lexer.FileName(), lexer.GetMatch(pos)); }
        |   TRUE{ return new BooleanLiteralNode(sourcePos, true, lexer.GetMatch(pos)); }
        |   FALSE{ return new BooleanLiteralNode(sourcePos, false, lexer.GetMatch(pos)); }
        |   NULLPTR{ return new NullPtrLiteralNode(sourcePos, lexer.GetMatch(pos)); }
        ;

    UserDefinedLiteral(sngcpp::par::Context* ctx, var SourcePos s, var int64_t p, var std::unique_ptr<Node> udLiteralNode) : Node*
        ::= 
        (   INTLIT{ s = sourcePos; p = pos; }
            UdSuffix:udSuffix{ udLiteralNode.reset(new UserDefinedLiteraNode(s, sngcpp::par::ParseIntegerLiteral(s, lexer.FileName(), lexer.GetMatch(p)), udSuffix)); }
        |   FLOATLIT{ s = sourcePos; p = pos; }
            UdSuffix:udSuffix{ udLiteralNode.reset(new UserDefinedLiteraNode(s, sngcpp::par::ParseFloatingLiteral(s, lexer.FileName(), lexer.GetMatch(p)), udSuffix)); }
        |   STRINGLIT{ s = sourcePos; p = pos; }
            UdSuffix:udSuffix{ udLiteralNode.reset(new UserDefinedLiteraNode(s, sngcpp::par::ParseStringLiteral(s, lexer.FileName(), lexer.GetMatch(p)), udSuffix)); }
        |   CHARLIT{ s = sourcePos; p = pos; }
            UdSuffix:udSuffix{ udLiteralNode.reset(new UserDefinedLiteraNode(s, sngcpp::par::ParseCharacterLiteral(s, lexer.FileName(), lexer.GetMatch(p)), udSuffix)); }
        )
        {
            return udLiteralNode.release();
        }
        ;

    UdSuffix : Node*
        ::= ID{ return new IdentifierNode(sourcePos, lexer.GetMatch(pos)); }
        ;

    LiteralOperatorId(sngcpp::par::Context* ctx, var SourcePos s, var SourcePos stringLitPos, var SourcePos idPos, var int64_t idp) : Node*
        ::= 
        (
            OPERATOR{ s = sourcePos; } STRINGLIT{ stringLitPos = sourcePos; pass = lexer.GetMatch(pos) == U""; } ID{ idPos = sourcePos; idp = pos; }
        )
        {
            return new LiteralOperatorIdNode(s, new IdentifierNode(idPos, lexer.GetMatch(idp)), stringLitPos);
        }
        ;

    StringLiteral(sngcpp::par::Context* ctx) : Node*
        ::= STRINGLIT{ return sngcpp::par::ParseStringLiteral(sourcePos, lexer.FileName(), lexer.GetMatch(pos)); }
        ;
}
