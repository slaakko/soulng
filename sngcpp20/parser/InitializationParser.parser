// =================================
// Copyright (c) 2021 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/Expression.hpp>
[cpp]#include <sngcpp20/parser/AttributeParser.hpp>
[cpp]#include <sngcpp20/parser/ExpressionParser.hpp>
[cpp]#include <sngcpp20/parser/FunctionParser.hpp>
[cpp]#include <sngcpp20/parser/IdentifierParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) InitializationParser
{
    uselexer CppLexer;
    state;

    using AttributeParser.LBrace;
    using AttributeParser.RBrace;
    using ExpressionParser.AssignmentExpression;
    using ExpressionParser.Expression;
    using ExpressionParser.ExpressionList;
    using ExpressionParser.Ellipsis;
    using IdentifierParser.Identifier;
    using FunctionParser.Comma;

    Initializer(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node, var std::unique_ptr<ExpressionListNode> exprListNode) : Node*
        ::= 
        (   BraceOrEqualInitializer(ctx):braceOrEqualInit{ node.reset(braceOrEqualInit); }
        |   LPAREN{ exprListNode.reset(new ExpressionListNode(sourcePos)); exprListNode->SetLParenPos(sourcePos); } 
            ExpressionList(ctx, exprListNode.get()):expressionList 
            RPAREN{ exprListNode->SetRParenPos(sourcePos); node.reset(exprListNode.release()); }
        )
        {
            return node.release();
        }
        ;

    InitializerClause(sngcpp::symbols::Context* ctx) : Node*
        ::= BracedInitList(ctx):bracedInitList{ return bracedInitList; }
        |   AssignmentExpression(ctx):assignmentExpr{ return assignmentExpr; }
        ;

    DesignatedInitializerClause(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            Designator(ctx):designator{ s = sourcePos; } BraceOrEqualInitializer(ctx):initializer
        )
        {
            return new DesignatedInitializerNode(s, designator, initializer);
        }
        ;

    Designator(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            DOT{ s = sourcePos; } Identifier(ctx):identifier
        )
        {
            return new DesignatorNode(s, identifier);
        }
        ;

    InitializerList(sngcpp::symbols::Context* ctx, sngcpp::ast::Node* container)
        ::= InitializerClause(ctx):first{ container->AddNode(first); } (Comma:comma{ container->AddNode(comma); } InitializerClause(ctx):next{ container->AddNode(next); })*
            (Ellipsis:ellipsis{ container->AddNode(ellipsis); })?
        ;

    DesignatedInitializerList(sngcpp::symbols::Context* ctx, sngcpp::ast::Node* container)
        ::= DesignatedInitializerClause(ctx):first{ container->AddNode(first); } (Comma:comma{ container->AddNode(comma); } DesignatedInitializerClause(ctx):next{ container->AddNode(next); })*
        ;

    ExprOrBracedInitList(sngcpp::symbols::Context* ctx) : Node*
        ::= BracedInitList(ctx):bracedInitList{ return bracedInitList; }
        |   Expression(ctx):expr{ return expr; }
        ;

    BraceOrEqualInitializer(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= ASSIGN{ s = sourcePos; } InitializerClause(ctx):initializer{ return new AssignmentInitNode(s, initializer); }
        |   BracedInitList(ctx):bracedInitList{ return bracedInitList; }
        ;

    BracedInitList(sngcpp::symbols::Context* ctx, var std::unique_ptr<Node> node) : Node*
        ::= 
        (
            LBrace:lbrace{ node.reset(new BracedInitListNode(sourcePos)); node->AddNode(lbrace); }
            (InitializerList(ctx, node.get()):initList | DesignatedInitializerList(ctx, node.get()):designatedInitList)
            (Comma:comma{ node->AddNode(comma); })?
            RBrace:rbrace{ node->AddNode(rbrace); }
        )
        {
            return node.release();
        }
        ;
}
