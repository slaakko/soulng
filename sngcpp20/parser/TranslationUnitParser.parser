// =================================
// Copyright (c) 2022 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcpp20/parser/ParserApi.hpp>
[hpp]#include <sngcpp20/symbols/Context.hpp>
[hpp]#include <sngcpp20/ast/TranslationUnit.hpp>
[cpp]#include <sngcpp20/parser/Rules.hpp>
[cpp]#include <sngcpp20/parser/DeclarationParser.hpp>
[cpp]#include <sngcpp20/parser/ModuleParser.hpp>
[cpp]#include <sngcpp20/lexer/CppLexer.hpp>
[cpp]#include <sngcpp20/lexer/CppTokens.hpp>

using namespace sngcpp::ast;
using namespace CppTokens;
using namespace soulng::lexer;

parser api(PARSER_API) TranslationUnitParser
{
    uselexer CppLexer;
    main;
    state;
    farthest_error;

    using DeclarationParser.DeclarationSeq;
    using ModuleParser.GlobalModuleFragment;
    using ModuleParser.ModuleDeclaration;
    using ModuleParser.PrivateModuleFragment;

    TranslationUnit(sngcpp::symbols::Context* ctx) : sngcpp::ast::Node*
        ::= empty{ lexer.SetRuleNameVecPtr(GetRuleNameVecPtr()); }
        (   ModuleUnit(ctx):moduleUnit{ return new TranslationUnitNode(sourcePos, moduleUnit); }
        |   DeclarationSeq(ctx):declarations{ return new TranslationUnitNode(sourcePos, declarations); }
        |   empty{ return new TranslationUnitNode(sourcePos, nullptr); }
        )
        ;

    ModuleUnit(sngcpp::symbols::Context* ctx, var SourcePos s) : Node*
        ::= 
        (
            (GlobalModuleFragment(ctx):globalModuleFragment{ s = sourcePos; })? 
            ModuleDeclaration(ctx):moduleDeclaration{ if (!s.IsValid()) s = sourcePos; } 
            DeclarationSeq(ctx):declarations? 
            PrivateModuleFragment(ctx):privateModuleFragment?
        )
        {
            return new ModuleUnitNode(s, globalModuleFragment, moduleDeclaration, declarations, privateModuleFragment);
        }
        ;
}
