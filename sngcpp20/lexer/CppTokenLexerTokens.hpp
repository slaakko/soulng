#ifndef CppTokenLexerTokens_HPP
#define CppTokenLexerTokens_HPP

// this file has been automatically generated from 'C:/work/soulng/sngcpp20/lexer/CppTokenLexer.lexer' using soulng lexer generator slg version 4.0.0

#include <sngcpp20/lexer/CppLexerApi.hpp>
#include <sngcpp20/ast/SourceCodeWriter.hpp>
#include <string>

namespace CppTokenLexerTokens
{
    const int END = 0;
    const int ALIGNAS = 1;
    const int ALIGNOF = 2;
    const int ASM = 3;
    const int AUTO = 4;
    const int BOOL = 5;
    const int BREAK = 6;
    const int CASE = 7;
    const int CATCH = 8;
    const int CHAR = 9;
    const int CHAR8_T = 10;
    const int CHAR16_T = 11;
    const int CHAR32_T = 12;
    const int CLASS = 13;
    const int CONCEPT = 14;
    const int CONST = 15;
    const int CONSTEVAL = 16;
    const int CONSTEXPR = 17;
    const int CONSTINIT = 18;
    const int CONST_CAST = 19;
    const int CONTINUE = 20;
    const int CO_AWAIT = 21;
    const int CO_RETURN = 22;
    const int CO_YIELD = 23;
    const int DECLTYPE = 24;
    const int DEFAULT = 25;
    const int DELETE = 26;
    const int DO = 27;
    const int DOUBLE = 28;
    const int DYNAMIC_CAST = 29;
    const int ELSE = 30;
    const int ENUM = 31;
    const int EXPLICIT = 32;
    const int EXPORT = 33;
    const int EXTERN = 34;
    const int FALSE = 35;
    const int FLOAT = 36;
    const int FOR = 37;
    const int FRIEND = 38;
    const int GOTO = 39;
    const int IF = 40;
    const int INLINE = 41;
    const int INT = 42;
    const int LONG = 43;
    const int MUTABLE = 44;
    const int NAMESPACE = 45;
    const int NEW = 46;
    const int NOEXCEPT = 47;
    const int NULLPTR = 48;
    const int OPERATOR = 49;
    const int PRIVATE = 50;
    const int PROTECTED = 51;
    const int PUBLIC = 52;
    const int REGISTER = 53;
    const int REINTERPRET_CAST = 54;
    const int REQUIRES = 55;
    const int RETURN = 56;
    const int SHORT = 57;
    const int SIGNED = 58;
    const int SIZEOF = 59;
    const int STATIC = 60;
    const int STATIC_ASSERT = 61;
    const int STATIC_CAST = 62;
    const int STRUCT = 63;
    const int SWITCH = 64;
    const int TEMPLATE = 65;
    const int THIS = 66;
    const int THREAD_LOCAL = 67;
    const int THROW = 68;
    const int TRUE = 69;
    const int TRY = 70;
    const int TYPEDEF = 71;
    const int TYPEID = 72;
    const int TYPENAME = 73;
    const int UNION = 74;
    const int UNSIGNED = 75;
    const int USING = 76;
    const int VIRTUAL = 77;
    const int VOID = 78;
    const int VOLATILE = 79;
    const int WCHAR_T = 80;
    const int WHILE = 81;
    const int __DECLSPEC = 82;
    const int __THREAD = 83;
    const int FLOATLIT = 84;
    const int INTLIT = 85;
    const int CHARLIT = 86;
    const int STRINGLIT = 87;
    const int BEGINRAWSTRINGLIT = 88;
    const int COLONCOLON = 89;
    const int COMMA = 90;
    const int ASSIGN = 91;
    const int MULASSIGN = 92;
    const int DIVASSIGN = 93;
    const int REMASSIGN = 94;
    const int ADDASSIGN = 95;
    const int SUBASSIGN = 96;
    const int SHIFTRIGHTASSIGN = 97;
    const int SHIFTLEFTASSIGN = 98;
    const int ANDASSIGN = 99;
    const int XORASSIGN = 100;
    const int ORASSIGN = 101;
    const int QUEST = 102;
    const int COLON = 103;
    const int OROR = 104;
    const int AMPAMP = 105;
    const int OR = 106;
    const int XOR = 107;
    const int AMP = 108;
    const int EQ = 109;
    const int NEQ = 110;
    const int LEQ = 111;
    const int GEQ = 112;
    const int SPACESHIP = 113;
    const int LANGLE = 114;
    const int RANGLE = 115;
    const int SHIFTLEFT = 116;
    const int SHIFTRIGHT = 117;
    const int PLUS = 118;
    const int MINUS = 119;
    const int STAR = 120;
    const int DIV = 121;
    const int MOD = 122;
    const int DOTSTAR = 123;
    const int ARROWSTAR = 124;
    const int LPAREN = 125;
    const int RPAREN = 126;
    const int PLUSPLUS = 127;
    const int MINUSMINUS = 128;
    const int EXCLAMATION = 129;
    const int TILDE = 130;
    const int LBRACKET = 131;
    const int RBRACKET = 132;
    const int LBRACE = 133;
    const int RBRACE = 134;
    const int DOT = 135;
    const int ARROW = 136;
    const int SEMICOLON = 137;
    const int ELLIPSES = 138;
    const int WS = 139;
    const int LINECOMMENT = 140;
    const int BLOCKCOMMENT = 141;
    const int BLOCKCOMMENTLINE = 142;
    const int KEYWORD = 143;
    const int ID = 144;
    const int NUMBER = 145;
    const int PP = 146;
    const int OTHER = 147;
    const int MAX = 148;

    LEXER_API void InitTokenIdMap();
    LEXER_API int GetTokenId(const std::u32string& tokenName);
    LEXER_API const char* GetTokenName(int tokenId);
    LEXER_API const char* GetTokenInfo(int tokenId);
}
#endif
