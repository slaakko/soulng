#ifndef ParserFileTokens_HPP
#define ParserFileTokens_HPP

// this file has been automatically generated from 'D:/work/soulng-project/soulng/spg/ParserFileLexer.lexer' using soulng lexer generator slg version 1.2.0

#include <string>

namespace ParserFileTokens
{
    const int END = 0;
    const int PARSER = 1;
    const int API = 2;
    const int INCLUDE = 3;
    const int MAIN = 4;
    const int USELEXER = 5;
    const int RULEINFO = 6;
    const int EMPTY = 7;
    const int VAR = 8;
    const int CPPPREFIX = 9;
    const int HPPPREFIX = 10;
    const int FILEPATH = 11;
    const int PRODUCES = 12;
    const int EXCLAMATION = 13;
    const int CHARSET = 14;
    const int AUTO = 15;
    const int REGISTER = 16;
    const int STATIC = 17;
    const int EXTERN = 18;
    const int MUTABLE = 19;
    const int CHAR = 20;
    const int WCHART = 21;
    const int BOOL = 22;
    const int SHORT = 23;
    const int INT = 24;
    const int LONG = 25;
    const int SIGNED = 26;
    const int UNSIGNED = 27;
    const int FLOAT = 28;
    const int DOUBLE = 29;
    const int VOID = 30;
    const int TYPEDEF = 31;
    const int CONST = 32;
    const int VOLATILE = 33;
    const int USING = 34;
    const int NAMESPACE = 35;
    const int THROW = 36;
    const int SIZEOF = 37;
    const int OPERATOR = 38;
    const int DYNAMICCAST = 39;
    const int STATICCAST = 40;
    const int REINTERPRETCAST = 41;
    const int CONSTCAST = 42;
    const int TYPEID = 43;
    const int THIS = 44;
    const int NEW = 45;
    const int DELETE = 46;
    const int TRUE = 47;
    const int FALSE = 48;
    const int NULLPTR = 49;
    const int CASE = 50;
    const int DEFAULT = 51;
    const int IF = 52;
    const int ELSE = 53;
    const int SWITCH = 54;
    const int WHILE = 55;
    const int DO = 56;
    const int FOR = 57;
    const int BREAK = 58;
    const int CONTINUE = 59;
    const int RETURN = 60;
    const int GOTO = 61;
    const int TRY = 62;
    const int CATCH = 63;
    const int ID = 64;
    const int INTLIT = 65;
    const int FLOATINGLIT = 66;
    const int CHARLIT = 67;
    const int STRINGLIT = 68;
    const int DISJUNCTION = 69;
    const int AMPAMP = 70;
    const int DOTSTAR = 71;
    const int ARROWSTAR = 72;
    const int BITOR = 73;
    const int BITXOR = 74;
    const int AMP = 75;
    const int EQ = 76;
    const int NEQ = 77;
    const int LEQ = 78;
    const int GEQ = 79;
    const int SHIFTLEFT = 80;
    const int SHIFTRIGHT = 81;
    const int PLUS = 82;
    const int MINUS = 83;
    const int STAR = 84;
    const int DIV = 85;
    const int REM = 86;
    const int PLUSPLUS = 87;
    const int MINUSMINUS = 88;
    const int CPL = 89;
    const int DOT = 90;
    const int ARROW = 91;
    const int QUEST = 92;
    const int LPAREN = 93;
    const int RPAREN = 94;
    const int LBRACE = 95;
    const int RBRACE = 96;
    const int LBRACKET = 97;
    const int RBRACKET = 98;
    const int LANGLE = 99;
    const int RANGLE = 100;
    const int ELLIPSIS = 101;
    const int COLONCOLON = 102;
    const int COLON = 103;
    const int SEMICOLON = 104;
    const int HASH = 105;
    const int COMMA = 106;
    const int ASSIGN = 107;
    const int MULASSIGN = 108;
    const int DIVASSIGN = 109;
    const int REMASSIGN = 110;
    const int PLUSASSIGN = 111;
    const int MINUSASSIGN = 112;
    const int SHIFTLEFTASSIGN = 113;
    const int SHIFTRIGHTASSIGN = 114;
    const int ANDASSIGN = 115;
    const int XORASSIGN = 116;
    const int ORASSIGN = 117;

    void InitTokenIdMap();
    int GetTokenId(const std::u32string& tokenName);
    const char* GetTokenName(int tokenId);
    const char* GetTokenInfo(int tokenId);
}
#endif
