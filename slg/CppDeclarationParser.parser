// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <soulng/cppcode/Declaration.hpp>
[hpp]#include <soulng/cppcode/Type.hpp>
[cpp]#include <soulng/slg/CppDeclaratorParser.hpp>
[cpp]#include <soulng/slg/CppIdentifierParser.hpp>
[cpp]#include <soulng/slg/CppExpressionParser.hpp>
[cpp]#include <soulng/slg/LexerFileLexer.hpp>
[cpp]#include <soulng/slg/LexerFileTokens.hpp>

using namespace soulng::lexer;
using namespace LexerFileTokens;

parser CppDeclarationParser
{
    lexer LexerFileLexer;

    using CppIdentifierParser.CppIdentifier;
    using CppIdentifierParser.QualifiedCppId;
    using CppDeclaratorParser.InitDeclaratorList;
    using CppDeclaratorParser.TypeId;
    using CppExpressionParser.AssignmentExpression;

    BlockDeclaration : soulng::cppcode::CppObject*
        ::= NamespaceAliasDefinition:nsAlias{ return nsAlias; }
        |   UsingDirective:usingDirective{ return usingDirective; }
        |   UsingDeclaration:usingDeclaration{ return usingDeclaration; }
        |   SimpleDeclaration:simpleDeclaration{ return simpleDeclaration; }
        ;

    SimpleDeclaration(var std::unique_ptr<soulng::cppcode::SimpleDeclaration> simpleDeclaration) : soulng::cppcode::SimpleDeclaration*
        ::= empty{ simpleDeclaration.reset(new soulng::cppcode::SimpleDeclaration()); }
            (DeclSpecifierSeq(simpleDeclaration.get()):declSpecifierSeq)?
            (InitDeclaratorList:initDeclaratorList{ simpleDeclaration->SetInitDeclaratorList(initDeclaratorList); })?
            SEMICOLON
        {
            return simpleDeclaration.release();
        }
        ;

    DeclSpecifierSeq(soulng::cppcode::SimpleDeclaration* declaration)
        ::= (DeclSpecifier:declSpecifier{ declaration->Add(declSpecifier); })+
        |   TypeName:typeName{ declaration->Add(typeName); }
        ;

    DeclSpecifier : soulng::cppcode::DeclSpecifier*
        ::= StorageClassSpecifier:storateClassSpecifier{ return storateClassSpecifier; }
        |   TypeSpecifier:typeSpecifier{ return typeSpecifier; }
        |   Typedef:tdef{ return tdef; }
        ;

    StorageClassSpecifier : soulng::cppcode::StorageClassSpecifier*
        ::= AUTO{ return new soulng::cppcode::StorageClassSpecifier(U"auto"); }
        |   REGISTER{ return new soulng::cppcode::StorageClassSpecifier(U"register"); }
        |   STATIC{ return new soulng::cppcode::StorageClassSpecifier(U"static"); }
        |   EXTERN{ return new soulng::cppcode::StorageClassSpecifier(U"extern"); }
        |   MUTABLE{ return new soulng::cppcode::StorageClassSpecifier(U"mutable"); }
        ;

    TypeSpecifier : soulng::cppcode::TypeSpecifier*
        ::= SimpleTypeSpecifier:simpleTypeSpecifier{ return simpleTypeSpecifier; }
        |   CVQualifier:cvQualified{ return cvQualified; }
        ;

    SimpleTypeSpecifier : soulng::cppcode::TypeSpecifier*
        ::= CHAR{ return new soulng::cppcode::TypeSpecifier(U"char"); }
        |   WCHART{ return new soulng::cppcode::TypeSpecifier(U"wchar_t"); }
        |   BOOL{ return new soulng::cppcode::TypeSpecifier(U"bool"); }
        |   SHORT{ return new soulng::cppcode::TypeSpecifier(U"short"); }
        |   INT{ return new soulng::cppcode::TypeSpecifier(U"int"); }
        |   LONG{ return new soulng::cppcode::TypeSpecifier(U"long"); }
        |   SIGNED{ return new soulng::cppcode::TypeSpecifier(U"signed"); }
        |   UNSIGNED{ return new soulng::cppcode::TypeSpecifier(U"unsigned"); }
        |   FLOAT{ return new soulng::cppcode::TypeSpecifier(U"float"); }
        |   DOUBLE{ return new soulng::cppcode::TypeSpecifier(U"double"); }
        |   VOID{ return new soulng::cppcode::TypeSpecifier(U"void"); }
        ;

    TypeName(var std::unique_ptr<soulng::cppcode::TypeName> typeName) : soulng::cppcode::TypeName*
        ::=
        (
            QualifiedCppId:qid{ typeName.reset(new soulng::cppcode::TypeName(qid)); }
            (LANGLE{ ++lexer.leftAngleCount; typeName->IsTemplate() = true; } TemplateArgumentList(typeName.get()):args RANGLE{ --lexer.leftAngleCount; })?
        )
        {
            return typeName.release();
        }
        ;

    TemplateArgumentList(soulng::cppcode::TypeName* typeName)
        ::= TemplateArgument:arg{ typeName->AddTemplateArgument(arg); } % COMMA
        ;

    TemplateArgument : soulng::cppcode::CppObject*
        ::= TypeId:typeId{ return typeId; }
        |   AssignmentExpression:assignmentExpr{ return assignmentExpr; }
        ;

    Typedef : soulng::cppcode::DeclSpecifier*
        ::= TYPEDEF{ return new soulng::cppcode::Typedef(); }
        ;

    CVQualifier : soulng::cppcode::TypeSpecifier*
        ::= CONST{ return new soulng::cppcode::Const(); }
        |   VOLATILE{ return new soulng::cppcode::Volatile(); }
        ;

    NamespaceAliasDefinition : soulng::cppcode::UsingObject*
        ::= (NAMESPACE CppIdentifier:id ASSIGN QualifiedCppId:qid SEMICOLON){ return new soulng::cppcode::NamespaceAlias(id, qid); }
        ;

    UsingDeclaration : soulng::cppcode::UsingObject*
        ::= USING QualifiedCppId:qid SEMICOLON{ return new soulng::cppcode::UsingDeclaration(qid); }
        ;

    UsingDirective : soulng::cppcode::UsingObject*
        ::= USING NAMESPACE QualifiedCppId:ns SEMICOLON{ return new soulng::cppcode::UsingDirective(ns); }
        ;

    ruleinfo
    {
        (BlockDeclaration, "block declaration"), (SimpleDeclaration, "simple declaration"), (DeclSpecifierSeq, "declaration specifier sequence"),
        (DeclSpecifier, "declaration specifier"), (StorageClassSpecifier, "storage class specifier"), (TypeSpecifier, "type specifier"),
        (SimpleTypeSpecifier, "simple type specifier"), (TypeName, "type name"), (TemplateArgumentList, "template argument list"),
        (TemplateArgument, "template argument"), (Typedef, "typedef specifier"), (CVQualifier, "const-volatile qualifier"),
        (NamespaceAliasDefinition, "namespace alias definition"), (UsingDeclaration, "using declaration"), (UsingDirective, "using directive")
    }
}
