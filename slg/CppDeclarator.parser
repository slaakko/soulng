// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <soulng/cppcode/Declaration.hpp>
[hpp]#include <soulng/cppcode/Type.hpp>
[cpp]#include <soulng/slg/CppExpression.hpp>
[cpp]#include <soulng/slg/CppDeclaration.hpp>
[cpp]#include <soulng/slg/LexerFileLexer.hpp>
[cpp]#include <soulng/slg/LexerFileTokens.hpp>
[cpp]#include <soulng/util/TextUtils.hpp>

using namespace soulng::lexer;
using namespace LexerFileTokens;

parser CppDeclaratorParser
{
    lexer LexerFileLexer;

    using CppExpressionParser.ConstantExpression;
    using CppExpressionParser.IdExpression;
    using CppExpressionParser.ExpressionList;
    using CppExpressionParser.AssignmentExpression;
    using CppDeclarationParser.TypeName;
    using CppDeclarationParser.TypeSpecifier;
    using CppDeclarationParser.CVQualifier;

    InitDeclaratorList(var std::unique_ptr<soulng::cppcode::InitDeclaratorList> initDeclaratorList) : soulng::cppcode::InitDeclaratorList*
        ::=
        (   empty{ initDeclaratorList.reset(new soulng::cppcode::InitDeclaratorList()); }
            (InitDeclarator:initDeclarator{ initDeclaratorList->Add(initDeclarator); } % COMMA)
        )
        {
            return initDeclaratorList.release();
        }
        ;

    InitDeclarator : soulng::cppcode::InitDeclarator*
        ::= (Declarator:declarator Initializer:initializer?)
        {
            return new soulng::cppcode::InitDeclarator(declarator, initializer);
        }
        ;

    Declarator(var Span s) : std::u32string
        ::=
        (   DirectDeclarator:directDeclarator{ s = span; }
        |   PtrOperator:ptrOperator{ s = span; } Declarator:declarator{ s.end = span.end; }
        )
        {
            return lexer.GetMatch(s);
        }
        ;

    DirectDeclarator
        ::= DeclaratorId:declaratorId
        (   LBRACKET ConstantExpression:expr? RBRACKET
        |   LPAREN Declarator:declarator RPAREN
        )*
        ;

    DeclaratorId
        ::= IdExpression:idExpr
        |   TypeName:typeName
        ;

    TypeId(var std::unique_ptr<soulng::cppcode::TypeId> typeId) : soulng::cppcode::TypeId*
        ::= empty{ typeId.reset(new soulng::cppcode::TypeId()); }
        (
            (TypeSpecifierSeq(typeId.get()):typeSpecifierSeq | TypeName:typeName{ typeId->Add(typeName); })
            (AbstractDeclarator:abstractDeclarator{ typeId->Declarator() = abstractDeclarator; })?
        )
        {
            return typeId.release();
        }
        ;

    Type(var std::unique_ptr<soulng::cppcode::Type> type) : soulng::cppcode::Type*
        ::= empty{ type.reset(new soulng::cppcode::Type()); }
        (   (TypeSpecifier:typeSpecifier{ type->Add(typeSpecifier); })+
        |   TypeName:typeName{ type->Add(typeName); }
        )
        {
            return type.release();
        }
        ;

    TypeSpecifierSeq(soulng::cppcode::TypeId* typeId)
        ::= (TypeSpecifier:typeSpecifier{ typeId->Add(typeSpecifier); })+
        ;

    AbstractDeclarator(var Span s) : std::u32string
        ::= 
        (   PtrOperator:ptrOperator{ s = span; } (AbstractDeclarator:abstractDeclarator{ s.end = span.end; })?
        |   DirectAbstractDeclarator:directAbstractDeclarator{ s = span; }
        )
        {
            return soulng::util::Trim(lexer.GetMatch(s));
        }
        ;

    DirectAbstractDeclarator
        ::=
        (   LBRACKET ConstantExpression:expr? RBRACKET
        |   LPAREN AbstractDeclarator:abstractDeclarator RPAREN
        )+
        ;

    PtrOperator
        ::= STAR CVQualifierSeq:cvQualifiedSeq?
        |   AMP
        ;

    CVQualifierSeq
        ::= CVQualifier:cvQualifier+
        ;

    Initializer(var std::unique_ptr<soulng::cppcode::Initializer> initializer) : soulng::cppcode::Initializer*
        ::=
        (   ASSIGN InitializerClause:initializerClause{ initializer.reset(new soulng::cppcode::Initializer(initializerClause)); }
        |   LPAREN{ initializer.reset(new soulng::cppcode::Initializer(nullptr)); } ExpressionList(initializer.get()):exprList RPAREN
        )
        {
            return initializer.release();
        }
        ;

    InitializerClause(var std::unique_ptr<soulng::cppcode::AssignInit> assignInit) : soulng::cppcode::AssignInit*
        ::=
        (   AssignmentExpression:expr{ assignInit.reset(new soulng::cppcode::AssignInit(expr)); }
        |   LBRACE{ assignInit.reset(new soulng::cppcode::AssignInit(nullptr)); } InitializerList(assignInit.get()):initializerList RBRACE
        |   LBRACE RBRACE{ assignInit.reset(new soulng::cppcode::AssignInit(nullptr)); }
        )
        {
            return assignInit.release();
        }
        ;

    InitializerList(soulng::cppcode::AssignInit* init)
        ::= InitializerClause:initializerClause{ init->Add(initializerClause); } % COMMA
        ;

    ruleinfo
    {
        (InitDeclaratorList, "initializer declarator list"), (InitDeclarator, "initializer declarator"), (Declarator, "declarator"), (DirectDeclarator, "direct declarator"),
        (DeclaratorId, "declarator identifier"), (TypeId, "type identifier"), (Type, "type"), (TypeSpecifierSeq, "type specifier sequence"), (AbstractDeclarator, "abstract declarator"),
        (DirectAbstractDeclarator, "direct abstract declarator"), (PtrOperator, "pointer operator"), (CVQualifierSeq, "const-volatile qualifier sequence"), (Initializer, "initializer"),
        (InitializerClause, "initializer clause"), (InitializerList, "initializer list")
    }
}
