using System;
using System.Collections;

namespace sng2html
{
    public abstract class RegExpression
    {
        public RegExpression()
        {
        }
        public virtual ~RegExpression()
        {
        }
        public abstract void Accept(sng2html.sng2html.Visitor& visitor);
        public virtual bool IsCharSymbolExpr() const
        {
            return false;
        }
    }
    public class UnaryRegExpression : sng2html.sng2html.RegExpression
    {
        public UnaryRegExpression(sng2html.sng2html.RegExpression* child_) :
            child(child_)
        {
        }
        public sng2html.sng2html.RegExpression* Child() const
        {
            return child.Get();
        }
        private UniquePtr<sng2html.sng2html.RegExpression> child;
    }
    public abstract class BinaryRegExpression : sng2html.sng2html.RegExpression
    {
        public BinaryRegExpression(sng2html.sng2html.RegExpression* left_, sng2html.sng2html.RegExpression* right_) :
            left(left_), right(right_)
        {
        }
        public sng2html.sng2html.RegExpression* Left() const
        {
            return left.Get();
        }
        public sng2html.sng2html.RegExpression* Right() const
        {
            return right.Get();
        }
        public override bool IsCharSymbolExpr() const
        {
            return left->IsCharSymbolExpr() && right->IsCharSymbolExpr();
        }
        private UniquePtr<sng2html.sng2html.RegExpression> left;
        private UniquePtr<sng2html.sng2html.RegExpression> right;
    }
    public class Alt : sng2html.sng2html.BinaryRegExpression
    {
        public Alt(sng2html.sng2html.RegExpression* left_, sng2html.sng2html.RegExpression* right_) :
            base(left_, right_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class Cat : sng2html.sng2html.BinaryRegExpression
    {
        public Cat(sng2html.sng2html.RegExpression* left_, sng2html.sng2html.RegExpression* right_) :
            base(left_, right_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class Kleene : sng2html.sng2html.UnaryRegExpression
    {
        public Kleene(sng2html.sng2html.RegExpression* child_) :
            base(child_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class Pos : sng2html.sng2html.UnaryRegExpression
    {
        public Pos(sng2html.sng2html.RegExpression* child_) :
            base(child_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class Opt : sng2html.sng2html.UnaryRegExpression
    {
        public Opt(sng2html.sng2html.RegExpression* child_) :
            base(child_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class ParenExpr : sng2html.sng2html.UnaryRegExpression
    {
        public ParenExpr(sng2html.sng2html.RegExpression* child_) :
            base(child_)
        {
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
    }
    public class SymbolExpr : sng2html.sng2html.RegExpression
    {
        public SymbolExpr(NOT_CONVERTED symbol_) :
            symbol(symbol_)
        {
        }
        public NOT_CONVERTED* GetSymbol() const
        {
            return symbol;
        }
        public override bool IsCharSymbolExpr() const
        {
            return symbol->IsChar();
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private NOT_CONVERTED symbol;
    }
    public class RefExpr : sng2html.sng2html.RegExpression
    {
        public RefExpr(const ustring& exprId_) :
            exprId(exprId_)
        {
        }
        public const ustring& ExprId() const
        {
            return exprId;
        }
        public override void Accept(sng2html.sng2html.Visitor& visitor)
        {
            visitor.Visit(*this);
        }
        private ustring exprId;
    }
} // namespace sng2html
