#include <minilang/ExpressionParser.hpp>
#include <minilang/TypeParser.hpp>
#include <minilang/IdentifierParser.hpp>
#include <minilang/MinilangLexer.hpp>
#include <minilang/MinilangTokens.hpp>
#include <minilang/Tree.hpp>

using namespace MinilangTokens;

parser StatementParser
{
    uselexer MinilangLexer;

    using ExpressionParser.Expression;
    using TypeParser.Type;
    using IdentifierParser.Identifier;

    Statement : minilang::Node*
        ::= IfStatement:ifS{ return ifS; }
        |   WhileStatement:whileS{ return whileS; }
        |   ReturnStatement:returnS{ return returnS; }
        |   ConstructionStatement:constructionS{ return constructionS; }
        |   AssignmentStatement:assignmentS{ return assignmentS; }
        |   CompoundStatement:compoundS{ return compoundS; }
        ;

    IfStatement : minilang::Node*
        ::= 
		(
			IF LPAREN! Expression:condition! RPAREN! Statement:thenS! (ELSE Statement:elseS!)?
		)
		{
			return new minilang::IfStatementNode(condition, thenS, elseS);
		}
        ;

    WhileStatement : minilang::Node*
        ::= 
		(
			WHILE LPAREN! Expression:condition! RPAREN! Statement:statement!
		)
		{
			return new minilang::WhileStatementNode(condition, statement);
		}
        ;

    ReturnStatement : minilang::Node*
        ::= 
		(
			RETURN Expression:returnValue? SEMICOLON!
		)
		{
			return new minilang::ReturnStatementNode(returnValue);
		}
        ;

    ConstructionStatement : minilang::Node*
        ::= 
		(
			Type:type Identifier:variableName! ASSIGN! Expression:value! SEMICOLON!
		)
		{
			return new minilang::ConstructionStatementNode(type, variableName, value);
		}
        ;

    AssignmentStatement : minilang::Node*
        ::= 
		(
			Identifier:variableName ASSIGN! Expression:value! SEMICOLON!
		)
		{
			return new minilang::AssignmentStatementNode(variableName, value);
		}
        ;

    CompoundStatement(var std::unique_ptr<minilang::CompoundStatementNode> compoundStatement) : minilang::CompoundStatementNode*
        ::= 
		(
			LBRACE{ compoundStatement.reset(new minilang::CompoundStatementNode()); } (Statement:statement{ compoundStatement->AddStatement(statement); })* RBRACE!
		)
		{
			return compoundStatement.release();
		}
        ;
}
