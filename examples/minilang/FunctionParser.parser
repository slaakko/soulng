[hpp]#include <minilang/Tree.hpp>
#include <minilang/TypeParser.hpp>
#include <minilang/IdentifierParser.hpp>
#include <minilang/StatementParser.hpp>
#include <minilang/MinilangLexer.hpp>
#include <minilang/MinilangTokens.hpp>

using namespace MinilangTokens;

parser FunctionParser
{
    uselexer MinilangLexer;

    using TypeParser.Type;
    using IdentifierParser.Identifier;
    using StatementParser.CompoundStatement;

    Function(var std::unique_ptr<minilang::FunctionNode> function) : minilang::FunctionNode*
        ::= 
		(
			Type:returnType Identifier:functionName! LPAREN!{ function.reset(new minilang::FunctionNode(returnType, functionName)); } 
			ParameterList(function.get()):params? RPAREN! 
			CompoundStatement:functionBody!{ function->SetBody(functionBody); }
		)
		{
			return function.release();
		}
        ;

    ParameterList(minilang::FunctionNode* function)
        ::= Parameter:left{ function->AddParam(left); } (COMMA Parameter:right!{ function->AddParam(right); })*
        ;

    Parameter : minilang::ParameterNode*
        ::= Type:type Identifier:name
		{
			return new minilang::ParameterNode(type, name);
		}
        ;
}
