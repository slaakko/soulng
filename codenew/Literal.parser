// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <soulng/cppcode/Literal.hpp>

namespace soulng.code
{
    [cpp]using namespace soulng::cppcode;
    
    grammar Literal
    {
        Literal: soulng::cppcode::Literal*
                        ::= IntegerLiteral{ value = IntegerLiteral; }
                        |   CharacterLiteral{ value = CharacterLiteral; }
                        |   FloatingLiteral{ value = FloatingLiteral; }
                        |   StringLiteral{ value = StringLiteral; }
                        |   BooleanLiteral{ value = BooleanLiteral; }
                        |   PointerLiteral{ value = PointerLiteral; }
                        ;
                
        IntegerLiteral: soulng::cppcode::Literal*
                        ::= token(DecimalLiteral:dl IntegerSuffix:is1?) { value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        |   token(OctalLiteral:ol IntegerSuffix:is2?){ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        |   token(HexadecimalLiteral:hl IntegerSuffix:is3?){ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        ;
                        
        DecimalLiteral  ::= token([1-9] digit*)
                        ;
                        
        OctalLiteral    ::= token('0' OctalDigit*)
                        ;
                        
        OctalDigit      ::= [0-7]
                        ;
                        
        HexadecimalLiteral
                        ::= token(("0x" | "0X")(hexdigit+))
                        ;
                        
        IntegerSuffix   ::= token(UnsignedSuffix (LongLongSuffix | LongSuffix)?)
                        |   token(LongLongSuffix UnsignedSuffix?)
                        |   token(LongSuffix UnsignedSuffix?)
                        ;

        UnsignedSuffix  ::= 'u' | 'U'
                        ;
                        
        LongLongSuffix  ::= "ll" | "LL"
                        ;
                        
        LongSuffix      ::= 'l' | 'L'
                        ;
                        
        CharacterLiteral: soulng::cppcode::Literal*
                        ::= NarrowCharacterLiteral{ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        |   UniversalCharacterLiteral{ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        |   WideCharacterLiteral{ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        ;
                            
        NarrowCharacterLiteral
                        ::= token('\'' CCharSequence '\'')
                        ;
                        
        UniversalCharacterLiteral
                        ::= token('u' '\'' CCharSequence:cs1 '\'')
                        |   token('U' '\'' CCharSequence:cs2 '\'')
                        ;
                        
        WideCharacterLiteral
                        ::= token('L' '\'' CCharSequence '\'')
                        ;
                        
        CCharSequence: std::u32string
                        ::= token(CChar+){ value = std::u32string(matchBegin, matchEnd); }
                        ;
                        
        CChar           ::= [^'\\\n]
                        |   EscapeSequence
                        ;
                        
        EscapeSequence  ::= SimpleEscapeSequence
                        |   OctalEscapeSequence
                        |   HexadecimalEscapeSequence
                        ;
                        
        SimpleEscapeSequence
                        ::= "\\'" | "\\\"" | "\\?" | "\\\\" | "\\a" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | "\\v"
                        ;
                        
        OctalEscapeSequence
                        ::= '\\' OctalDigit OctalDigit? OctalDigit?
                        ;
                        
        HexadecimalEscapeSequence
                        ::= "\\x" hexdigit+
                        ;
                        
        FloatingLiteral: soulng::cppcode::Literal*
                        ::= token(FractionalConstant ExponentPart? FloatingSuffix?){ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        |   token(DigitSequence ExponentPart FloatingSuffix?){ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        ;
                        
        FractionalConstant
                        ::= DigitSequence? '.' DigitSequence
                        |   DigitSequence '.'
                        ;
                        
        DigitSequence   ::= digit+
                        ;
        
        ExponentPart    ::= ('e' | 'E') Sign? DigitSequence
                        ;
                        
        Sign            ::= '+' | '-'
                        ;
                        
        FloatingSuffix  ::= [fFlL]
                        ;
                        
        StringLiteral: soulng::cppcode::Literal*
                        ::= token(EncodingPrefix? '"' SCharSequence? '"'){ value = new soulng::cppcode::Literal(std::u32string(matchBegin, matchEnd)); }
                        ;
                        
        EncodingPrefix  ::= "u8" | 'u' | 'U' | 'L'
                        ;
                        
        SCharSequence   ::= (SChar+)
                        ;
        
        SChar           ::= [^"\\\n]
                        |   EscapeSequence
                        ;
                        
        BooleanLiteral: soulng::cppcode::Literal*
                        ::= keyword("true"){ value = new soulng::cppcode::Literal(U"true"); }
                        |   keyword("false"){ value = new soulng::cppcode::Literal(U"false"); }
                        ;
                        
        PointerLiteral: soulng::cppcode::Literal*
                        ::= keyword("nullptr"){ value = new soulng::cppcode::Literal(U"nullptr"); }
                        ;
    }
}
