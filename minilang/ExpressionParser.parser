#include <soulng/minilang/LiteralParser.hpp>
#include <soulng/minilang/IdentifierParser.hpp>
#include <soulng/minilang/MinilangLexer.hpp>
#include <soulng/minilang/MinilangTokens.hpp>

using namespace MinilangTokens;

parser MinilangExpressionParser
{
    uselexer MinilangLexer;

    using MinilangLiteralParser.Literal;
    using MinilangIdentifierParser.Identifier;

    Expression
        ::= EqualityExpression:expr
        ;

    PrimaryExpression
        ::= Literal:literal
        |   Identifier:identifier
        |   LPAREN Expression:expression RPAREN
        ;

    PostfixExpression
        ::= PrimaryExpression:primary (LPAREN ExpressionList:args? RPAREN)*
        ;

    ExpressionList
        ::= Expression:left (COMMA Expression:right)*
        ;

    UnaryExpression
        ::= UnaryOperator:op UnaryExpression:unaryExpr
        |   PostfixExpression:postfixExpr
        ;

    UnaryOperator
        ::= PLUS
        |   MINUS
        |   NOT
        ;

    MultiplicativeExpression
        ::= UnaryExpression:left (MultiplicativeOperator:op UnaryExpression:right)*
        ;

    MultiplicativeOperator
        ::= MUL
        |   DIV
        |   MOD
        ;

    AdditiveExpression
        ::= MultiplicativeExpression:left (AdditiveOperator:op MultiplicativeExpression:right)*
        ;

    AdditiveOperator
        ::= PLUS
        |   MINUS
        ;

    RelationalExpression
        ::= AdditiveExpression:left (RelationalOperator:op AdditiveExpression:right)*
        ;

    RelationalOperator
        ::= LESS
        |   GREATER
        |   LEQ
        |   GEQ
        ;

    EqualityExpression
        ::= RelationalExpression:left (EqualityOperator:op RelationalExpression:right)*
        ;

    EqualityOperator
        ::= EQ
        |   NEQ
        ;
}
