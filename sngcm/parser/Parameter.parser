// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/parser/ParserApi.hpp>
[hpp]#include <sngcm/ast/Parameter.hpp>
[hpp]#include <sngcm/parser/ParsingContext.hpp>
[cpp]#include <sngcm/parser/TypeExpr.hpp>
[cpp]#include <sngcm/parser/Identifier.hpp>
[cpp]#include <sngcm/lexer/CmajorLexer.hpp>
[cpp]#include <sngcm/lexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) ParameterParser
{
    uselexer CmajorLexer;

    using TypeExprParser.TypeExpr;
    using IdentifierParser.Identifier;

    ParameterList(ParsingContext* ctx, sngcm::ast::Node* owner) 
        ::= LPAREN (Parameter(ctx):param{ owner->AddParameter(param); } % COMMA)? RPAREN!
        ;

    Parameter(ParsingContext* ctx, var Span s) : ParameterNode*
        ::= (TypeExpr(ctx):type{ s = span; } (Identifier:id{ s.end = span.end; })?){ return new ParameterNode(s, type, id); }
        ;

    ruleinfo
    {
        (ParameterList, "parameter list"), (Parameter, "parameter")
    }
}
