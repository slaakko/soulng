// =================================
// Copyright (c) 2019 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <sngcm/parser/ParserApi.hpp>
[hpp]#include <sngcm/ast/Interface.hpp>
[hpp]#include <sngcm/parser/ParsingContext.hpp>
[cpp]#include <sngcm/parser/Attribute.hpp>
[cpp]#include <sngcm/parser/Specifier.hpp>
[cpp]#include <sngcm/parser/Identifier.hpp>
[cpp]#include <sngcm/parser/TypeExpr.hpp>
[cpp]#include <sngcm/parser/Parameter.hpp>
[hpp]#include <sngcm/ast/Class.hpp>
[cpp]#include <sngcm/lexer/CmajorLexer.hpp>
[cpp]#include <sngcm/lexer/CmajorTokens.hpp>

using namespace sngcm::ast;
using namespace CmajorTokens;

parser api(SNGCM_PARSER_API) InterfaceParser
{
    uselexer CmajorLexer;

    using AttributeParser.Attributes;
    using SpecifierParser.Specifiers;
    using IdentifierParser.Identifier;
    using TypeExprParser.TypeExpr;
    using ParameterParser.ParameterList;

    Interface(ParsingContext* ctx, var std::unique_ptr<InterfaceNode> intf, var Span s, var Span specifierSpan, var Span beginBraceSpan, var Span endBraceSpan) : InterfaceNode*
        ::=
        (   empty{ s = span; } Attributes:attrs? Specifiers:specifiers{ specifierSpan = span; } INTERFACE Identifier:id!
            {
                s.end = span.end;
                intf.reset(new InterfaceNode(s, specifiers, id, attrs));
                intf->SetSpecifierSpan(specifierSpan);
            }
            LBRACE!{ beginBraceSpan = span; } InterfaceContent(ctx, intf.get()):content RBRACE!{ endBraceSpan = span; intf->SetBeginBraceSpan(beginBraceSpan); intf->SetEndBraceSpan(endBraceSpan); }
        )
        {
            return intf.release();
        }
        ;

    InterfaceContent(ParsingContext* ctx, sngcm::ast::InterfaceNode* intf)
        ::= (InterfaceMemFun(ctx):intfMemFun{ intf->AddMember(intfMemFun); })*
        ;

    InterfaceMemFun(ParsingContext* ctx, var std::unique_ptr<MemberFunctionNode> memFun, var Span s) : Node*
        ::= empty{ s = span; } Attributes:attrs? TypeExpr(ctx):returnType InterfaceFunctionGroupId:groupId!
        {
            s.end = span.end;
            memFun.reset(new MemberFunctionNode(s, Specifiers(), returnType, groupId, attrs));
        }
        ParameterList(ctx, memFun.get()):paramList! SEMICOLON!
        {
            return memFun.release();
        }
        ;

    InterfaceFunctionGroupId : std::u32string
        ::= ID{ return lexer.GetMatch(span); }
        ;

    ruleinfo
    {
        (Interface, "interface"), (InterfaceContent, "interface content"), (InterfaceMemFun, "interface member function"), (InterfaceFunctionGroupId, "interface function group identifier")
    }
}
